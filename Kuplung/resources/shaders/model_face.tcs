#version 410 core

layout(vertices = 3) out;

#define ID gl_InvocationID

uniform mat4 vs_MVPMatrix;
uniform mat4 vs_MVMatrix;
uniform mat3 vs_normalMatrix;

uniform bool tcs_UseTessellation;
uniform bool tcs_UseCullFace;
uniform int tcs_TessellationSubdivision;

in vec3 tcs_vertexPosition[];
in vec2 tcs_textureCoord[];
in vec3 tcs_vertexNormal0[];
in vec3 tcs_vertexNormal[];
in vec3 tcs_tangent0[];
in vec3 tcs_tangent[];
in vec3 tcs_bitangent0[];
in vec3 tcs_bitangent[];
in vec3 tcs_displacementLocation[];
in float tcs_isBorder[];
in vec3 tcs_shadow_Normal[];
in vec4 tcs_shadow_FragPosLightSpace[];

out vec3 tes_vertexPosition[];
out vec2 tes_textureCoord[];
out vec3 tes_vertexNormal0[];
out vec3 tes_vertexNormal[];
out vec3 tes_tangent0[];
out vec3 tes_tangent[];
out vec3 tes_bitangent0[];
out vec3 tes_bitangent[];
out vec3 tes_displacementLocation[];
out float tes_isBorder[];
out vec3 tes_shadow_Normal[];
out vec4 tes_shadow_FragPosLightSpace[];

float lod_factor = 0.004;
float level(vec4 v0, vec4 v1) {
    return clamp(distance(v0.xyz, v1.xyz) / lod_factor, 1, tcs_TessellationSubdivision);
}

vec4 project(vec3 vertex) {
    return vs_MVMatrix * vec4(vertex, 1.0);
}

void main() {
    tes_vertexPosition[ID] = tcs_vertexPosition[ID];
    tes_textureCoord[ID] = tcs_textureCoord[ID];
    tes_vertexNormal0[ID] = tcs_vertexNormal0[ID];
    tes_vertexNormal[ID] = tcs_vertexNormal[ID];
    tes_tangent0[ID] = tcs_tangent0[ID];
    tes_tangent[ID] = tcs_tangent[ID];
    tes_bitangent0[ID] = tcs_bitangent0[ID];
    tes_bitangent[ID] = tcs_bitangent[ID];
    tes_displacementLocation[ID] = tcs_displacementLocation[ID];
    tes_isBorder[ID] = tcs_isBorder[ID];
    tes_shadow_Normal[ID] = tcs_shadow_Normal[ID];
    tes_shadow_FragPosLightSpace[ID] = tcs_shadow_FragPosLightSpace[ID];

    if (ID == 0) {
        if (!tcs_UseTessellation) {
            gl_TessLevelInner[0] = 1.0;
            gl_TessLevelOuter[0] = 1.0;
            gl_TessLevelOuter[1] = 1.0;
            gl_TessLevelOuter[2] = 1.0;
        }
        else {
            vec4 ss0 = project(tcs_vertexPosition[0]);
            vec4 ss1 = project(tcs_vertexPosition[1]);
            vec4 ss2 = project(tcs_vertexPosition[2]);
            float e0 = level(ss1, ss2);
            float e1 = level(ss0, ss2);
            float e2 = level(ss1, ss0);

            vec3 normal = vs_normalMatrix * cross(tcs_vertexPosition[2] - tcs_vertexPosition[0] , tcs_vertexPosition[1] - tcs_vertexPosition[0]);
            vec4 eyePos = vs_MVMatrix * vec4(tcs_vertexPosition[0], 1);
            float dtv = dot(normalize(normal), normalize(eyePos.xyz));

            if (dtv < -0.0 && tcs_UseCullFace) {
                e0 = 0;
                e1 = 0;
                e2 = 0;
            }

            gl_TessLevelInner[0] = (e0 + e1 + e2) / 3;
            gl_TessLevelOuter[0] = e0;
            gl_TessLevelOuter[1] = e1;
            gl_TessLevelOuter[2] = e2;
        }
    }
}
