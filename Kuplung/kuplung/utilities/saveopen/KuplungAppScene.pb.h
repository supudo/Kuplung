// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungAppScene.proto

#ifndef PROTOBUF_KuplungAppScene_2eproto__INCLUDED
#define PROTOBUF_KuplungAppScene_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "KuplungDefinitions.pb.h"
// @@protoc_insertion_point(includes)

namespace KuplungApp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_KuplungAppScene_2eproto();
void protobuf_AssignDesc_KuplungAppScene_2eproto();
void protobuf_ShutdownFile_KuplungAppScene_2eproto();

class Scene;
class MeshModel;

// ===================================================================

class Scene : public ::google::protobuf::Message {
 public:
  Scene();
  virtual ~Scene();

  Scene(const Scene& from);

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene& default_instance();

  void Swap(Scene* other);

  // implements Message ----------------------------------------------

  Scene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KuplungApp.MeshModel models = 1;
  inline int models_size() const;
  inline void clear_models();
  static const int kModelsFieldNumber = 1;
  inline const ::KuplungApp::MeshModel& models(int index) const;
  inline ::KuplungApp::MeshModel* mutable_models(int index);
  inline ::KuplungApp::MeshModel* add_models();
  inline const ::google::protobuf::RepeatedPtrField< ::KuplungApp::MeshModel >&
      models() const;
  inline ::google::protobuf::RepeatedPtrField< ::KuplungApp::MeshModel >*
      mutable_models();

  // @@protoc_insertion_point(class_scope:KuplungApp.Scene)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::KuplungApp::MeshModel > models_;
  friend void  protobuf_AddDesc_KuplungAppScene_2eproto();
  friend void protobuf_AssignDesc_KuplungAppScene_2eproto();
  friend void protobuf_ShutdownFile_KuplungAppScene_2eproto();

  void InitAsDefaultInstance();
  static Scene* default_instance_;
};
// -------------------------------------------------------------------

class MeshModel : public ::google::protobuf::Message {
 public:
  MeshModel();
  virtual ~MeshModel();

  MeshModel(const MeshModel& from);

  inline MeshModel& operator=(const MeshModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeshModel& default_instance();

  void Swap(MeshModel* other);

  // implements Message ----------------------------------------------

  MeshModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeshModel& from);
  void MergeFrom(const MeshModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ModelID = 1;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelIDFieldNumber = 1;
  inline ::google::protobuf::int32 modelid() const;
  inline void set_modelid(::google::protobuf::int32 value);

  // required bool Settings_DeferredRender = 2;
  inline bool has_settings_deferredrender() const;
  inline void clear_settings_deferredrender();
  static const int kSettingsDeferredRenderFieldNumber = 2;
  inline bool settings_deferredrender() const;
  inline void set_settings_deferredrender(bool value);

  // required bool Setting_CelShading = 3;
  inline bool has_setting_celshading() const;
  inline void clear_setting_celshading();
  static const int kSettingCelShadingFieldNumber = 3;
  inline bool setting_celshading() const;
  inline void set_setting_celshading(bool value);

  // required bool Setting_Wireframe = 4;
  inline bool has_setting_wireframe() const;
  inline void clear_setting_wireframe();
  static const int kSettingWireframeFieldNumber = 4;
  inline bool setting_wireframe() const;
  inline void set_setting_wireframe(bool value);

  // required bool Setting_UseTessellation = 5;
  inline bool has_setting_usetessellation() const;
  inline void clear_setting_usetessellation();
  static const int kSettingUseTessellationFieldNumber = 5;
  inline bool setting_usetessellation() const;
  inline void set_setting_usetessellation(bool value);

  // required bool Setting_UseCullFace = 6;
  inline bool has_setting_usecullface() const;
  inline void clear_setting_usecullface();
  static const int kSettingUseCullFaceFieldNumber = 6;
  inline bool setting_usecullface() const;
  inline void set_setting_usecullface(bool value);

  // required float Setting_Alpha = 7;
  inline bool has_setting_alpha() const;
  inline void clear_setting_alpha();
  static const int kSettingAlphaFieldNumber = 7;
  inline float setting_alpha() const;
  inline void set_setting_alpha(float value);

  // required int32 Setting_TessellationSubdivision = 8;
  inline bool has_setting_tessellationsubdivision() const;
  inline void clear_setting_tessellationsubdivision();
  static const int kSettingTessellationSubdivisionFieldNumber = 8;
  inline ::google::protobuf::int32 setting_tessellationsubdivision() const;
  inline void set_setting_tessellationsubdivision(::google::protobuf::int32 value);

  // required .KuplungApp.ObjectCoordinate positionX = 9;
  inline bool has_positionx() const;
  inline void clear_positionx();
  static const int kPositionXFieldNumber = 9;
  inline const ::KuplungApp::ObjectCoordinate& positionx() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_positionx();
  inline ::KuplungApp::ObjectCoordinate* release_positionx();
  inline void set_allocated_positionx(::KuplungApp::ObjectCoordinate* positionx);

  // required .KuplungApp.ObjectCoordinate positionY = 10;
  inline bool has_positiony() const;
  inline void clear_positiony();
  static const int kPositionYFieldNumber = 10;
  inline const ::KuplungApp::ObjectCoordinate& positiony() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_positiony();
  inline ::KuplungApp::ObjectCoordinate* release_positiony();
  inline void set_allocated_positiony(::KuplungApp::ObjectCoordinate* positiony);

  // required .KuplungApp.ObjectCoordinate positionZ = 11;
  inline bool has_positionz() const;
  inline void clear_positionz();
  static const int kPositionZFieldNumber = 11;
  inline const ::KuplungApp::ObjectCoordinate& positionz() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_positionz();
  inline ::KuplungApp::ObjectCoordinate* release_positionz();
  inline void set_allocated_positionz(::KuplungApp::ObjectCoordinate* positionz);

  // required .KuplungApp.ObjectCoordinate scaleX = 12;
  inline bool has_scalex() const;
  inline void clear_scalex();
  static const int kScaleXFieldNumber = 12;
  inline const ::KuplungApp::ObjectCoordinate& scalex() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_scalex();
  inline ::KuplungApp::ObjectCoordinate* release_scalex();
  inline void set_allocated_scalex(::KuplungApp::ObjectCoordinate* scalex);

  // required .KuplungApp.ObjectCoordinate scaleY = 13;
  inline bool has_scaley() const;
  inline void clear_scaley();
  static const int kScaleYFieldNumber = 13;
  inline const ::KuplungApp::ObjectCoordinate& scaley() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_scaley();
  inline ::KuplungApp::ObjectCoordinate* release_scaley();
  inline void set_allocated_scaley(::KuplungApp::ObjectCoordinate* scaley);

  // required .KuplungApp.ObjectCoordinate scaleZ = 14;
  inline bool has_scalez() const;
  inline void clear_scalez();
  static const int kScaleZFieldNumber = 14;
  inline const ::KuplungApp::ObjectCoordinate& scalez() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_scalez();
  inline ::KuplungApp::ObjectCoordinate* release_scalez();
  inline void set_allocated_scalez(::KuplungApp::ObjectCoordinate* scalez);

  // required .KuplungApp.ObjectCoordinate rotateX = 15;
  inline bool has_rotatex() const;
  inline void clear_rotatex();
  static const int kRotateXFieldNumber = 15;
  inline const ::KuplungApp::ObjectCoordinate& rotatex() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_rotatex();
  inline ::KuplungApp::ObjectCoordinate* release_rotatex();
  inline void set_allocated_rotatex(::KuplungApp::ObjectCoordinate* rotatex);

  // required .KuplungApp.ObjectCoordinate rotateY = 16;
  inline bool has_rotatey() const;
  inline void clear_rotatey();
  static const int kRotateYFieldNumber = 16;
  inline const ::KuplungApp::ObjectCoordinate& rotatey() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_rotatey();
  inline ::KuplungApp::ObjectCoordinate* release_rotatey();
  inline void set_allocated_rotatey(::KuplungApp::ObjectCoordinate* rotatey);

  // required .KuplungApp.ObjectCoordinate rotateZ = 17;
  inline bool has_rotatez() const;
  inline void clear_rotatez();
  static const int kRotateZFieldNumber = 17;
  inline const ::KuplungApp::ObjectCoordinate& rotatez() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_rotatez();
  inline ::KuplungApp::ObjectCoordinate* release_rotatez();
  inline void set_allocated_rotatez(::KuplungApp::ObjectCoordinate* rotatez);

  // required .KuplungApp.ObjectCoordinate displaceX = 18;
  inline bool has_displacex() const;
  inline void clear_displacex();
  static const int kDisplaceXFieldNumber = 18;
  inline const ::KuplungApp::ObjectCoordinate& displacex() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_displacex();
  inline ::KuplungApp::ObjectCoordinate* release_displacex();
  inline void set_allocated_displacex(::KuplungApp::ObjectCoordinate* displacex);

  // required .KuplungApp.ObjectCoordinate displaceY = 19;
  inline bool has_displacey() const;
  inline void clear_displacey();
  static const int kDisplaceYFieldNumber = 19;
  inline const ::KuplungApp::ObjectCoordinate& displacey() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_displacey();
  inline ::KuplungApp::ObjectCoordinate* release_displacey();
  inline void set_allocated_displacey(::KuplungApp::ObjectCoordinate* displacey);

  // required .KuplungApp.ObjectCoordinate displaceZ = 20;
  inline bool has_displacez() const;
  inline void clear_displacez();
  static const int kDisplaceZFieldNumber = 20;
  inline const ::KuplungApp::ObjectCoordinate& displacez() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_displacez();
  inline ::KuplungApp::ObjectCoordinate* release_displacez();
  inline void set_allocated_displacez(::KuplungApp::ObjectCoordinate* displacez);

  // required .KuplungApp.ObjectCoordinate Setting_MaterialRefraction = 21;
  inline bool has_setting_materialrefraction() const;
  inline void clear_setting_materialrefraction();
  static const int kSettingMaterialRefractionFieldNumber = 21;
  inline const ::KuplungApp::ObjectCoordinate& setting_materialrefraction() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_setting_materialrefraction();
  inline ::KuplungApp::ObjectCoordinate* release_setting_materialrefraction();
  inline void set_allocated_setting_materialrefraction(::KuplungApp::ObjectCoordinate* setting_materialrefraction);

  // required .KuplungApp.ObjectCoordinate Setting_MaterialSpecularExp = 22;
  inline bool has_setting_materialspecularexp() const;
  inline void clear_setting_materialspecularexp();
  static const int kSettingMaterialSpecularExpFieldNumber = 22;
  inline const ::KuplungApp::ObjectCoordinate& setting_materialspecularexp() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_setting_materialspecularexp();
  inline ::KuplungApp::ObjectCoordinate* release_setting_materialspecularexp();
  inline void set_allocated_setting_materialspecularexp(::KuplungApp::ObjectCoordinate* setting_materialspecularexp);

  // required int32 Setting_ModelViewSkin = 23;
  inline bool has_setting_modelviewskin() const;
  inline void clear_setting_modelviewskin();
  static const int kSettingModelViewSkinFieldNumber = 23;
  inline ::google::protobuf::int32 setting_modelviewskin() const;
  inline void set_setting_modelviewskin(::google::protobuf::int32 value);

  // required .KuplungApp.Vec3 solidLightSkin_MaterialColor = 24;
  inline bool has_solidlightskin_materialcolor() const;
  inline void clear_solidlightskin_materialcolor();
  static const int kSolidLightSkinMaterialColorFieldNumber = 24;
  inline const ::KuplungApp::Vec3& solidlightskin_materialcolor() const;
  inline ::KuplungApp::Vec3* mutable_solidlightskin_materialcolor();
  inline ::KuplungApp::Vec3* release_solidlightskin_materialcolor();
  inline void set_allocated_solidlightskin_materialcolor(::KuplungApp::Vec3* solidlightskin_materialcolor);

  // required .KuplungApp.Vec3 solidLightSkin_Ambient = 25;
  inline bool has_solidlightskin_ambient() const;
  inline void clear_solidlightskin_ambient();
  static const int kSolidLightSkinAmbientFieldNumber = 25;
  inline const ::KuplungApp::Vec3& solidlightskin_ambient() const;
  inline ::KuplungApp::Vec3* mutable_solidlightskin_ambient();
  inline ::KuplungApp::Vec3* release_solidlightskin_ambient();
  inline void set_allocated_solidlightskin_ambient(::KuplungApp::Vec3* solidlightskin_ambient);

  // required .KuplungApp.Vec3 solidLightSkin_Diffuse = 26;
  inline bool has_solidlightskin_diffuse() const;
  inline void clear_solidlightskin_diffuse();
  static const int kSolidLightSkinDiffuseFieldNumber = 26;
  inline const ::KuplungApp::Vec3& solidlightskin_diffuse() const;
  inline ::KuplungApp::Vec3* mutable_solidlightskin_diffuse();
  inline ::KuplungApp::Vec3* release_solidlightskin_diffuse();
  inline void set_allocated_solidlightskin_diffuse(::KuplungApp::Vec3* solidlightskin_diffuse);

  // required .KuplungApp.Vec3 solidLightSkin_Specular = 27;
  inline bool has_solidlightskin_specular() const;
  inline void clear_solidlightskin_specular();
  static const int kSolidLightSkinSpecularFieldNumber = 27;
  inline const ::KuplungApp::Vec3& solidlightskin_specular() const;
  inline ::KuplungApp::Vec3* mutable_solidlightskin_specular();
  inline ::KuplungApp::Vec3* release_solidlightskin_specular();
  inline void set_allocated_solidlightskin_specular(::KuplungApp::Vec3* solidlightskin_specular);

  // required float solidLightSkin_Ambient_Strength = 28;
  inline bool has_solidlightskin_ambient_strength() const;
  inline void clear_solidlightskin_ambient_strength();
  static const int kSolidLightSkinAmbientStrengthFieldNumber = 28;
  inline float solidlightskin_ambient_strength() const;
  inline void set_solidlightskin_ambient_strength(float value);

  // required float solidLightSkin_Diffuse_Strength = 29;
  inline bool has_solidlightskin_diffuse_strength() const;
  inline void clear_solidlightskin_diffuse_strength();
  static const int kSolidLightSkinDiffuseStrengthFieldNumber = 29;
  inline float solidlightskin_diffuse_strength() const;
  inline void set_solidlightskin_diffuse_strength(float value);

  // required float solidLightSkin_Specular_Strength = 30;
  inline bool has_solidlightskin_specular_strength() const;
  inline void clear_solidlightskin_specular_strength();
  static const int kSolidLightSkinSpecularStrengthFieldNumber = 30;
  inline float solidlightskin_specular_strength() const;
  inline void set_solidlightskin_specular_strength(float value);

  // required .KuplungApp.Vec3 Setting_LightPosition = 31;
  inline bool has_setting_lightposition() const;
  inline void clear_setting_lightposition();
  static const int kSettingLightPositionFieldNumber = 31;
  inline const ::KuplungApp::Vec3& setting_lightposition() const;
  inline ::KuplungApp::Vec3* mutable_setting_lightposition();
  inline ::KuplungApp::Vec3* release_setting_lightposition();
  inline void set_allocated_setting_lightposition(::KuplungApp::Vec3* setting_lightposition);

  // required .KuplungApp.Vec3 Setting_LightDirection = 32;
  inline bool has_setting_lightdirection() const;
  inline void clear_setting_lightdirection();
  static const int kSettingLightDirectionFieldNumber = 32;
  inline const ::KuplungApp::Vec3& setting_lightdirection() const;
  inline ::KuplungApp::Vec3* mutable_setting_lightdirection();
  inline ::KuplungApp::Vec3* release_setting_lightdirection();
  inline void set_allocated_setting_lightdirection(::KuplungApp::Vec3* setting_lightdirection);

  // required .KuplungApp.Vec3 Setting_LightAmbient = 33;
  inline bool has_setting_lightambient() const;
  inline void clear_setting_lightambient();
  static const int kSettingLightAmbientFieldNumber = 33;
  inline const ::KuplungApp::Vec3& setting_lightambient() const;
  inline ::KuplungApp::Vec3* mutable_setting_lightambient();
  inline ::KuplungApp::Vec3* release_setting_lightambient();
  inline void set_allocated_setting_lightambient(::KuplungApp::Vec3* setting_lightambient);

  // required .KuplungApp.Vec3 Setting_LightDiffuse = 34;
  inline bool has_setting_lightdiffuse() const;
  inline void clear_setting_lightdiffuse();
  static const int kSettingLightDiffuseFieldNumber = 34;
  inline const ::KuplungApp::Vec3& setting_lightdiffuse() const;
  inline ::KuplungApp::Vec3* mutable_setting_lightdiffuse();
  inline ::KuplungApp::Vec3* release_setting_lightdiffuse();
  inline void set_allocated_setting_lightdiffuse(::KuplungApp::Vec3* setting_lightdiffuse);

  // required .KuplungApp.Vec3 Setting_LightSpecular = 35;
  inline bool has_setting_lightspecular() const;
  inline void clear_setting_lightspecular();
  static const int kSettingLightSpecularFieldNumber = 35;
  inline const ::KuplungApp::Vec3& setting_lightspecular() const;
  inline ::KuplungApp::Vec3* mutable_setting_lightspecular();
  inline ::KuplungApp::Vec3* release_setting_lightspecular();
  inline void set_allocated_setting_lightspecular(::KuplungApp::Vec3* setting_lightspecular);

  // required float Setting_LightStrengthAmbient = 36;
  inline bool has_setting_lightstrengthambient() const;
  inline void clear_setting_lightstrengthambient();
  static const int kSettingLightStrengthAmbientFieldNumber = 36;
  inline float setting_lightstrengthambient() const;
  inline void set_setting_lightstrengthambient(float value);

  // required float Setting_LightStrengthDiffuse = 37;
  inline bool has_setting_lightstrengthdiffuse() const;
  inline void clear_setting_lightstrengthdiffuse();
  static const int kSettingLightStrengthDiffuseFieldNumber = 37;
  inline float setting_lightstrengthdiffuse() const;
  inline void set_setting_lightstrengthdiffuse(float value);

  // required float Setting_LightStrengthSpecular = 38;
  inline bool has_setting_lightstrengthspecular() const;
  inline void clear_setting_lightstrengthspecular();
  static const int kSettingLightStrengthSpecularFieldNumber = 38;
  inline float setting_lightstrengthspecular() const;
  inline void set_setting_lightstrengthspecular(float value);

  // required int32 materialIlluminationModel = 39;
  inline bool has_materialilluminationmodel() const;
  inline void clear_materialilluminationmodel();
  static const int kMaterialIlluminationModelFieldNumber = 39;
  inline ::google::protobuf::int32 materialilluminationmodel() const;
  inline void set_materialilluminationmodel(::google::protobuf::int32 value);

  // required .KuplungApp.ObjectCoordinate displacementHeightScale = 40;
  inline bool has_displacementheightscale() const;
  inline void clear_displacementheightscale();
  static const int kDisplacementHeightScaleFieldNumber = 40;
  inline const ::KuplungApp::ObjectCoordinate& displacementheightscale() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_displacementheightscale();
  inline ::KuplungApp::ObjectCoordinate* release_displacementheightscale();
  inline void set_allocated_displacementheightscale(::KuplungApp::ObjectCoordinate* displacementheightscale);

  // required bool showMaterialEditor = 41;
  inline bool has_showmaterialeditor() const;
  inline void clear_showmaterialeditor();
  static const int kShowMaterialEditorFieldNumber = 41;
  inline bool showmaterialeditor() const;
  inline void set_showmaterialeditor(bool value);

  // required .KuplungApp.MaterialColor materialAmbient = 42;
  inline bool has_materialambient() const;
  inline void clear_materialambient();
  static const int kMaterialAmbientFieldNumber = 42;
  inline const ::KuplungApp::MaterialColor& materialambient() const;
  inline ::KuplungApp::MaterialColor* mutable_materialambient();
  inline ::KuplungApp::MaterialColor* release_materialambient();
  inline void set_allocated_materialambient(::KuplungApp::MaterialColor* materialambient);

  // required .KuplungApp.MaterialColor materialDiffuse = 43;
  inline bool has_materialdiffuse() const;
  inline void clear_materialdiffuse();
  static const int kMaterialDiffuseFieldNumber = 43;
  inline const ::KuplungApp::MaterialColor& materialdiffuse() const;
  inline ::KuplungApp::MaterialColor* mutable_materialdiffuse();
  inline ::KuplungApp::MaterialColor* release_materialdiffuse();
  inline void set_allocated_materialdiffuse(::KuplungApp::MaterialColor* materialdiffuse);

  // required .KuplungApp.MaterialColor materialSpecular = 44;
  inline bool has_materialspecular() const;
  inline void clear_materialspecular();
  static const int kMaterialSpecularFieldNumber = 44;
  inline const ::KuplungApp::MaterialColor& materialspecular() const;
  inline ::KuplungApp::MaterialColor* mutable_materialspecular();
  inline ::KuplungApp::MaterialColor* release_materialspecular();
  inline void set_allocated_materialspecular(::KuplungApp::MaterialColor* materialspecular);

  // required .KuplungApp.MaterialColor materialEmission = 45;
  inline bool has_materialemission() const;
  inline void clear_materialemission();
  static const int kMaterialEmissionFieldNumber = 45;
  inline const ::KuplungApp::MaterialColor& materialemission() const;
  inline ::KuplungApp::MaterialColor* mutable_materialemission();
  inline ::KuplungApp::MaterialColor* release_materialemission();
  inline void set_allocated_materialemission(::KuplungApp::MaterialColor* materialemission);

  // required bool Setting_ParallaxMapping = 46;
  inline bool has_setting_parallaxmapping() const;
  inline void clear_setting_parallaxmapping();
  static const int kSettingParallaxMappingFieldNumber = 46;
  inline bool setting_parallaxmapping() const;
  inline void set_setting_parallaxmapping(bool value);

  // required int32 Effect_GBlur_Mode = 47;
  inline bool has_effect_gblur_mode() const;
  inline void clear_effect_gblur_mode();
  static const int kEffectGBlurModeFieldNumber = 47;
  inline ::google::protobuf::int32 effect_gblur_mode() const;
  inline void set_effect_gblur_mode(::google::protobuf::int32 value);

  // required .KuplungApp.ObjectCoordinate Effect_GBlur_Radius = 48;
  inline bool has_effect_gblur_radius() const;
  inline void clear_effect_gblur_radius();
  static const int kEffectGBlurRadiusFieldNumber = 48;
  inline const ::KuplungApp::ObjectCoordinate& effect_gblur_radius() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_effect_gblur_radius();
  inline ::KuplungApp::ObjectCoordinate* release_effect_gblur_radius();
  inline void set_allocated_effect_gblur_radius(::KuplungApp::ObjectCoordinate* effect_gblur_radius);

  // required .KuplungApp.ObjectCoordinate Effect_GBlur_Width = 49;
  inline bool has_effect_gblur_width() const;
  inline void clear_effect_gblur_width();
  static const int kEffectGBlurWidthFieldNumber = 49;
  inline const ::KuplungApp::ObjectCoordinate& effect_gblur_width() const;
  inline ::KuplungApp::ObjectCoordinate* mutable_effect_gblur_width();
  inline ::KuplungApp::ObjectCoordinate* release_effect_gblur_width();
  inline void set_allocated_effect_gblur_width(::KuplungApp::ObjectCoordinate* effect_gblur_width);

  // required bool Effect_Bloom_doBloom = 50;
  inline bool has_effect_bloom_dobloom() const;
  inline void clear_effect_bloom_dobloom();
  static const int kEffectBloomDoBloomFieldNumber = 50;
  inline bool effect_bloom_dobloom() const;
  inline void set_effect_bloom_dobloom(bool value);

  // required float Effect_Bloom_WeightA = 51;
  inline bool has_effect_bloom_weighta() const;
  inline void clear_effect_bloom_weighta();
  static const int kEffectBloomWeightAFieldNumber = 51;
  inline float effect_bloom_weighta() const;
  inline void set_effect_bloom_weighta(float value);

  // required float Effect_Bloom_WeightB = 52;
  inline bool has_effect_bloom_weightb() const;
  inline void clear_effect_bloom_weightb();
  static const int kEffectBloomWeightBFieldNumber = 52;
  inline float effect_bloom_weightb() const;
  inline void set_effect_bloom_weightb(float value);

  // required float Effect_Bloom_WeightC = 53;
  inline bool has_effect_bloom_weightc() const;
  inline void clear_effect_bloom_weightc();
  static const int kEffectBloomWeightCFieldNumber = 53;
  inline float effect_bloom_weightc() const;
  inline void set_effect_bloom_weightc(float value);

  // required float Effect_Bloom_WeightD = 54;
  inline bool has_effect_bloom_weightd() const;
  inline void clear_effect_bloom_weightd();
  static const int kEffectBloomWeightDFieldNumber = 54;
  inline float effect_bloom_weightd() const;
  inline void set_effect_bloom_weightd(float value);

  // required float Effect_Bloom_Vignette = 55;
  inline bool has_effect_bloom_vignette() const;
  inline void clear_effect_bloom_vignette();
  static const int kEffectBloomVignetteFieldNumber = 55;
  inline float effect_bloom_vignette() const;
  inline void set_effect_bloom_vignette(float value);

  // required float Effect_Bloom_VignetteAtt = 56;
  inline bool has_effect_bloom_vignetteatt() const;
  inline void clear_effect_bloom_vignetteatt();
  static const int kEffectBloomVignetteAttFieldNumber = 56;
  inline float effect_bloom_vignetteatt() const;
  inline void set_effect_bloom_vignetteatt(float value);

  // required int32 Setting_LightingPass_DrawMode = 57;
  inline bool has_setting_lightingpass_drawmode() const;
  inline void clear_setting_lightingpass_drawmode();
  static const int kSettingLightingPassDrawModeFieldNumber = 57;
  inline ::google::protobuf::int32 setting_lightingpass_drawmode() const;
  inline void set_setting_lightingpass_drawmode(::google::protobuf::int32 value);

  // required .KuplungApp.Mesh meshObject = 58;
  inline bool has_meshobject() const;
  inline void clear_meshobject();
  static const int kMeshObjectFieldNumber = 58;
  inline const ::KuplungApp::Mesh& meshobject() const;
  inline ::KuplungApp::Mesh* mutable_meshobject();
  inline ::KuplungApp::Mesh* release_meshobject();
  inline void set_allocated_meshobject(::KuplungApp::Mesh* meshobject);

  // @@protoc_insertion_point(class_scope:KuplungApp.MeshModel)
 private:
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_settings_deferredrender();
  inline void clear_has_settings_deferredrender();
  inline void set_has_setting_celshading();
  inline void clear_has_setting_celshading();
  inline void set_has_setting_wireframe();
  inline void clear_has_setting_wireframe();
  inline void set_has_setting_usetessellation();
  inline void clear_has_setting_usetessellation();
  inline void set_has_setting_usecullface();
  inline void clear_has_setting_usecullface();
  inline void set_has_setting_alpha();
  inline void clear_has_setting_alpha();
  inline void set_has_setting_tessellationsubdivision();
  inline void clear_has_setting_tessellationsubdivision();
  inline void set_has_positionx();
  inline void clear_has_positionx();
  inline void set_has_positiony();
  inline void clear_has_positiony();
  inline void set_has_positionz();
  inline void clear_has_positionz();
  inline void set_has_scalex();
  inline void clear_has_scalex();
  inline void set_has_scaley();
  inline void clear_has_scaley();
  inline void set_has_scalez();
  inline void clear_has_scalez();
  inline void set_has_rotatex();
  inline void clear_has_rotatex();
  inline void set_has_rotatey();
  inline void clear_has_rotatey();
  inline void set_has_rotatez();
  inline void clear_has_rotatez();
  inline void set_has_displacex();
  inline void clear_has_displacex();
  inline void set_has_displacey();
  inline void clear_has_displacey();
  inline void set_has_displacez();
  inline void clear_has_displacez();
  inline void set_has_setting_materialrefraction();
  inline void clear_has_setting_materialrefraction();
  inline void set_has_setting_materialspecularexp();
  inline void clear_has_setting_materialspecularexp();
  inline void set_has_setting_modelviewskin();
  inline void clear_has_setting_modelviewskin();
  inline void set_has_solidlightskin_materialcolor();
  inline void clear_has_solidlightskin_materialcolor();
  inline void set_has_solidlightskin_ambient();
  inline void clear_has_solidlightskin_ambient();
  inline void set_has_solidlightskin_diffuse();
  inline void clear_has_solidlightskin_diffuse();
  inline void set_has_solidlightskin_specular();
  inline void clear_has_solidlightskin_specular();
  inline void set_has_solidlightskin_ambient_strength();
  inline void clear_has_solidlightskin_ambient_strength();
  inline void set_has_solidlightskin_diffuse_strength();
  inline void clear_has_solidlightskin_diffuse_strength();
  inline void set_has_solidlightskin_specular_strength();
  inline void clear_has_solidlightskin_specular_strength();
  inline void set_has_setting_lightposition();
  inline void clear_has_setting_lightposition();
  inline void set_has_setting_lightdirection();
  inline void clear_has_setting_lightdirection();
  inline void set_has_setting_lightambient();
  inline void clear_has_setting_lightambient();
  inline void set_has_setting_lightdiffuse();
  inline void clear_has_setting_lightdiffuse();
  inline void set_has_setting_lightspecular();
  inline void clear_has_setting_lightspecular();
  inline void set_has_setting_lightstrengthambient();
  inline void clear_has_setting_lightstrengthambient();
  inline void set_has_setting_lightstrengthdiffuse();
  inline void clear_has_setting_lightstrengthdiffuse();
  inline void set_has_setting_lightstrengthspecular();
  inline void clear_has_setting_lightstrengthspecular();
  inline void set_has_materialilluminationmodel();
  inline void clear_has_materialilluminationmodel();
  inline void set_has_displacementheightscale();
  inline void clear_has_displacementheightscale();
  inline void set_has_showmaterialeditor();
  inline void clear_has_showmaterialeditor();
  inline void set_has_materialambient();
  inline void clear_has_materialambient();
  inline void set_has_materialdiffuse();
  inline void clear_has_materialdiffuse();
  inline void set_has_materialspecular();
  inline void clear_has_materialspecular();
  inline void set_has_materialemission();
  inline void clear_has_materialemission();
  inline void set_has_setting_parallaxmapping();
  inline void clear_has_setting_parallaxmapping();
  inline void set_has_effect_gblur_mode();
  inline void clear_has_effect_gblur_mode();
  inline void set_has_effect_gblur_radius();
  inline void clear_has_effect_gblur_radius();
  inline void set_has_effect_gblur_width();
  inline void clear_has_effect_gblur_width();
  inline void set_has_effect_bloom_dobloom();
  inline void clear_has_effect_bloom_dobloom();
  inline void set_has_effect_bloom_weighta();
  inline void clear_has_effect_bloom_weighta();
  inline void set_has_effect_bloom_weightb();
  inline void clear_has_effect_bloom_weightb();
  inline void set_has_effect_bloom_weightc();
  inline void clear_has_effect_bloom_weightc();
  inline void set_has_effect_bloom_weightd();
  inline void clear_has_effect_bloom_weightd();
  inline void set_has_effect_bloom_vignette();
  inline void clear_has_effect_bloom_vignette();
  inline void set_has_effect_bloom_vignetteatt();
  inline void clear_has_effect_bloom_vignetteatt();
  inline void set_has_setting_lightingpass_drawmode();
  inline void clear_has_setting_lightingpass_drawmode();
  inline void set_has_meshobject();
  inline void clear_has_meshobject();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int32 modelid_;
  bool settings_deferredrender_;
  bool setting_celshading_;
  bool setting_wireframe_;
  bool setting_usetessellation_;
  float setting_alpha_;
  ::google::protobuf::int32 setting_tessellationsubdivision_;
  ::KuplungApp::ObjectCoordinate* positionx_;
  ::KuplungApp::ObjectCoordinate* positiony_;
  ::KuplungApp::ObjectCoordinate* positionz_;
  ::KuplungApp::ObjectCoordinate* scalex_;
  ::KuplungApp::ObjectCoordinate* scaley_;
  ::KuplungApp::ObjectCoordinate* scalez_;
  ::KuplungApp::ObjectCoordinate* rotatex_;
  ::KuplungApp::ObjectCoordinate* rotatey_;
  ::KuplungApp::ObjectCoordinate* rotatez_;
  ::KuplungApp::ObjectCoordinate* displacex_;
  ::KuplungApp::ObjectCoordinate* displacey_;
  ::KuplungApp::ObjectCoordinate* displacez_;
  ::KuplungApp::ObjectCoordinate* setting_materialrefraction_;
  ::KuplungApp::ObjectCoordinate* setting_materialspecularexp_;
  ::KuplungApp::Vec3* solidlightskin_materialcolor_;
  ::KuplungApp::Vec3* solidlightskin_ambient_;
  ::google::protobuf::int32 setting_modelviewskin_;
  float solidlightskin_ambient_strength_;
  ::KuplungApp::Vec3* solidlightskin_diffuse_;
  ::KuplungApp::Vec3* solidlightskin_specular_;
  float solidlightskin_diffuse_strength_;
  float solidlightskin_specular_strength_;
  ::KuplungApp::Vec3* setting_lightposition_;
  ::KuplungApp::Vec3* setting_lightdirection_;
  ::KuplungApp::Vec3* setting_lightambient_;
  ::KuplungApp::Vec3* setting_lightdiffuse_;
  ::KuplungApp::Vec3* setting_lightspecular_;
  bool setting_usecullface_;
  bool showmaterialeditor_;
  bool setting_parallaxmapping_;
  bool effect_bloom_dobloom_;
  float setting_lightstrengthambient_;
  float setting_lightstrengthdiffuse_;
  float setting_lightstrengthspecular_;
  ::KuplungApp::ObjectCoordinate* displacementheightscale_;
  ::KuplungApp::MaterialColor* materialambient_;
  ::KuplungApp::MaterialColor* materialdiffuse_;
  ::google::protobuf::int32 materialilluminationmodel_;
  ::google::protobuf::int32 effect_gblur_mode_;
  ::KuplungApp::MaterialColor* materialspecular_;
  ::KuplungApp::MaterialColor* materialemission_;
  ::KuplungApp::ObjectCoordinate* effect_gblur_radius_;
  ::KuplungApp::ObjectCoordinate* effect_gblur_width_;
  float effect_bloom_weighta_;
  float effect_bloom_weightb_;
  float effect_bloom_weightc_;
  float effect_bloom_weightd_;
  float effect_bloom_vignette_;
  float effect_bloom_vignetteatt_;
  ::KuplungApp::Mesh* meshobject_;
  ::google::protobuf::int32 setting_lightingpass_drawmode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_KuplungAppScene_2eproto();
  friend void protobuf_AssignDesc_KuplungAppScene_2eproto();
  friend void protobuf_ShutdownFile_KuplungAppScene_2eproto();

  void InitAsDefaultInstance();
  static MeshModel* default_instance_;
};
// ===================================================================


// ===================================================================

// Scene

// repeated .KuplungApp.MeshModel models = 1;
inline int Scene::models_size() const {
  return models_.size();
}
inline void Scene::clear_models() {
  models_.Clear();
}
inline const ::KuplungApp::MeshModel& Scene::models(int index) const {
  // @@protoc_insertion_point(field_get:KuplungApp.Scene.models)
  return models_.Get(index);
}
inline ::KuplungApp::MeshModel* Scene::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:KuplungApp.Scene.models)
  return models_.Mutable(index);
}
inline ::KuplungApp::MeshModel* Scene::add_models() {
  // @@protoc_insertion_point(field_add:KuplungApp.Scene.models)
  return models_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KuplungApp::MeshModel >&
Scene::models() const {
  // @@protoc_insertion_point(field_list:KuplungApp.Scene.models)
  return models_;
}
inline ::google::protobuf::RepeatedPtrField< ::KuplungApp::MeshModel >*
Scene::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:KuplungApp.Scene.models)
  return &models_;
}

// -------------------------------------------------------------------

// MeshModel

// required int32 ModelID = 1;
inline bool MeshModel::has_modelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeshModel::set_has_modelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeshModel::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeshModel::clear_modelid() {
  modelid_ = 0;
  clear_has_modelid();
}
inline ::google::protobuf::int32 MeshModel::modelid() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.ModelID)
  return modelid_;
}
inline void MeshModel::set_modelid(::google::protobuf::int32 value) {
  set_has_modelid();
  modelid_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.ModelID)
}

// required bool Settings_DeferredRender = 2;
inline bool MeshModel::has_settings_deferredrender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeshModel::set_has_settings_deferredrender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeshModel::clear_has_settings_deferredrender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeshModel::clear_settings_deferredrender() {
  settings_deferredrender_ = false;
  clear_has_settings_deferredrender();
}
inline bool MeshModel::settings_deferredrender() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Settings_DeferredRender)
  return settings_deferredrender_;
}
inline void MeshModel::set_settings_deferredrender(bool value) {
  set_has_settings_deferredrender();
  settings_deferredrender_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Settings_DeferredRender)
}

// required bool Setting_CelShading = 3;
inline bool MeshModel::has_setting_celshading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeshModel::set_has_setting_celshading() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeshModel::clear_has_setting_celshading() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeshModel::clear_setting_celshading() {
  setting_celshading_ = false;
  clear_has_setting_celshading();
}
inline bool MeshModel::setting_celshading() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_CelShading)
  return setting_celshading_;
}
inline void MeshModel::set_setting_celshading(bool value) {
  set_has_setting_celshading();
  setting_celshading_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_CelShading)
}

// required bool Setting_Wireframe = 4;
inline bool MeshModel::has_setting_wireframe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeshModel::set_has_setting_wireframe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MeshModel::clear_has_setting_wireframe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MeshModel::clear_setting_wireframe() {
  setting_wireframe_ = false;
  clear_has_setting_wireframe();
}
inline bool MeshModel::setting_wireframe() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_Wireframe)
  return setting_wireframe_;
}
inline void MeshModel::set_setting_wireframe(bool value) {
  set_has_setting_wireframe();
  setting_wireframe_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_Wireframe)
}

// required bool Setting_UseTessellation = 5;
inline bool MeshModel::has_setting_usetessellation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MeshModel::set_has_setting_usetessellation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MeshModel::clear_has_setting_usetessellation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MeshModel::clear_setting_usetessellation() {
  setting_usetessellation_ = false;
  clear_has_setting_usetessellation();
}
inline bool MeshModel::setting_usetessellation() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_UseTessellation)
  return setting_usetessellation_;
}
inline void MeshModel::set_setting_usetessellation(bool value) {
  set_has_setting_usetessellation();
  setting_usetessellation_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_UseTessellation)
}

// required bool Setting_UseCullFace = 6;
inline bool MeshModel::has_setting_usecullface() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MeshModel::set_has_setting_usecullface() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MeshModel::clear_has_setting_usecullface() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MeshModel::clear_setting_usecullface() {
  setting_usecullface_ = false;
  clear_has_setting_usecullface();
}
inline bool MeshModel::setting_usecullface() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_UseCullFace)
  return setting_usecullface_;
}
inline void MeshModel::set_setting_usecullface(bool value) {
  set_has_setting_usecullface();
  setting_usecullface_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_UseCullFace)
}

// required float Setting_Alpha = 7;
inline bool MeshModel::has_setting_alpha() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MeshModel::set_has_setting_alpha() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MeshModel::clear_has_setting_alpha() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MeshModel::clear_setting_alpha() {
  setting_alpha_ = 0;
  clear_has_setting_alpha();
}
inline float MeshModel::setting_alpha() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_Alpha)
  return setting_alpha_;
}
inline void MeshModel::set_setting_alpha(float value) {
  set_has_setting_alpha();
  setting_alpha_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_Alpha)
}

// required int32 Setting_TessellationSubdivision = 8;
inline bool MeshModel::has_setting_tessellationsubdivision() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MeshModel::set_has_setting_tessellationsubdivision() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MeshModel::clear_has_setting_tessellationsubdivision() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MeshModel::clear_setting_tessellationsubdivision() {
  setting_tessellationsubdivision_ = 0;
  clear_has_setting_tessellationsubdivision();
}
inline ::google::protobuf::int32 MeshModel::setting_tessellationsubdivision() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_TessellationSubdivision)
  return setting_tessellationsubdivision_;
}
inline void MeshModel::set_setting_tessellationsubdivision(::google::protobuf::int32 value) {
  set_has_setting_tessellationsubdivision();
  setting_tessellationsubdivision_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_TessellationSubdivision)
}

// required .KuplungApp.ObjectCoordinate positionX = 9;
inline bool MeshModel::has_positionx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MeshModel::set_has_positionx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MeshModel::clear_has_positionx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MeshModel::clear_positionx() {
  if (positionx_ != NULL) positionx_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positionx();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::positionx() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.positionX)
  return positionx_ != NULL ? *positionx_ : *default_instance_->positionx_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_positionx() {
  set_has_positionx();
  if (positionx_ == NULL) positionx_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.positionX)
  return positionx_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_positionx() {
  clear_has_positionx();
  ::KuplungApp::ObjectCoordinate* temp = positionx_;
  positionx_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_positionx(::KuplungApp::ObjectCoordinate* positionx) {
  delete positionx_;
  positionx_ = positionx;
  if (positionx) {
    set_has_positionx();
  } else {
    clear_has_positionx();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.positionX)
}

// required .KuplungApp.ObjectCoordinate positionY = 10;
inline bool MeshModel::has_positiony() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MeshModel::set_has_positiony() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MeshModel::clear_has_positiony() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MeshModel::clear_positiony() {
  if (positiony_ != NULL) positiony_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positiony();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::positiony() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.positionY)
  return positiony_ != NULL ? *positiony_ : *default_instance_->positiony_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_positiony() {
  set_has_positiony();
  if (positiony_ == NULL) positiony_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.positionY)
  return positiony_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_positiony() {
  clear_has_positiony();
  ::KuplungApp::ObjectCoordinate* temp = positiony_;
  positiony_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_positiony(::KuplungApp::ObjectCoordinate* positiony) {
  delete positiony_;
  positiony_ = positiony;
  if (positiony) {
    set_has_positiony();
  } else {
    clear_has_positiony();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.positionY)
}

// required .KuplungApp.ObjectCoordinate positionZ = 11;
inline bool MeshModel::has_positionz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MeshModel::set_has_positionz() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MeshModel::clear_has_positionz() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MeshModel::clear_positionz() {
  if (positionz_ != NULL) positionz_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positionz();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::positionz() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.positionZ)
  return positionz_ != NULL ? *positionz_ : *default_instance_->positionz_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_positionz() {
  set_has_positionz();
  if (positionz_ == NULL) positionz_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.positionZ)
  return positionz_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_positionz() {
  clear_has_positionz();
  ::KuplungApp::ObjectCoordinate* temp = positionz_;
  positionz_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_positionz(::KuplungApp::ObjectCoordinate* positionz) {
  delete positionz_;
  positionz_ = positionz;
  if (positionz) {
    set_has_positionz();
  } else {
    clear_has_positionz();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.positionZ)
}

// required .KuplungApp.ObjectCoordinate scaleX = 12;
inline bool MeshModel::has_scalex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MeshModel::set_has_scalex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MeshModel::clear_has_scalex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MeshModel::clear_scalex() {
  if (scalex_ != NULL) scalex_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_scalex();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::scalex() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.scaleX)
  return scalex_ != NULL ? *scalex_ : *default_instance_->scalex_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_scalex() {
  set_has_scalex();
  if (scalex_ == NULL) scalex_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.scaleX)
  return scalex_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_scalex() {
  clear_has_scalex();
  ::KuplungApp::ObjectCoordinate* temp = scalex_;
  scalex_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_scalex(::KuplungApp::ObjectCoordinate* scalex) {
  delete scalex_;
  scalex_ = scalex;
  if (scalex) {
    set_has_scalex();
  } else {
    clear_has_scalex();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.scaleX)
}

// required .KuplungApp.ObjectCoordinate scaleY = 13;
inline bool MeshModel::has_scaley() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MeshModel::set_has_scaley() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MeshModel::clear_has_scaley() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MeshModel::clear_scaley() {
  if (scaley_ != NULL) scaley_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_scaley();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::scaley() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.scaleY)
  return scaley_ != NULL ? *scaley_ : *default_instance_->scaley_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_scaley() {
  set_has_scaley();
  if (scaley_ == NULL) scaley_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.scaleY)
  return scaley_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_scaley() {
  clear_has_scaley();
  ::KuplungApp::ObjectCoordinate* temp = scaley_;
  scaley_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_scaley(::KuplungApp::ObjectCoordinate* scaley) {
  delete scaley_;
  scaley_ = scaley;
  if (scaley) {
    set_has_scaley();
  } else {
    clear_has_scaley();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.scaleY)
}

// required .KuplungApp.ObjectCoordinate scaleZ = 14;
inline bool MeshModel::has_scalez() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MeshModel::set_has_scalez() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MeshModel::clear_has_scalez() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MeshModel::clear_scalez() {
  if (scalez_ != NULL) scalez_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_scalez();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::scalez() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.scaleZ)
  return scalez_ != NULL ? *scalez_ : *default_instance_->scalez_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_scalez() {
  set_has_scalez();
  if (scalez_ == NULL) scalez_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.scaleZ)
  return scalez_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_scalez() {
  clear_has_scalez();
  ::KuplungApp::ObjectCoordinate* temp = scalez_;
  scalez_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_scalez(::KuplungApp::ObjectCoordinate* scalez) {
  delete scalez_;
  scalez_ = scalez;
  if (scalez) {
    set_has_scalez();
  } else {
    clear_has_scalez();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.scaleZ)
}

// required .KuplungApp.ObjectCoordinate rotateX = 15;
inline bool MeshModel::has_rotatex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MeshModel::set_has_rotatex() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MeshModel::clear_has_rotatex() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MeshModel::clear_rotatex() {
  if (rotatex_ != NULL) rotatex_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatex();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::rotatex() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.rotateX)
  return rotatex_ != NULL ? *rotatex_ : *default_instance_->rotatex_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_rotatex() {
  set_has_rotatex();
  if (rotatex_ == NULL) rotatex_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.rotateX)
  return rotatex_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_rotatex() {
  clear_has_rotatex();
  ::KuplungApp::ObjectCoordinate* temp = rotatex_;
  rotatex_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_rotatex(::KuplungApp::ObjectCoordinate* rotatex) {
  delete rotatex_;
  rotatex_ = rotatex;
  if (rotatex) {
    set_has_rotatex();
  } else {
    clear_has_rotatex();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.rotateX)
}

// required .KuplungApp.ObjectCoordinate rotateY = 16;
inline bool MeshModel::has_rotatey() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MeshModel::set_has_rotatey() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MeshModel::clear_has_rotatey() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MeshModel::clear_rotatey() {
  if (rotatey_ != NULL) rotatey_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatey();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::rotatey() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.rotateY)
  return rotatey_ != NULL ? *rotatey_ : *default_instance_->rotatey_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_rotatey() {
  set_has_rotatey();
  if (rotatey_ == NULL) rotatey_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.rotateY)
  return rotatey_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_rotatey() {
  clear_has_rotatey();
  ::KuplungApp::ObjectCoordinate* temp = rotatey_;
  rotatey_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_rotatey(::KuplungApp::ObjectCoordinate* rotatey) {
  delete rotatey_;
  rotatey_ = rotatey;
  if (rotatey) {
    set_has_rotatey();
  } else {
    clear_has_rotatey();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.rotateY)
}

// required .KuplungApp.ObjectCoordinate rotateZ = 17;
inline bool MeshModel::has_rotatez() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MeshModel::set_has_rotatez() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MeshModel::clear_has_rotatez() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MeshModel::clear_rotatez() {
  if (rotatez_ != NULL) rotatez_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatez();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::rotatez() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.rotateZ)
  return rotatez_ != NULL ? *rotatez_ : *default_instance_->rotatez_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_rotatez() {
  set_has_rotatez();
  if (rotatez_ == NULL) rotatez_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.rotateZ)
  return rotatez_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_rotatez() {
  clear_has_rotatez();
  ::KuplungApp::ObjectCoordinate* temp = rotatez_;
  rotatez_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_rotatez(::KuplungApp::ObjectCoordinate* rotatez) {
  delete rotatez_;
  rotatez_ = rotatez;
  if (rotatez) {
    set_has_rotatez();
  } else {
    clear_has_rotatez();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.rotateZ)
}

// required .KuplungApp.ObjectCoordinate displaceX = 18;
inline bool MeshModel::has_displacex() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MeshModel::set_has_displacex() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MeshModel::clear_has_displacex() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MeshModel::clear_displacex() {
  if (displacex_ != NULL) displacex_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_displacex();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::displacex() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.displaceX)
  return displacex_ != NULL ? *displacex_ : *default_instance_->displacex_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_displacex() {
  set_has_displacex();
  if (displacex_ == NULL) displacex_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.displaceX)
  return displacex_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_displacex() {
  clear_has_displacex();
  ::KuplungApp::ObjectCoordinate* temp = displacex_;
  displacex_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_displacex(::KuplungApp::ObjectCoordinate* displacex) {
  delete displacex_;
  displacex_ = displacex;
  if (displacex) {
    set_has_displacex();
  } else {
    clear_has_displacex();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.displaceX)
}

// required .KuplungApp.ObjectCoordinate displaceY = 19;
inline bool MeshModel::has_displacey() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MeshModel::set_has_displacey() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MeshModel::clear_has_displacey() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MeshModel::clear_displacey() {
  if (displacey_ != NULL) displacey_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_displacey();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::displacey() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.displaceY)
  return displacey_ != NULL ? *displacey_ : *default_instance_->displacey_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_displacey() {
  set_has_displacey();
  if (displacey_ == NULL) displacey_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.displaceY)
  return displacey_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_displacey() {
  clear_has_displacey();
  ::KuplungApp::ObjectCoordinate* temp = displacey_;
  displacey_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_displacey(::KuplungApp::ObjectCoordinate* displacey) {
  delete displacey_;
  displacey_ = displacey;
  if (displacey) {
    set_has_displacey();
  } else {
    clear_has_displacey();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.displaceY)
}

// required .KuplungApp.ObjectCoordinate displaceZ = 20;
inline bool MeshModel::has_displacez() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MeshModel::set_has_displacez() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MeshModel::clear_has_displacez() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MeshModel::clear_displacez() {
  if (displacez_ != NULL) displacez_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_displacez();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::displacez() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.displaceZ)
  return displacez_ != NULL ? *displacez_ : *default_instance_->displacez_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_displacez() {
  set_has_displacez();
  if (displacez_ == NULL) displacez_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.displaceZ)
  return displacez_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_displacez() {
  clear_has_displacez();
  ::KuplungApp::ObjectCoordinate* temp = displacez_;
  displacez_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_displacez(::KuplungApp::ObjectCoordinate* displacez) {
  delete displacez_;
  displacez_ = displacez;
  if (displacez) {
    set_has_displacez();
  } else {
    clear_has_displacez();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.displaceZ)
}

// required .KuplungApp.ObjectCoordinate Setting_MaterialRefraction = 21;
inline bool MeshModel::has_setting_materialrefraction() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MeshModel::set_has_setting_materialrefraction() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MeshModel::clear_has_setting_materialrefraction() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MeshModel::clear_setting_materialrefraction() {
  if (setting_materialrefraction_ != NULL) setting_materialrefraction_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_setting_materialrefraction();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::setting_materialrefraction() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_MaterialRefraction)
  return setting_materialrefraction_ != NULL ? *setting_materialrefraction_ : *default_instance_->setting_materialrefraction_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_setting_materialrefraction() {
  set_has_setting_materialrefraction();
  if (setting_materialrefraction_ == NULL) setting_materialrefraction_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.Setting_MaterialRefraction)
  return setting_materialrefraction_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_setting_materialrefraction() {
  clear_has_setting_materialrefraction();
  ::KuplungApp::ObjectCoordinate* temp = setting_materialrefraction_;
  setting_materialrefraction_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_setting_materialrefraction(::KuplungApp::ObjectCoordinate* setting_materialrefraction) {
  delete setting_materialrefraction_;
  setting_materialrefraction_ = setting_materialrefraction;
  if (setting_materialrefraction) {
    set_has_setting_materialrefraction();
  } else {
    clear_has_setting_materialrefraction();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.Setting_MaterialRefraction)
}

// required .KuplungApp.ObjectCoordinate Setting_MaterialSpecularExp = 22;
inline bool MeshModel::has_setting_materialspecularexp() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MeshModel::set_has_setting_materialspecularexp() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MeshModel::clear_has_setting_materialspecularexp() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MeshModel::clear_setting_materialspecularexp() {
  if (setting_materialspecularexp_ != NULL) setting_materialspecularexp_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_setting_materialspecularexp();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::setting_materialspecularexp() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_MaterialSpecularExp)
  return setting_materialspecularexp_ != NULL ? *setting_materialspecularexp_ : *default_instance_->setting_materialspecularexp_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_setting_materialspecularexp() {
  set_has_setting_materialspecularexp();
  if (setting_materialspecularexp_ == NULL) setting_materialspecularexp_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.Setting_MaterialSpecularExp)
  return setting_materialspecularexp_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_setting_materialspecularexp() {
  clear_has_setting_materialspecularexp();
  ::KuplungApp::ObjectCoordinate* temp = setting_materialspecularexp_;
  setting_materialspecularexp_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_setting_materialspecularexp(::KuplungApp::ObjectCoordinate* setting_materialspecularexp) {
  delete setting_materialspecularexp_;
  setting_materialspecularexp_ = setting_materialspecularexp;
  if (setting_materialspecularexp) {
    set_has_setting_materialspecularexp();
  } else {
    clear_has_setting_materialspecularexp();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.Setting_MaterialSpecularExp)
}

// required int32 Setting_ModelViewSkin = 23;
inline bool MeshModel::has_setting_modelviewskin() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MeshModel::set_has_setting_modelviewskin() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MeshModel::clear_has_setting_modelviewskin() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MeshModel::clear_setting_modelviewskin() {
  setting_modelviewskin_ = 0;
  clear_has_setting_modelviewskin();
}
inline ::google::protobuf::int32 MeshModel::setting_modelviewskin() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_ModelViewSkin)
  return setting_modelviewskin_;
}
inline void MeshModel::set_setting_modelviewskin(::google::protobuf::int32 value) {
  set_has_setting_modelviewskin();
  setting_modelviewskin_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_ModelViewSkin)
}

// required .KuplungApp.Vec3 solidLightSkin_MaterialColor = 24;
inline bool MeshModel::has_solidlightskin_materialcolor() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MeshModel::set_has_solidlightskin_materialcolor() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MeshModel::clear_has_solidlightskin_materialcolor() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MeshModel::clear_solidlightskin_materialcolor() {
  if (solidlightskin_materialcolor_ != NULL) solidlightskin_materialcolor_->::KuplungApp::Vec3::Clear();
  clear_has_solidlightskin_materialcolor();
}
inline const ::KuplungApp::Vec3& MeshModel::solidlightskin_materialcolor() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.solidLightSkin_MaterialColor)
  return solidlightskin_materialcolor_ != NULL ? *solidlightskin_materialcolor_ : *default_instance_->solidlightskin_materialcolor_;
}
inline ::KuplungApp::Vec3* MeshModel::mutable_solidlightskin_materialcolor() {
  set_has_solidlightskin_materialcolor();
  if (solidlightskin_materialcolor_ == NULL) solidlightskin_materialcolor_ = new ::KuplungApp::Vec3;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.solidLightSkin_MaterialColor)
  return solidlightskin_materialcolor_;
}
inline ::KuplungApp::Vec3* MeshModel::release_solidlightskin_materialcolor() {
  clear_has_solidlightskin_materialcolor();
  ::KuplungApp::Vec3* temp = solidlightskin_materialcolor_;
  solidlightskin_materialcolor_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_solidlightskin_materialcolor(::KuplungApp::Vec3* solidlightskin_materialcolor) {
  delete solidlightskin_materialcolor_;
  solidlightskin_materialcolor_ = solidlightskin_materialcolor;
  if (solidlightskin_materialcolor) {
    set_has_solidlightskin_materialcolor();
  } else {
    clear_has_solidlightskin_materialcolor();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.solidLightSkin_MaterialColor)
}

// required .KuplungApp.Vec3 solidLightSkin_Ambient = 25;
inline bool MeshModel::has_solidlightskin_ambient() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MeshModel::set_has_solidlightskin_ambient() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MeshModel::clear_has_solidlightskin_ambient() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MeshModel::clear_solidlightskin_ambient() {
  if (solidlightskin_ambient_ != NULL) solidlightskin_ambient_->::KuplungApp::Vec3::Clear();
  clear_has_solidlightskin_ambient();
}
inline const ::KuplungApp::Vec3& MeshModel::solidlightskin_ambient() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.solidLightSkin_Ambient)
  return solidlightskin_ambient_ != NULL ? *solidlightskin_ambient_ : *default_instance_->solidlightskin_ambient_;
}
inline ::KuplungApp::Vec3* MeshModel::mutable_solidlightskin_ambient() {
  set_has_solidlightskin_ambient();
  if (solidlightskin_ambient_ == NULL) solidlightskin_ambient_ = new ::KuplungApp::Vec3;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.solidLightSkin_Ambient)
  return solidlightskin_ambient_;
}
inline ::KuplungApp::Vec3* MeshModel::release_solidlightskin_ambient() {
  clear_has_solidlightskin_ambient();
  ::KuplungApp::Vec3* temp = solidlightskin_ambient_;
  solidlightskin_ambient_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_solidlightskin_ambient(::KuplungApp::Vec3* solidlightskin_ambient) {
  delete solidlightskin_ambient_;
  solidlightskin_ambient_ = solidlightskin_ambient;
  if (solidlightskin_ambient) {
    set_has_solidlightskin_ambient();
  } else {
    clear_has_solidlightskin_ambient();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.solidLightSkin_Ambient)
}

// required .KuplungApp.Vec3 solidLightSkin_Diffuse = 26;
inline bool MeshModel::has_solidlightskin_diffuse() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MeshModel::set_has_solidlightskin_diffuse() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MeshModel::clear_has_solidlightskin_diffuse() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MeshModel::clear_solidlightskin_diffuse() {
  if (solidlightskin_diffuse_ != NULL) solidlightskin_diffuse_->::KuplungApp::Vec3::Clear();
  clear_has_solidlightskin_diffuse();
}
inline const ::KuplungApp::Vec3& MeshModel::solidlightskin_diffuse() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.solidLightSkin_Diffuse)
  return solidlightskin_diffuse_ != NULL ? *solidlightskin_diffuse_ : *default_instance_->solidlightskin_diffuse_;
}
inline ::KuplungApp::Vec3* MeshModel::mutable_solidlightskin_diffuse() {
  set_has_solidlightskin_diffuse();
  if (solidlightskin_diffuse_ == NULL) solidlightskin_diffuse_ = new ::KuplungApp::Vec3;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.solidLightSkin_Diffuse)
  return solidlightskin_diffuse_;
}
inline ::KuplungApp::Vec3* MeshModel::release_solidlightskin_diffuse() {
  clear_has_solidlightskin_diffuse();
  ::KuplungApp::Vec3* temp = solidlightskin_diffuse_;
  solidlightskin_diffuse_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_solidlightskin_diffuse(::KuplungApp::Vec3* solidlightskin_diffuse) {
  delete solidlightskin_diffuse_;
  solidlightskin_diffuse_ = solidlightskin_diffuse;
  if (solidlightskin_diffuse) {
    set_has_solidlightskin_diffuse();
  } else {
    clear_has_solidlightskin_diffuse();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.solidLightSkin_Diffuse)
}

// required .KuplungApp.Vec3 solidLightSkin_Specular = 27;
inline bool MeshModel::has_solidlightskin_specular() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MeshModel::set_has_solidlightskin_specular() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MeshModel::clear_has_solidlightskin_specular() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MeshModel::clear_solidlightskin_specular() {
  if (solidlightskin_specular_ != NULL) solidlightskin_specular_->::KuplungApp::Vec3::Clear();
  clear_has_solidlightskin_specular();
}
inline const ::KuplungApp::Vec3& MeshModel::solidlightskin_specular() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.solidLightSkin_Specular)
  return solidlightskin_specular_ != NULL ? *solidlightskin_specular_ : *default_instance_->solidlightskin_specular_;
}
inline ::KuplungApp::Vec3* MeshModel::mutable_solidlightskin_specular() {
  set_has_solidlightskin_specular();
  if (solidlightskin_specular_ == NULL) solidlightskin_specular_ = new ::KuplungApp::Vec3;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.solidLightSkin_Specular)
  return solidlightskin_specular_;
}
inline ::KuplungApp::Vec3* MeshModel::release_solidlightskin_specular() {
  clear_has_solidlightskin_specular();
  ::KuplungApp::Vec3* temp = solidlightskin_specular_;
  solidlightskin_specular_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_solidlightskin_specular(::KuplungApp::Vec3* solidlightskin_specular) {
  delete solidlightskin_specular_;
  solidlightskin_specular_ = solidlightskin_specular;
  if (solidlightskin_specular) {
    set_has_solidlightskin_specular();
  } else {
    clear_has_solidlightskin_specular();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.solidLightSkin_Specular)
}

// required float solidLightSkin_Ambient_Strength = 28;
inline bool MeshModel::has_solidlightskin_ambient_strength() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void MeshModel::set_has_solidlightskin_ambient_strength() {
  _has_bits_[0] |= 0x08000000u;
}
inline void MeshModel::clear_has_solidlightskin_ambient_strength() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void MeshModel::clear_solidlightskin_ambient_strength() {
  solidlightskin_ambient_strength_ = 0;
  clear_has_solidlightskin_ambient_strength();
}
inline float MeshModel::solidlightskin_ambient_strength() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.solidLightSkin_Ambient_Strength)
  return solidlightskin_ambient_strength_;
}
inline void MeshModel::set_solidlightskin_ambient_strength(float value) {
  set_has_solidlightskin_ambient_strength();
  solidlightskin_ambient_strength_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.solidLightSkin_Ambient_Strength)
}

// required float solidLightSkin_Diffuse_Strength = 29;
inline bool MeshModel::has_solidlightskin_diffuse_strength() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void MeshModel::set_has_solidlightskin_diffuse_strength() {
  _has_bits_[0] |= 0x10000000u;
}
inline void MeshModel::clear_has_solidlightskin_diffuse_strength() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void MeshModel::clear_solidlightskin_diffuse_strength() {
  solidlightskin_diffuse_strength_ = 0;
  clear_has_solidlightskin_diffuse_strength();
}
inline float MeshModel::solidlightskin_diffuse_strength() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.solidLightSkin_Diffuse_Strength)
  return solidlightskin_diffuse_strength_;
}
inline void MeshModel::set_solidlightskin_diffuse_strength(float value) {
  set_has_solidlightskin_diffuse_strength();
  solidlightskin_diffuse_strength_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.solidLightSkin_Diffuse_Strength)
}

// required float solidLightSkin_Specular_Strength = 30;
inline bool MeshModel::has_solidlightskin_specular_strength() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void MeshModel::set_has_solidlightskin_specular_strength() {
  _has_bits_[0] |= 0x20000000u;
}
inline void MeshModel::clear_has_solidlightskin_specular_strength() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void MeshModel::clear_solidlightskin_specular_strength() {
  solidlightskin_specular_strength_ = 0;
  clear_has_solidlightskin_specular_strength();
}
inline float MeshModel::solidlightskin_specular_strength() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.solidLightSkin_Specular_Strength)
  return solidlightskin_specular_strength_;
}
inline void MeshModel::set_solidlightskin_specular_strength(float value) {
  set_has_solidlightskin_specular_strength();
  solidlightskin_specular_strength_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.solidLightSkin_Specular_Strength)
}

// required .KuplungApp.Vec3 Setting_LightPosition = 31;
inline bool MeshModel::has_setting_lightposition() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void MeshModel::set_has_setting_lightposition() {
  _has_bits_[0] |= 0x40000000u;
}
inline void MeshModel::clear_has_setting_lightposition() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void MeshModel::clear_setting_lightposition() {
  if (setting_lightposition_ != NULL) setting_lightposition_->::KuplungApp::Vec3::Clear();
  clear_has_setting_lightposition();
}
inline const ::KuplungApp::Vec3& MeshModel::setting_lightposition() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_LightPosition)
  return setting_lightposition_ != NULL ? *setting_lightposition_ : *default_instance_->setting_lightposition_;
}
inline ::KuplungApp::Vec3* MeshModel::mutable_setting_lightposition() {
  set_has_setting_lightposition();
  if (setting_lightposition_ == NULL) setting_lightposition_ = new ::KuplungApp::Vec3;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.Setting_LightPosition)
  return setting_lightposition_;
}
inline ::KuplungApp::Vec3* MeshModel::release_setting_lightposition() {
  clear_has_setting_lightposition();
  ::KuplungApp::Vec3* temp = setting_lightposition_;
  setting_lightposition_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_setting_lightposition(::KuplungApp::Vec3* setting_lightposition) {
  delete setting_lightposition_;
  setting_lightposition_ = setting_lightposition;
  if (setting_lightposition) {
    set_has_setting_lightposition();
  } else {
    clear_has_setting_lightposition();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.Setting_LightPosition)
}

// required .KuplungApp.Vec3 Setting_LightDirection = 32;
inline bool MeshModel::has_setting_lightdirection() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void MeshModel::set_has_setting_lightdirection() {
  _has_bits_[0] |= 0x80000000u;
}
inline void MeshModel::clear_has_setting_lightdirection() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void MeshModel::clear_setting_lightdirection() {
  if (setting_lightdirection_ != NULL) setting_lightdirection_->::KuplungApp::Vec3::Clear();
  clear_has_setting_lightdirection();
}
inline const ::KuplungApp::Vec3& MeshModel::setting_lightdirection() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_LightDirection)
  return setting_lightdirection_ != NULL ? *setting_lightdirection_ : *default_instance_->setting_lightdirection_;
}
inline ::KuplungApp::Vec3* MeshModel::mutable_setting_lightdirection() {
  set_has_setting_lightdirection();
  if (setting_lightdirection_ == NULL) setting_lightdirection_ = new ::KuplungApp::Vec3;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.Setting_LightDirection)
  return setting_lightdirection_;
}
inline ::KuplungApp::Vec3* MeshModel::release_setting_lightdirection() {
  clear_has_setting_lightdirection();
  ::KuplungApp::Vec3* temp = setting_lightdirection_;
  setting_lightdirection_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_setting_lightdirection(::KuplungApp::Vec3* setting_lightdirection) {
  delete setting_lightdirection_;
  setting_lightdirection_ = setting_lightdirection;
  if (setting_lightdirection) {
    set_has_setting_lightdirection();
  } else {
    clear_has_setting_lightdirection();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.Setting_LightDirection)
}

// required .KuplungApp.Vec3 Setting_LightAmbient = 33;
inline bool MeshModel::has_setting_lightambient() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void MeshModel::set_has_setting_lightambient() {
  _has_bits_[1] |= 0x00000001u;
}
inline void MeshModel::clear_has_setting_lightambient() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void MeshModel::clear_setting_lightambient() {
  if (setting_lightambient_ != NULL) setting_lightambient_->::KuplungApp::Vec3::Clear();
  clear_has_setting_lightambient();
}
inline const ::KuplungApp::Vec3& MeshModel::setting_lightambient() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_LightAmbient)
  return setting_lightambient_ != NULL ? *setting_lightambient_ : *default_instance_->setting_lightambient_;
}
inline ::KuplungApp::Vec3* MeshModel::mutable_setting_lightambient() {
  set_has_setting_lightambient();
  if (setting_lightambient_ == NULL) setting_lightambient_ = new ::KuplungApp::Vec3;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.Setting_LightAmbient)
  return setting_lightambient_;
}
inline ::KuplungApp::Vec3* MeshModel::release_setting_lightambient() {
  clear_has_setting_lightambient();
  ::KuplungApp::Vec3* temp = setting_lightambient_;
  setting_lightambient_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_setting_lightambient(::KuplungApp::Vec3* setting_lightambient) {
  delete setting_lightambient_;
  setting_lightambient_ = setting_lightambient;
  if (setting_lightambient) {
    set_has_setting_lightambient();
  } else {
    clear_has_setting_lightambient();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.Setting_LightAmbient)
}

// required .KuplungApp.Vec3 Setting_LightDiffuse = 34;
inline bool MeshModel::has_setting_lightdiffuse() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void MeshModel::set_has_setting_lightdiffuse() {
  _has_bits_[1] |= 0x00000002u;
}
inline void MeshModel::clear_has_setting_lightdiffuse() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void MeshModel::clear_setting_lightdiffuse() {
  if (setting_lightdiffuse_ != NULL) setting_lightdiffuse_->::KuplungApp::Vec3::Clear();
  clear_has_setting_lightdiffuse();
}
inline const ::KuplungApp::Vec3& MeshModel::setting_lightdiffuse() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_LightDiffuse)
  return setting_lightdiffuse_ != NULL ? *setting_lightdiffuse_ : *default_instance_->setting_lightdiffuse_;
}
inline ::KuplungApp::Vec3* MeshModel::mutable_setting_lightdiffuse() {
  set_has_setting_lightdiffuse();
  if (setting_lightdiffuse_ == NULL) setting_lightdiffuse_ = new ::KuplungApp::Vec3;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.Setting_LightDiffuse)
  return setting_lightdiffuse_;
}
inline ::KuplungApp::Vec3* MeshModel::release_setting_lightdiffuse() {
  clear_has_setting_lightdiffuse();
  ::KuplungApp::Vec3* temp = setting_lightdiffuse_;
  setting_lightdiffuse_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_setting_lightdiffuse(::KuplungApp::Vec3* setting_lightdiffuse) {
  delete setting_lightdiffuse_;
  setting_lightdiffuse_ = setting_lightdiffuse;
  if (setting_lightdiffuse) {
    set_has_setting_lightdiffuse();
  } else {
    clear_has_setting_lightdiffuse();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.Setting_LightDiffuse)
}

// required .KuplungApp.Vec3 Setting_LightSpecular = 35;
inline bool MeshModel::has_setting_lightspecular() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void MeshModel::set_has_setting_lightspecular() {
  _has_bits_[1] |= 0x00000004u;
}
inline void MeshModel::clear_has_setting_lightspecular() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void MeshModel::clear_setting_lightspecular() {
  if (setting_lightspecular_ != NULL) setting_lightspecular_->::KuplungApp::Vec3::Clear();
  clear_has_setting_lightspecular();
}
inline const ::KuplungApp::Vec3& MeshModel::setting_lightspecular() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_LightSpecular)
  return setting_lightspecular_ != NULL ? *setting_lightspecular_ : *default_instance_->setting_lightspecular_;
}
inline ::KuplungApp::Vec3* MeshModel::mutable_setting_lightspecular() {
  set_has_setting_lightspecular();
  if (setting_lightspecular_ == NULL) setting_lightspecular_ = new ::KuplungApp::Vec3;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.Setting_LightSpecular)
  return setting_lightspecular_;
}
inline ::KuplungApp::Vec3* MeshModel::release_setting_lightspecular() {
  clear_has_setting_lightspecular();
  ::KuplungApp::Vec3* temp = setting_lightspecular_;
  setting_lightspecular_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_setting_lightspecular(::KuplungApp::Vec3* setting_lightspecular) {
  delete setting_lightspecular_;
  setting_lightspecular_ = setting_lightspecular;
  if (setting_lightspecular) {
    set_has_setting_lightspecular();
  } else {
    clear_has_setting_lightspecular();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.Setting_LightSpecular)
}

// required float Setting_LightStrengthAmbient = 36;
inline bool MeshModel::has_setting_lightstrengthambient() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void MeshModel::set_has_setting_lightstrengthambient() {
  _has_bits_[1] |= 0x00000008u;
}
inline void MeshModel::clear_has_setting_lightstrengthambient() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void MeshModel::clear_setting_lightstrengthambient() {
  setting_lightstrengthambient_ = 0;
  clear_has_setting_lightstrengthambient();
}
inline float MeshModel::setting_lightstrengthambient() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_LightStrengthAmbient)
  return setting_lightstrengthambient_;
}
inline void MeshModel::set_setting_lightstrengthambient(float value) {
  set_has_setting_lightstrengthambient();
  setting_lightstrengthambient_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_LightStrengthAmbient)
}

// required float Setting_LightStrengthDiffuse = 37;
inline bool MeshModel::has_setting_lightstrengthdiffuse() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void MeshModel::set_has_setting_lightstrengthdiffuse() {
  _has_bits_[1] |= 0x00000010u;
}
inline void MeshModel::clear_has_setting_lightstrengthdiffuse() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void MeshModel::clear_setting_lightstrengthdiffuse() {
  setting_lightstrengthdiffuse_ = 0;
  clear_has_setting_lightstrengthdiffuse();
}
inline float MeshModel::setting_lightstrengthdiffuse() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_LightStrengthDiffuse)
  return setting_lightstrengthdiffuse_;
}
inline void MeshModel::set_setting_lightstrengthdiffuse(float value) {
  set_has_setting_lightstrengthdiffuse();
  setting_lightstrengthdiffuse_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_LightStrengthDiffuse)
}

// required float Setting_LightStrengthSpecular = 38;
inline bool MeshModel::has_setting_lightstrengthspecular() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void MeshModel::set_has_setting_lightstrengthspecular() {
  _has_bits_[1] |= 0x00000020u;
}
inline void MeshModel::clear_has_setting_lightstrengthspecular() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void MeshModel::clear_setting_lightstrengthspecular() {
  setting_lightstrengthspecular_ = 0;
  clear_has_setting_lightstrengthspecular();
}
inline float MeshModel::setting_lightstrengthspecular() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_LightStrengthSpecular)
  return setting_lightstrengthspecular_;
}
inline void MeshModel::set_setting_lightstrengthspecular(float value) {
  set_has_setting_lightstrengthspecular();
  setting_lightstrengthspecular_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_LightStrengthSpecular)
}

// required int32 materialIlluminationModel = 39;
inline bool MeshModel::has_materialilluminationmodel() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void MeshModel::set_has_materialilluminationmodel() {
  _has_bits_[1] |= 0x00000040u;
}
inline void MeshModel::clear_has_materialilluminationmodel() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void MeshModel::clear_materialilluminationmodel() {
  materialilluminationmodel_ = 0;
  clear_has_materialilluminationmodel();
}
inline ::google::protobuf::int32 MeshModel::materialilluminationmodel() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.materialIlluminationModel)
  return materialilluminationmodel_;
}
inline void MeshModel::set_materialilluminationmodel(::google::protobuf::int32 value) {
  set_has_materialilluminationmodel();
  materialilluminationmodel_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.materialIlluminationModel)
}

// required .KuplungApp.ObjectCoordinate displacementHeightScale = 40;
inline bool MeshModel::has_displacementheightscale() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void MeshModel::set_has_displacementheightscale() {
  _has_bits_[1] |= 0x00000080u;
}
inline void MeshModel::clear_has_displacementheightscale() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void MeshModel::clear_displacementheightscale() {
  if (displacementheightscale_ != NULL) displacementheightscale_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_displacementheightscale();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::displacementheightscale() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.displacementHeightScale)
  return displacementheightscale_ != NULL ? *displacementheightscale_ : *default_instance_->displacementheightscale_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_displacementheightscale() {
  set_has_displacementheightscale();
  if (displacementheightscale_ == NULL) displacementheightscale_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.displacementHeightScale)
  return displacementheightscale_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_displacementheightscale() {
  clear_has_displacementheightscale();
  ::KuplungApp::ObjectCoordinate* temp = displacementheightscale_;
  displacementheightscale_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_displacementheightscale(::KuplungApp::ObjectCoordinate* displacementheightscale) {
  delete displacementheightscale_;
  displacementheightscale_ = displacementheightscale;
  if (displacementheightscale) {
    set_has_displacementheightscale();
  } else {
    clear_has_displacementheightscale();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.displacementHeightScale)
}

// required bool showMaterialEditor = 41;
inline bool MeshModel::has_showmaterialeditor() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void MeshModel::set_has_showmaterialeditor() {
  _has_bits_[1] |= 0x00000100u;
}
inline void MeshModel::clear_has_showmaterialeditor() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void MeshModel::clear_showmaterialeditor() {
  showmaterialeditor_ = false;
  clear_has_showmaterialeditor();
}
inline bool MeshModel::showmaterialeditor() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.showMaterialEditor)
  return showmaterialeditor_;
}
inline void MeshModel::set_showmaterialeditor(bool value) {
  set_has_showmaterialeditor();
  showmaterialeditor_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.showMaterialEditor)
}

// required .KuplungApp.MaterialColor materialAmbient = 42;
inline bool MeshModel::has_materialambient() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void MeshModel::set_has_materialambient() {
  _has_bits_[1] |= 0x00000200u;
}
inline void MeshModel::clear_has_materialambient() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void MeshModel::clear_materialambient() {
  if (materialambient_ != NULL) materialambient_->::KuplungApp::MaterialColor::Clear();
  clear_has_materialambient();
}
inline const ::KuplungApp::MaterialColor& MeshModel::materialambient() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.materialAmbient)
  return materialambient_ != NULL ? *materialambient_ : *default_instance_->materialambient_;
}
inline ::KuplungApp::MaterialColor* MeshModel::mutable_materialambient() {
  set_has_materialambient();
  if (materialambient_ == NULL) materialambient_ = new ::KuplungApp::MaterialColor;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.materialAmbient)
  return materialambient_;
}
inline ::KuplungApp::MaterialColor* MeshModel::release_materialambient() {
  clear_has_materialambient();
  ::KuplungApp::MaterialColor* temp = materialambient_;
  materialambient_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_materialambient(::KuplungApp::MaterialColor* materialambient) {
  delete materialambient_;
  materialambient_ = materialambient;
  if (materialambient) {
    set_has_materialambient();
  } else {
    clear_has_materialambient();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.materialAmbient)
}

// required .KuplungApp.MaterialColor materialDiffuse = 43;
inline bool MeshModel::has_materialdiffuse() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void MeshModel::set_has_materialdiffuse() {
  _has_bits_[1] |= 0x00000400u;
}
inline void MeshModel::clear_has_materialdiffuse() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void MeshModel::clear_materialdiffuse() {
  if (materialdiffuse_ != NULL) materialdiffuse_->::KuplungApp::MaterialColor::Clear();
  clear_has_materialdiffuse();
}
inline const ::KuplungApp::MaterialColor& MeshModel::materialdiffuse() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.materialDiffuse)
  return materialdiffuse_ != NULL ? *materialdiffuse_ : *default_instance_->materialdiffuse_;
}
inline ::KuplungApp::MaterialColor* MeshModel::mutable_materialdiffuse() {
  set_has_materialdiffuse();
  if (materialdiffuse_ == NULL) materialdiffuse_ = new ::KuplungApp::MaterialColor;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.materialDiffuse)
  return materialdiffuse_;
}
inline ::KuplungApp::MaterialColor* MeshModel::release_materialdiffuse() {
  clear_has_materialdiffuse();
  ::KuplungApp::MaterialColor* temp = materialdiffuse_;
  materialdiffuse_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_materialdiffuse(::KuplungApp::MaterialColor* materialdiffuse) {
  delete materialdiffuse_;
  materialdiffuse_ = materialdiffuse;
  if (materialdiffuse) {
    set_has_materialdiffuse();
  } else {
    clear_has_materialdiffuse();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.materialDiffuse)
}

// required .KuplungApp.MaterialColor materialSpecular = 44;
inline bool MeshModel::has_materialspecular() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void MeshModel::set_has_materialspecular() {
  _has_bits_[1] |= 0x00000800u;
}
inline void MeshModel::clear_has_materialspecular() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void MeshModel::clear_materialspecular() {
  if (materialspecular_ != NULL) materialspecular_->::KuplungApp::MaterialColor::Clear();
  clear_has_materialspecular();
}
inline const ::KuplungApp::MaterialColor& MeshModel::materialspecular() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.materialSpecular)
  return materialspecular_ != NULL ? *materialspecular_ : *default_instance_->materialspecular_;
}
inline ::KuplungApp::MaterialColor* MeshModel::mutable_materialspecular() {
  set_has_materialspecular();
  if (materialspecular_ == NULL) materialspecular_ = new ::KuplungApp::MaterialColor;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.materialSpecular)
  return materialspecular_;
}
inline ::KuplungApp::MaterialColor* MeshModel::release_materialspecular() {
  clear_has_materialspecular();
  ::KuplungApp::MaterialColor* temp = materialspecular_;
  materialspecular_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_materialspecular(::KuplungApp::MaterialColor* materialspecular) {
  delete materialspecular_;
  materialspecular_ = materialspecular;
  if (materialspecular) {
    set_has_materialspecular();
  } else {
    clear_has_materialspecular();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.materialSpecular)
}

// required .KuplungApp.MaterialColor materialEmission = 45;
inline bool MeshModel::has_materialemission() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void MeshModel::set_has_materialemission() {
  _has_bits_[1] |= 0x00001000u;
}
inline void MeshModel::clear_has_materialemission() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void MeshModel::clear_materialemission() {
  if (materialemission_ != NULL) materialemission_->::KuplungApp::MaterialColor::Clear();
  clear_has_materialemission();
}
inline const ::KuplungApp::MaterialColor& MeshModel::materialemission() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.materialEmission)
  return materialemission_ != NULL ? *materialemission_ : *default_instance_->materialemission_;
}
inline ::KuplungApp::MaterialColor* MeshModel::mutable_materialemission() {
  set_has_materialemission();
  if (materialemission_ == NULL) materialemission_ = new ::KuplungApp::MaterialColor;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.materialEmission)
  return materialemission_;
}
inline ::KuplungApp::MaterialColor* MeshModel::release_materialemission() {
  clear_has_materialemission();
  ::KuplungApp::MaterialColor* temp = materialemission_;
  materialemission_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_materialemission(::KuplungApp::MaterialColor* materialemission) {
  delete materialemission_;
  materialemission_ = materialemission;
  if (materialemission) {
    set_has_materialemission();
  } else {
    clear_has_materialemission();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.materialEmission)
}

// required bool Setting_ParallaxMapping = 46;
inline bool MeshModel::has_setting_parallaxmapping() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void MeshModel::set_has_setting_parallaxmapping() {
  _has_bits_[1] |= 0x00002000u;
}
inline void MeshModel::clear_has_setting_parallaxmapping() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void MeshModel::clear_setting_parallaxmapping() {
  setting_parallaxmapping_ = false;
  clear_has_setting_parallaxmapping();
}
inline bool MeshModel::setting_parallaxmapping() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_ParallaxMapping)
  return setting_parallaxmapping_;
}
inline void MeshModel::set_setting_parallaxmapping(bool value) {
  set_has_setting_parallaxmapping();
  setting_parallaxmapping_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_ParallaxMapping)
}

// required int32 Effect_GBlur_Mode = 47;
inline bool MeshModel::has_effect_gblur_mode() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void MeshModel::set_has_effect_gblur_mode() {
  _has_bits_[1] |= 0x00004000u;
}
inline void MeshModel::clear_has_effect_gblur_mode() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void MeshModel::clear_effect_gblur_mode() {
  effect_gblur_mode_ = 0;
  clear_has_effect_gblur_mode();
}
inline ::google::protobuf::int32 MeshModel::effect_gblur_mode() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Effect_GBlur_Mode)
  return effect_gblur_mode_;
}
inline void MeshModel::set_effect_gblur_mode(::google::protobuf::int32 value) {
  set_has_effect_gblur_mode();
  effect_gblur_mode_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Effect_GBlur_Mode)
}

// required .KuplungApp.ObjectCoordinate Effect_GBlur_Radius = 48;
inline bool MeshModel::has_effect_gblur_radius() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void MeshModel::set_has_effect_gblur_radius() {
  _has_bits_[1] |= 0x00008000u;
}
inline void MeshModel::clear_has_effect_gblur_radius() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void MeshModel::clear_effect_gblur_radius() {
  if (effect_gblur_radius_ != NULL) effect_gblur_radius_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_effect_gblur_radius();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::effect_gblur_radius() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Effect_GBlur_Radius)
  return effect_gblur_radius_ != NULL ? *effect_gblur_radius_ : *default_instance_->effect_gblur_radius_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_effect_gblur_radius() {
  set_has_effect_gblur_radius();
  if (effect_gblur_radius_ == NULL) effect_gblur_radius_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.Effect_GBlur_Radius)
  return effect_gblur_radius_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_effect_gblur_radius() {
  clear_has_effect_gblur_radius();
  ::KuplungApp::ObjectCoordinate* temp = effect_gblur_radius_;
  effect_gblur_radius_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_effect_gblur_radius(::KuplungApp::ObjectCoordinate* effect_gblur_radius) {
  delete effect_gblur_radius_;
  effect_gblur_radius_ = effect_gblur_radius;
  if (effect_gblur_radius) {
    set_has_effect_gblur_radius();
  } else {
    clear_has_effect_gblur_radius();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.Effect_GBlur_Radius)
}

// required .KuplungApp.ObjectCoordinate Effect_GBlur_Width = 49;
inline bool MeshModel::has_effect_gblur_width() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void MeshModel::set_has_effect_gblur_width() {
  _has_bits_[1] |= 0x00010000u;
}
inline void MeshModel::clear_has_effect_gblur_width() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void MeshModel::clear_effect_gblur_width() {
  if (effect_gblur_width_ != NULL) effect_gblur_width_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_effect_gblur_width();
}
inline const ::KuplungApp::ObjectCoordinate& MeshModel::effect_gblur_width() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Effect_GBlur_Width)
  return effect_gblur_width_ != NULL ? *effect_gblur_width_ : *default_instance_->effect_gblur_width_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::mutable_effect_gblur_width() {
  set_has_effect_gblur_width();
  if (effect_gblur_width_ == NULL) effect_gblur_width_ = new ::KuplungApp::ObjectCoordinate;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.Effect_GBlur_Width)
  return effect_gblur_width_;
}
inline ::KuplungApp::ObjectCoordinate* MeshModel::release_effect_gblur_width() {
  clear_has_effect_gblur_width();
  ::KuplungApp::ObjectCoordinate* temp = effect_gblur_width_;
  effect_gblur_width_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_effect_gblur_width(::KuplungApp::ObjectCoordinate* effect_gblur_width) {
  delete effect_gblur_width_;
  effect_gblur_width_ = effect_gblur_width;
  if (effect_gblur_width) {
    set_has_effect_gblur_width();
  } else {
    clear_has_effect_gblur_width();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.Effect_GBlur_Width)
}

// required bool Effect_Bloom_doBloom = 50;
inline bool MeshModel::has_effect_bloom_dobloom() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void MeshModel::set_has_effect_bloom_dobloom() {
  _has_bits_[1] |= 0x00020000u;
}
inline void MeshModel::clear_has_effect_bloom_dobloom() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void MeshModel::clear_effect_bloom_dobloom() {
  effect_bloom_dobloom_ = false;
  clear_has_effect_bloom_dobloom();
}
inline bool MeshModel::effect_bloom_dobloom() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Effect_Bloom_doBloom)
  return effect_bloom_dobloom_;
}
inline void MeshModel::set_effect_bloom_dobloom(bool value) {
  set_has_effect_bloom_dobloom();
  effect_bloom_dobloom_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Effect_Bloom_doBloom)
}

// required float Effect_Bloom_WeightA = 51;
inline bool MeshModel::has_effect_bloom_weighta() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void MeshModel::set_has_effect_bloom_weighta() {
  _has_bits_[1] |= 0x00040000u;
}
inline void MeshModel::clear_has_effect_bloom_weighta() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void MeshModel::clear_effect_bloom_weighta() {
  effect_bloom_weighta_ = 0;
  clear_has_effect_bloom_weighta();
}
inline float MeshModel::effect_bloom_weighta() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Effect_Bloom_WeightA)
  return effect_bloom_weighta_;
}
inline void MeshModel::set_effect_bloom_weighta(float value) {
  set_has_effect_bloom_weighta();
  effect_bloom_weighta_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Effect_Bloom_WeightA)
}

// required float Effect_Bloom_WeightB = 52;
inline bool MeshModel::has_effect_bloom_weightb() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void MeshModel::set_has_effect_bloom_weightb() {
  _has_bits_[1] |= 0x00080000u;
}
inline void MeshModel::clear_has_effect_bloom_weightb() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void MeshModel::clear_effect_bloom_weightb() {
  effect_bloom_weightb_ = 0;
  clear_has_effect_bloom_weightb();
}
inline float MeshModel::effect_bloom_weightb() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Effect_Bloom_WeightB)
  return effect_bloom_weightb_;
}
inline void MeshModel::set_effect_bloom_weightb(float value) {
  set_has_effect_bloom_weightb();
  effect_bloom_weightb_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Effect_Bloom_WeightB)
}

// required float Effect_Bloom_WeightC = 53;
inline bool MeshModel::has_effect_bloom_weightc() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void MeshModel::set_has_effect_bloom_weightc() {
  _has_bits_[1] |= 0x00100000u;
}
inline void MeshModel::clear_has_effect_bloom_weightc() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void MeshModel::clear_effect_bloom_weightc() {
  effect_bloom_weightc_ = 0;
  clear_has_effect_bloom_weightc();
}
inline float MeshModel::effect_bloom_weightc() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Effect_Bloom_WeightC)
  return effect_bloom_weightc_;
}
inline void MeshModel::set_effect_bloom_weightc(float value) {
  set_has_effect_bloom_weightc();
  effect_bloom_weightc_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Effect_Bloom_WeightC)
}

// required float Effect_Bloom_WeightD = 54;
inline bool MeshModel::has_effect_bloom_weightd() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void MeshModel::set_has_effect_bloom_weightd() {
  _has_bits_[1] |= 0x00200000u;
}
inline void MeshModel::clear_has_effect_bloom_weightd() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void MeshModel::clear_effect_bloom_weightd() {
  effect_bloom_weightd_ = 0;
  clear_has_effect_bloom_weightd();
}
inline float MeshModel::effect_bloom_weightd() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Effect_Bloom_WeightD)
  return effect_bloom_weightd_;
}
inline void MeshModel::set_effect_bloom_weightd(float value) {
  set_has_effect_bloom_weightd();
  effect_bloom_weightd_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Effect_Bloom_WeightD)
}

// required float Effect_Bloom_Vignette = 55;
inline bool MeshModel::has_effect_bloom_vignette() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void MeshModel::set_has_effect_bloom_vignette() {
  _has_bits_[1] |= 0x00400000u;
}
inline void MeshModel::clear_has_effect_bloom_vignette() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void MeshModel::clear_effect_bloom_vignette() {
  effect_bloom_vignette_ = 0;
  clear_has_effect_bloom_vignette();
}
inline float MeshModel::effect_bloom_vignette() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Effect_Bloom_Vignette)
  return effect_bloom_vignette_;
}
inline void MeshModel::set_effect_bloom_vignette(float value) {
  set_has_effect_bloom_vignette();
  effect_bloom_vignette_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Effect_Bloom_Vignette)
}

// required float Effect_Bloom_VignetteAtt = 56;
inline bool MeshModel::has_effect_bloom_vignetteatt() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void MeshModel::set_has_effect_bloom_vignetteatt() {
  _has_bits_[1] |= 0x00800000u;
}
inline void MeshModel::clear_has_effect_bloom_vignetteatt() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void MeshModel::clear_effect_bloom_vignetteatt() {
  effect_bloom_vignetteatt_ = 0;
  clear_has_effect_bloom_vignetteatt();
}
inline float MeshModel::effect_bloom_vignetteatt() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Effect_Bloom_VignetteAtt)
  return effect_bloom_vignetteatt_;
}
inline void MeshModel::set_effect_bloom_vignetteatt(float value) {
  set_has_effect_bloom_vignetteatt();
  effect_bloom_vignetteatt_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Effect_Bloom_VignetteAtt)
}

// required int32 Setting_LightingPass_DrawMode = 57;
inline bool MeshModel::has_setting_lightingpass_drawmode() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void MeshModel::set_has_setting_lightingpass_drawmode() {
  _has_bits_[1] |= 0x01000000u;
}
inline void MeshModel::clear_has_setting_lightingpass_drawmode() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void MeshModel::clear_setting_lightingpass_drawmode() {
  setting_lightingpass_drawmode_ = 0;
  clear_has_setting_lightingpass_drawmode();
}
inline ::google::protobuf::int32 MeshModel::setting_lightingpass_drawmode() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.Setting_LightingPass_DrawMode)
  return setting_lightingpass_drawmode_;
}
inline void MeshModel::set_setting_lightingpass_drawmode(::google::protobuf::int32 value) {
  set_has_setting_lightingpass_drawmode();
  setting_lightingpass_drawmode_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModel.Setting_LightingPass_DrawMode)
}

// required .KuplungApp.Mesh meshObject = 58;
inline bool MeshModel::has_meshobject() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void MeshModel::set_has_meshobject() {
  _has_bits_[1] |= 0x02000000u;
}
inline void MeshModel::clear_has_meshobject() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void MeshModel::clear_meshobject() {
  if (meshobject_ != NULL) meshobject_->::KuplungApp::Mesh::Clear();
  clear_has_meshobject();
}
inline const ::KuplungApp::Mesh& MeshModel::meshobject() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModel.meshObject)
  return meshobject_ != NULL ? *meshobject_ : *default_instance_->meshobject_;
}
inline ::KuplungApp::Mesh* MeshModel::mutable_meshobject() {
  set_has_meshobject();
  if (meshobject_ == NULL) meshobject_ = new ::KuplungApp::Mesh;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModel.meshObject)
  return meshobject_;
}
inline ::KuplungApp::Mesh* MeshModel::release_meshobject() {
  clear_has_meshobject();
  ::KuplungApp::Mesh* temp = meshobject_;
  meshobject_ = NULL;
  return temp;
}
inline void MeshModel::set_allocated_meshobject(::KuplungApp::Mesh* meshobject) {
  delete meshobject_;
  meshobject_ = meshobject;
  if (meshobject) {
    set_has_meshobject();
  } else {
    clear_has_meshobject();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModel.meshObject)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KuplungApp

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KuplungAppScene_2eproto__INCLUDED
