// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungAppSettings.proto

#ifndef PROTOBUF_KuplungAppSettings_2eproto__INCLUDED
#define PROTOBUF_KuplungAppSettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "KuplungDefinitions.pb.h"
// @@protoc_insertion_point(includes)
namespace KuplungApp {
class CameraSettings;
class CameraSettingsDefaultTypeInternal;
extern CameraSettingsDefaultTypeInternal _CameraSettings_default_instance_;
class FBEntity;
class FBEntityDefaultTypeInternal;
extern FBEntityDefaultTypeInternal _FBEntity_default_instance_;
class GUISettings;
class GUISettingsDefaultTypeInternal;
extern GUISettingsDefaultTypeInternal _GUISettings_default_instance_;
class GridSettings;
class GridSettingsDefaultTypeInternal;
extern GridSettingsDefaultTypeInternal _GridSettings_default_instance_;
class LightObject;
class LightObjectDefaultTypeInternal;
extern LightObjectDefaultTypeInternal _LightObject_default_instance_;
class MaterialColor;
class MaterialColorDefaultTypeInternal;
extern MaterialColorDefaultTypeInternal _MaterialColor_default_instance_;
class Mesh;
class MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
class MeshMaterialTextureImage;
class MeshMaterialTextureImageDefaultTypeInternal;
extern MeshMaterialTextureImageDefaultTypeInternal _MeshMaterialTextureImage_default_instance_;
class MeshModelMaterial;
class MeshModelMaterialDefaultTypeInternal;
extern MeshModelMaterialDefaultTypeInternal _MeshModelMaterial_default_instance_;
class ObjectCoordinate;
class ObjectCoordinateDefaultTypeInternal;
extern ObjectCoordinateDefaultTypeInternal _ObjectCoordinate_default_instance_;
class Vec2;
class Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
class Vec4;
class Vec4DefaultTypeInternal;
extern Vec4DefaultTypeInternal _Vec4_default_instance_;
}  // namespace KuplungApp

namespace KuplungApp {

namespace protobuf_KuplungAppSettings_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_KuplungAppSettings_2eproto

// ===================================================================

class GUISettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KuplungApp.GUISettings) */ {
 public:
  GUISettings();
  virtual ~GUISettings();

  GUISettings(const GUISettings& from);

  inline GUISettings& operator=(const GUISettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GUISettings& default_instance();

  static inline const GUISettings* internal_default_instance() {
    return reinterpret_cast<const GUISettings*>(
               &_GUISettings_default_instance_);
  }

  void Swap(GUISettings* other);

  // implements Message ----------------------------------------------

  inline GUISettings* New() const PROTOBUF_FINAL { return New(NULL); }

  GUISettings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GUISettings& from);
  void MergeFrom(const GUISettings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GUISettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KuplungApp.LightObject lights = 44;
  int lights_size() const;
  void clear_lights();
  static const int kLightsFieldNumber = 44;
  const ::KuplungApp::LightObject& lights(int index) const;
  ::KuplungApp::LightObject* mutable_lights(int index);
  ::KuplungApp::LightObject* add_lights();
  ::google::protobuf::RepeatedPtrField< ::KuplungApp::LightObject >*
      mutable_lights();
  const ::google::protobuf::RepeatedPtrField< ::KuplungApp::LightObject >&
      lights() const;

  // required string heightmapImage = 37;
  bool has_heightmapimage() const;
  void clear_heightmapimage();
  static const int kHeightmapImageFieldNumber = 37;
  const ::std::string& heightmapimage() const;
  void set_heightmapimage(const ::std::string& value);
  #if LANG_CXX11
  void set_heightmapimage(::std::string&& value);
  #endif
  void set_heightmapimage(const char* value);
  void set_heightmapimage(const char* value, size_t size);
  ::std::string* mutable_heightmapimage();
  ::std::string* release_heightmapimage();
  void set_allocated_heightmapimage(::std::string* heightmapimage);

  // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
  bool has_setting_outlinecolor() const;
  void clear_setting_outlinecolor();
  static const int kSettingOutlineColorFieldNumber = 9;
  const ::KuplungApp::Vec4& setting_outlinecolor() const;
  ::KuplungApp::Vec4* mutable_setting_outlinecolor();
  ::KuplungApp::Vec4* release_setting_outlinecolor();
  void set_allocated_setting_outlinecolor(::KuplungApp::Vec4* setting_outlinecolor);

  // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
  bool has_setting_uiambientlight() const;
  void clear_setting_uiambientlight();
  static const int kSettingUIAmbientLightFieldNumber = 10;
  const ::KuplungApp::Vec3& setting_uiambientlight() const;
  ::KuplungApp::Vec3* mutable_setting_uiambientlight();
  ::KuplungApp::Vec3* release_setting_uiambientlight();
  void set_allocated_setting_uiambientlight(::KuplungApp::Vec3* setting_uiambientlight);

  // required .KuplungApp.Vec3 SolidLight_Direction = 21;
  bool has_solidlight_direction() const;
  void clear_solidlight_direction();
  static const int kSolidLightDirectionFieldNumber = 21;
  const ::KuplungApp::Vec3& solidlight_direction() const;
  ::KuplungApp::Vec3* mutable_solidlight_direction();
  ::KuplungApp::Vec3* release_solidlight_direction();
  void set_allocated_solidlight_direction(::KuplungApp::Vec3* solidlight_direction);

  // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
  bool has_solidlight_materialcolor() const;
  void clear_solidlight_materialcolor();
  static const int kSolidLightMaterialColorFieldNumber = 22;
  const ::KuplungApp::Vec3& solidlight_materialcolor() const;
  ::KuplungApp::Vec3* mutable_solidlight_materialcolor();
  ::KuplungApp::Vec3* release_solidlight_materialcolor();
  void set_allocated_solidlight_materialcolor(::KuplungApp::Vec3* solidlight_materialcolor);

  // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
  bool has_solidlight_ambient() const;
  void clear_solidlight_ambient();
  static const int kSolidLightAmbientFieldNumber = 23;
  const ::KuplungApp::Vec3& solidlight_ambient() const;
  ::KuplungApp::Vec3* mutable_solidlight_ambient();
  ::KuplungApp::Vec3* release_solidlight_ambient();
  void set_allocated_solidlight_ambient(::KuplungApp::Vec3* solidlight_ambient);

  // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
  bool has_solidlight_diffuse() const;
  void clear_solidlight_diffuse();
  static const int kSolidLightDiffuseFieldNumber = 24;
  const ::KuplungApp::Vec3& solidlight_diffuse() const;
  ::KuplungApp::Vec3* mutable_solidlight_diffuse();
  ::KuplungApp::Vec3* release_solidlight_diffuse();
  void set_allocated_solidlight_diffuse(::KuplungApp::Vec3* solidlight_diffuse);

  // required .KuplungApp.Vec3 SolidLight_Specular = 25;
  bool has_solidlight_specular() const;
  void clear_solidlight_specular();
  static const int kSolidLightSpecularFieldNumber = 25;
  const ::KuplungApp::Vec3& solidlight_specular() const;
  ::KuplungApp::Vec3* mutable_solidlight_specular();
  ::KuplungApp::Vec3* release_solidlight_specular();
  void set_allocated_solidlight_specular(::KuplungApp::Vec3* solidlight_specular);

  // required .KuplungApp.CameraSettings camera = 42;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 42;
  const ::KuplungApp::CameraSettings& camera() const;
  ::KuplungApp::CameraSettings* mutable_camera();
  ::KuplungApp::CameraSettings* release_camera();
  void set_allocated_camera(::KuplungApp::CameraSettings* camera);

  // required .KuplungApp.GridSettings grid = 43;
  bool has_grid() const;
  void clear_grid();
  static const int kGridFieldNumber = 43;
  const ::KuplungApp::GridSettings& grid() const;
  ::KuplungApp::GridSettings* mutable_grid();
  ::KuplungApp::GridSettings* release_grid();
  void set_allocated_grid(::KuplungApp::GridSettings* grid);

  // required float Setting_FOV = 1;
  bool has_setting_fov() const;
  void clear_setting_fov();
  static const int kSettingFOVFieldNumber = 1;
  float setting_fov() const;
  void set_setting_fov(float value);

  // required float Setting_OutlineThickness = 2;
  bool has_setting_outlinethickness() const;
  void clear_setting_outlinethickness();
  static const int kSettingOutlineThicknessFieldNumber = 2;
  float setting_outlinethickness() const;
  void set_setting_outlinethickness(float value);

  // required float Setting_RatioWidth = 3;
  bool has_setting_ratiowidth() const;
  void clear_setting_ratiowidth();
  static const int kSettingRatioWidthFieldNumber = 3;
  float setting_ratiowidth() const;
  void set_setting_ratiowidth(float value);

  // required float Setting_RatioHeight = 4;
  bool has_setting_ratioheight() const;
  void clear_setting_ratioheight();
  static const int kSettingRatioHeightFieldNumber = 4;
  float setting_ratioheight() const;
  void set_setting_ratioheight(float value);

  // required float Setting_PlaneClose = 5;
  bool has_setting_planeclose() const;
  void clear_setting_planeclose();
  static const int kSettingPlaneCloseFieldNumber = 5;
  float setting_planeclose() const;
  void set_setting_planeclose(float value);

  // required float Setting_PlaneFar = 6;
  bool has_setting_planefar() const;
  void clear_setting_planefar();
  static const int kSettingPlaneFarFieldNumber = 6;
  float setting_planefar() const;
  void set_setting_planefar(float value);

  // required int32 Setting_GridSize = 7;
  bool has_setting_gridsize() const;
  void clear_setting_gridsize();
  static const int kSettingGridSizeFieldNumber = 7;
  ::google::protobuf::int32 setting_gridsize() const;
  void set_setting_gridsize(::google::protobuf::int32 value);

  // required int32 Setting_Skybox = 8;
  bool has_setting_skybox() const;
  void clear_setting_skybox();
  static const int kSettingSkyboxFieldNumber = 8;
  ::google::protobuf::int32 setting_skybox() const;
  void set_setting_skybox(::google::protobuf::int32 value);

  // required bool Setting_FixedGridWorld = 11;
  bool has_setting_fixedgridworld() const;
  void clear_setting_fixedgridworld();
  static const int kSettingFixedGridWorldFieldNumber = 11;
  bool setting_fixedgridworld() const;
  void set_setting_fixedgridworld(bool value);

  // required bool Setting_OutlineColorPickerOpen = 12;
  bool has_setting_outlinecolorpickeropen() const;
  void clear_setting_outlinecolorpickeropen();
  static const int kSettingOutlineColorPickerOpenFieldNumber = 12;
  bool setting_outlinecolorpickeropen() const;
  void set_setting_outlinecolorpickeropen(bool value);

  // required bool Setting_ShowAxisHelpers = 13;
  bool has_setting_showaxishelpers() const;
  void clear_setting_showaxishelpers();
  static const int kSettingShowAxisHelpersFieldNumber = 13;
  bool setting_showaxishelpers() const;
  void set_setting_showaxishelpers(bool value);

  // required bool Settings_ShowZAxis = 14;
  bool has_settings_showzaxis() const;
  void clear_settings_showzaxis();
  static const int kSettingsShowZAxisFieldNumber = 14;
  bool settings_showzaxis() const;
  void set_settings_showzaxis(bool value);

  // required int32 Setting_LightingPass_DrawMode = 17;
  bool has_setting_lightingpass_drawmode() const;
  void clear_setting_lightingpass_drawmode();
  static const int kSettingLightingPassDrawModeFieldNumber = 17;
  ::google::protobuf::int32 setting_lightingpass_drawmode() const;
  void set_setting_lightingpass_drawmode(::google::protobuf::int32 value);

  // required int32 Setting_DeferredTestLightsNumber = 18;
  bool has_setting_deferredtestlightsnumber() const;
  void clear_setting_deferredtestlightsnumber();
  static const int kSettingDeferredTestLightsNumberFieldNumber = 18;
  ::google::protobuf::int32 setting_deferredtestlightsnumber() const;
  void set_setting_deferredtestlightsnumber(::google::protobuf::int32 value);

  // required float Setting_DeferredAmbientStrength = 19;
  bool has_setting_deferredambientstrength() const;
  void clear_setting_deferredambientstrength();
  static const int kSettingDeferredAmbientStrengthFieldNumber = 19;
  float setting_deferredambientstrength() const;
  void set_setting_deferredambientstrength(float value);

  // required int32 viewModelSkin = 20;
  bool has_viewmodelskin() const;
  void clear_viewmodelskin();
  static const int kViewModelSkinFieldNumber = 20;
  ::google::protobuf::int32 viewmodelskin() const;
  void set_viewmodelskin(::google::protobuf::int32 value);

  // required bool Setting_DeferredTestMode = 15;
  bool has_setting_deferredtestmode() const;
  void clear_setting_deferredtestmode();
  static const int kSettingDeferredTestModeFieldNumber = 15;
  bool setting_deferredtestmode() const;
  void set_setting_deferredtestmode(bool value);

  // required bool Setting_DeferredTestLights = 16;
  bool has_setting_deferredtestlights() const;
  void clear_setting_deferredtestlights();
  static const int kSettingDeferredTestLightsFieldNumber = 16;
  bool setting_deferredtestlights() const;
  void set_setting_deferredtestlights(bool value);

  // required bool SolidLight_MaterialColor_ColorPicker = 29;
  bool has_solidlight_materialcolor_colorpicker() const;
  void clear_solidlight_materialcolor_colorpicker();
  static const int kSolidLightMaterialColorColorPickerFieldNumber = 29;
  bool solidlight_materialcolor_colorpicker() const;
  void set_solidlight_materialcolor_colorpicker(bool value);

  // required bool SolidLight_Ambient_ColorPicker = 30;
  bool has_solidlight_ambient_colorpicker() const;
  void clear_solidlight_ambient_colorpicker();
  static const int kSolidLightAmbientColorPickerFieldNumber = 30;
  bool solidlight_ambient_colorpicker() const;
  void set_solidlight_ambient_colorpicker(bool value);

  // required float SolidLight_Ambient_Strength = 26;
  bool has_solidlight_ambient_strength() const;
  void clear_solidlight_ambient_strength();
  static const int kSolidLightAmbientStrengthFieldNumber = 26;
  float solidlight_ambient_strength() const;
  void set_solidlight_ambient_strength(float value);

  // required float SolidLight_Diffuse_Strength = 27;
  bool has_solidlight_diffuse_strength() const;
  void clear_solidlight_diffuse_strength();
  static const int kSolidLightDiffuseStrengthFieldNumber = 27;
  float solidlight_diffuse_strength() const;
  void set_solidlight_diffuse_strength(float value);

  // required float SolidLight_Specular_Strength = 28;
  bool has_solidlight_specular_strength() const;
  void clear_solidlight_specular_strength();
  static const int kSolidLightSpecularStrengthFieldNumber = 28;
  float solidlight_specular_strength() const;
  void set_solidlight_specular_strength(float value);

  // required bool SolidLight_Diffuse_ColorPicker = 31;
  bool has_solidlight_diffuse_colorpicker() const;
  void clear_solidlight_diffuse_colorpicker();
  static const int kSolidLightDiffuseColorPickerFieldNumber = 31;
  bool solidlight_diffuse_colorpicker() const;
  void set_solidlight_diffuse_colorpicker(bool value);

  // required bool SolidLight_Specular_ColorPicker = 32;
  bool has_solidlight_specular_colorpicker() const;
  void clear_solidlight_specular_colorpicker();
  static const int kSolidLightSpecularColorPickerFieldNumber = 32;
  bool solidlight_specular_colorpicker() const;
  void set_solidlight_specular_colorpicker(bool value);

  // required bool Setting_ShowTerrain = 33;
  bool has_setting_showterrain() const;
  void clear_setting_showterrain();
  static const int kSettingShowTerrainFieldNumber = 33;
  bool setting_showterrain() const;
  void set_setting_showterrain(bool value);

  // required bool Setting_TerrainModel = 34;
  bool has_setting_terrainmodel() const;
  void clear_setting_terrainmodel();
  static const int kSettingTerrainModelFieldNumber = 34;
  bool setting_terrainmodel() const;
  void set_setting_terrainmodel(bool value);

  // required int32 Setting_TerrainWidth = 38;
  bool has_setting_terrainwidth() const;
  void clear_setting_terrainwidth();
  static const int kSettingTerrainWidthFieldNumber = 38;
  ::google::protobuf::int32 setting_terrainwidth() const;
  void set_setting_terrainwidth(::google::protobuf::int32 value);

  // required bool Setting_TerrainAnimateX = 35;
  bool has_setting_terrainanimatex() const;
  void clear_setting_terrainanimatex();
  static const int kSettingTerrainAnimateXFieldNumber = 35;
  bool setting_terrainanimatex() const;
  void set_setting_terrainanimatex(bool value);

  // required bool Setting_TerrainAnimateY = 36;
  bool has_setting_terrainanimatey() const;
  void clear_setting_terrainanimatey();
  static const int kSettingTerrainAnimateYFieldNumber = 36;
  bool setting_terrainanimatey() const;
  void set_setting_terrainanimatey(bool value);

  // required bool Setting_ShowSpaceship = 40;
  bool has_setting_showspaceship() const;
  void clear_setting_showspaceship();
  static const int kSettingShowSpaceshipFieldNumber = 40;
  bool setting_showspaceship() const;
  void set_setting_showspaceship(bool value);

  // required bool Setting_GenerateSpaceship = 41;
  bool has_setting_generatespaceship() const;
  void clear_setting_generatespaceship();
  static const int kSettingGenerateSpaceshipFieldNumber = 41;
  bool setting_generatespaceship() const;
  void set_setting_generatespaceship(bool value);

  // required int32 Setting_TerrainHeight = 39;
  bool has_setting_terrainheight() const;
  void clear_setting_terrainheight();
  static const int kSettingTerrainHeightFieldNumber = 39;
  ::google::protobuf::int32 setting_terrainheight() const;
  void set_setting_terrainheight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:KuplungApp.GUISettings)
 private:
  void set_has_setting_fov();
  void clear_has_setting_fov();
  void set_has_setting_outlinethickness();
  void clear_has_setting_outlinethickness();
  void set_has_setting_ratiowidth();
  void clear_has_setting_ratiowidth();
  void set_has_setting_ratioheight();
  void clear_has_setting_ratioheight();
  void set_has_setting_planeclose();
  void clear_has_setting_planeclose();
  void set_has_setting_planefar();
  void clear_has_setting_planefar();
  void set_has_setting_gridsize();
  void clear_has_setting_gridsize();
  void set_has_setting_skybox();
  void clear_has_setting_skybox();
  void set_has_setting_outlinecolor();
  void clear_has_setting_outlinecolor();
  void set_has_setting_uiambientlight();
  void clear_has_setting_uiambientlight();
  void set_has_setting_fixedgridworld();
  void clear_has_setting_fixedgridworld();
  void set_has_setting_outlinecolorpickeropen();
  void clear_has_setting_outlinecolorpickeropen();
  void set_has_setting_showaxishelpers();
  void clear_has_setting_showaxishelpers();
  void set_has_settings_showzaxis();
  void clear_has_settings_showzaxis();
  void set_has_setting_deferredtestmode();
  void clear_has_setting_deferredtestmode();
  void set_has_setting_deferredtestlights();
  void clear_has_setting_deferredtestlights();
  void set_has_setting_lightingpass_drawmode();
  void clear_has_setting_lightingpass_drawmode();
  void set_has_setting_deferredtestlightsnumber();
  void clear_has_setting_deferredtestlightsnumber();
  void set_has_setting_deferredambientstrength();
  void clear_has_setting_deferredambientstrength();
  void set_has_viewmodelskin();
  void clear_has_viewmodelskin();
  void set_has_solidlight_direction();
  void clear_has_solidlight_direction();
  void set_has_solidlight_materialcolor();
  void clear_has_solidlight_materialcolor();
  void set_has_solidlight_ambient();
  void clear_has_solidlight_ambient();
  void set_has_solidlight_diffuse();
  void clear_has_solidlight_diffuse();
  void set_has_solidlight_specular();
  void clear_has_solidlight_specular();
  void set_has_solidlight_ambient_strength();
  void clear_has_solidlight_ambient_strength();
  void set_has_solidlight_diffuse_strength();
  void clear_has_solidlight_diffuse_strength();
  void set_has_solidlight_specular_strength();
  void clear_has_solidlight_specular_strength();
  void set_has_solidlight_materialcolor_colorpicker();
  void clear_has_solidlight_materialcolor_colorpicker();
  void set_has_solidlight_ambient_colorpicker();
  void clear_has_solidlight_ambient_colorpicker();
  void set_has_solidlight_diffuse_colorpicker();
  void clear_has_solidlight_diffuse_colorpicker();
  void set_has_solidlight_specular_colorpicker();
  void clear_has_solidlight_specular_colorpicker();
  void set_has_setting_showterrain();
  void clear_has_setting_showterrain();
  void set_has_setting_terrainmodel();
  void clear_has_setting_terrainmodel();
  void set_has_setting_terrainanimatex();
  void clear_has_setting_terrainanimatex();
  void set_has_setting_terrainanimatey();
  void clear_has_setting_terrainanimatey();
  void set_has_heightmapimage();
  void clear_has_heightmapimage();
  void set_has_setting_terrainwidth();
  void clear_has_setting_terrainwidth();
  void set_has_setting_terrainheight();
  void clear_has_setting_terrainheight();
  void set_has_setting_showspaceship();
  void clear_has_setting_showspaceship();
  void set_has_setting_generatespaceship();
  void clear_has_setting_generatespaceship();
  void set_has_camera();
  void clear_has_camera();
  void set_has_grid();
  void clear_has_grid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::KuplungApp::LightObject > lights_;
  ::google::protobuf::internal::ArenaStringPtr heightmapimage_;
  ::KuplungApp::Vec4* setting_outlinecolor_;
  ::KuplungApp::Vec3* setting_uiambientlight_;
  ::KuplungApp::Vec3* solidlight_direction_;
  ::KuplungApp::Vec3* solidlight_materialcolor_;
  ::KuplungApp::Vec3* solidlight_ambient_;
  ::KuplungApp::Vec3* solidlight_diffuse_;
  ::KuplungApp::Vec3* solidlight_specular_;
  ::KuplungApp::CameraSettings* camera_;
  ::KuplungApp::GridSettings* grid_;
  float setting_fov_;
  float setting_outlinethickness_;
  float setting_ratiowidth_;
  float setting_ratioheight_;
  float setting_planeclose_;
  float setting_planefar_;
  ::google::protobuf::int32 setting_gridsize_;
  ::google::protobuf::int32 setting_skybox_;
  bool setting_fixedgridworld_;
  bool setting_outlinecolorpickeropen_;
  bool setting_showaxishelpers_;
  bool settings_showzaxis_;
  ::google::protobuf::int32 setting_lightingpass_drawmode_;
  ::google::protobuf::int32 setting_deferredtestlightsnumber_;
  float setting_deferredambientstrength_;
  ::google::protobuf::int32 viewmodelskin_;
  bool setting_deferredtestmode_;
  bool setting_deferredtestlights_;
  bool solidlight_materialcolor_colorpicker_;
  bool solidlight_ambient_colorpicker_;
  float solidlight_ambient_strength_;
  float solidlight_diffuse_strength_;
  float solidlight_specular_strength_;
  bool solidlight_diffuse_colorpicker_;
  bool solidlight_specular_colorpicker_;
  bool setting_showterrain_;
  bool setting_terrainmodel_;
  ::google::protobuf::int32 setting_terrainwidth_;
  bool setting_terrainanimatex_;
  bool setting_terrainanimatey_;
  bool setting_showspaceship_;
  bool setting_generatespaceship_;
  ::google::protobuf::int32 setting_terrainheight_;
  mutable int _cached_size_;
  friend struct  protobuf_KuplungAppSettings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KuplungApp.CameraSettings) */ {
 public:
  CameraSettings();
  virtual ~CameraSettings();

  CameraSettings(const CameraSettings& from);

  inline CameraSettings& operator=(const CameraSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraSettings& default_instance();

  static inline const CameraSettings* internal_default_instance() {
    return reinterpret_cast<const CameraSettings*>(
               &_CameraSettings_default_instance_);
  }

  void Swap(CameraSettings* other);

  // implements Message ----------------------------------------------

  inline CameraSettings* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraSettings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraSettings& from);
  void MergeFrom(const CameraSettings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KuplungApp.Vec3 cameraPosition = 1;
  bool has_cameraposition() const;
  void clear_cameraposition();
  static const int kCameraPositionFieldNumber = 1;
  const ::KuplungApp::Vec3& cameraposition() const;
  ::KuplungApp::Vec3* mutable_cameraposition();
  ::KuplungApp::Vec3* release_cameraposition();
  void set_allocated_cameraposition(::KuplungApp::Vec3* cameraposition);

  // required .KuplungApp.Vec3 View_Eye = 2;
  bool has_view_eye() const;
  void clear_view_eye();
  static const int kViewEyeFieldNumber = 2;
  const ::KuplungApp::Vec3& view_eye() const;
  ::KuplungApp::Vec3* mutable_view_eye();
  ::KuplungApp::Vec3* release_view_eye();
  void set_allocated_view_eye(::KuplungApp::Vec3* view_eye);

  // required .KuplungApp.Vec3 View_Center = 3;
  bool has_view_center() const;
  void clear_view_center();
  static const int kViewCenterFieldNumber = 3;
  const ::KuplungApp::Vec3& view_center() const;
  ::KuplungApp::Vec3* mutable_view_center();
  ::KuplungApp::Vec3* release_view_center();
  void set_allocated_view_center(::KuplungApp::Vec3* view_center);

  // required .KuplungApp.Vec3 View_Up = 4;
  bool has_view_up() const;
  void clear_view_up();
  static const int kViewUpFieldNumber = 4;
  const ::KuplungApp::Vec3& view_up() const;
  ::KuplungApp::Vec3* mutable_view_up();
  ::KuplungApp::Vec3* release_view_up();
  void set_allocated_view_up(::KuplungApp::Vec3* view_up);

  // required .KuplungApp.ObjectCoordinate positionX = 5;
  bool has_positionx() const;
  void clear_positionx();
  static const int kPositionXFieldNumber = 5;
  const ::KuplungApp::ObjectCoordinate& positionx() const;
  ::KuplungApp::ObjectCoordinate* mutable_positionx();
  ::KuplungApp::ObjectCoordinate* release_positionx();
  void set_allocated_positionx(::KuplungApp::ObjectCoordinate* positionx);

  // required .KuplungApp.ObjectCoordinate positionY = 6;
  bool has_positiony() const;
  void clear_positiony();
  static const int kPositionYFieldNumber = 6;
  const ::KuplungApp::ObjectCoordinate& positiony() const;
  ::KuplungApp::ObjectCoordinate* mutable_positiony();
  ::KuplungApp::ObjectCoordinate* release_positiony();
  void set_allocated_positiony(::KuplungApp::ObjectCoordinate* positiony);

  // required .KuplungApp.ObjectCoordinate positionZ = 7;
  bool has_positionz() const;
  void clear_positionz();
  static const int kPositionZFieldNumber = 7;
  const ::KuplungApp::ObjectCoordinate& positionz() const;
  ::KuplungApp::ObjectCoordinate* mutable_positionz();
  ::KuplungApp::ObjectCoordinate* release_positionz();
  void set_allocated_positionz(::KuplungApp::ObjectCoordinate* positionz);

  // required .KuplungApp.ObjectCoordinate rotateX = 8;
  bool has_rotatex() const;
  void clear_rotatex();
  static const int kRotateXFieldNumber = 8;
  const ::KuplungApp::ObjectCoordinate& rotatex() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatex();
  ::KuplungApp::ObjectCoordinate* release_rotatex();
  void set_allocated_rotatex(::KuplungApp::ObjectCoordinate* rotatex);

  // required .KuplungApp.ObjectCoordinate rotateY = 9;
  bool has_rotatey() const;
  void clear_rotatey();
  static const int kRotateYFieldNumber = 9;
  const ::KuplungApp::ObjectCoordinate& rotatey() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatey();
  ::KuplungApp::ObjectCoordinate* release_rotatey();
  void set_allocated_rotatey(::KuplungApp::ObjectCoordinate* rotatey);

  // required .KuplungApp.ObjectCoordinate rotateZ = 10;
  bool has_rotatez() const;
  void clear_rotatez();
  static const int kRotateZFieldNumber = 10;
  const ::KuplungApp::ObjectCoordinate& rotatez() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatez();
  ::KuplungApp::ObjectCoordinate* release_rotatez();
  void set_allocated_rotatez(::KuplungApp::ObjectCoordinate* rotatez);

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
  bool has_rotatecenterx() const;
  void clear_rotatecenterx();
  static const int kRotateCenterXFieldNumber = 11;
  const ::KuplungApp::ObjectCoordinate& rotatecenterx() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatecenterx();
  ::KuplungApp::ObjectCoordinate* release_rotatecenterx();
  void set_allocated_rotatecenterx(::KuplungApp::ObjectCoordinate* rotatecenterx);

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
  bool has_rotatecentery() const;
  void clear_rotatecentery();
  static const int kRotateCenterYFieldNumber = 12;
  const ::KuplungApp::ObjectCoordinate& rotatecentery() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatecentery();
  ::KuplungApp::ObjectCoordinate* release_rotatecentery();
  void set_allocated_rotatecentery(::KuplungApp::ObjectCoordinate* rotatecentery);

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
  bool has_rotatecenterz() const;
  void clear_rotatecenterz();
  static const int kRotateCenterZFieldNumber = 13;
  const ::KuplungApp::ObjectCoordinate& rotatecenterz() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatecenterz();
  ::KuplungApp::ObjectCoordinate* release_rotatecenterz();
  void set_allocated_rotatecenterz(::KuplungApp::ObjectCoordinate* rotatecenterz);

  // @@protoc_insertion_point(class_scope:KuplungApp.CameraSettings)
 private:
  void set_has_cameraposition();
  void clear_has_cameraposition();
  void set_has_view_eye();
  void clear_has_view_eye();
  void set_has_view_center();
  void clear_has_view_center();
  void set_has_view_up();
  void clear_has_view_up();
  void set_has_positionx();
  void clear_has_positionx();
  void set_has_positiony();
  void clear_has_positiony();
  void set_has_positionz();
  void clear_has_positionz();
  void set_has_rotatex();
  void clear_has_rotatex();
  void set_has_rotatey();
  void clear_has_rotatey();
  void set_has_rotatez();
  void clear_has_rotatez();
  void set_has_rotatecenterx();
  void clear_has_rotatecenterx();
  void set_has_rotatecentery();
  void clear_has_rotatecentery();
  void set_has_rotatecenterz();
  void clear_has_rotatecenterz();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::KuplungApp::Vec3* cameraposition_;
  ::KuplungApp::Vec3* view_eye_;
  ::KuplungApp::Vec3* view_center_;
  ::KuplungApp::Vec3* view_up_;
  ::KuplungApp::ObjectCoordinate* positionx_;
  ::KuplungApp::ObjectCoordinate* positiony_;
  ::KuplungApp::ObjectCoordinate* positionz_;
  ::KuplungApp::ObjectCoordinate* rotatex_;
  ::KuplungApp::ObjectCoordinate* rotatey_;
  ::KuplungApp::ObjectCoordinate* rotatez_;
  ::KuplungApp::ObjectCoordinate* rotatecenterx_;
  ::KuplungApp::ObjectCoordinate* rotatecentery_;
  ::KuplungApp::ObjectCoordinate* rotatecenterz_;
  friend struct  protobuf_KuplungAppSettings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GridSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KuplungApp.GridSettings) */ {
 public:
  GridSettings();
  virtual ~GridSettings();

  GridSettings(const GridSettings& from);

  inline GridSettings& operator=(const GridSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridSettings& default_instance();

  static inline const GridSettings* internal_default_instance() {
    return reinterpret_cast<const GridSettings*>(
               &_GridSettings_default_instance_);
  }

  void Swap(GridSettings* other);

  // implements Message ----------------------------------------------

  inline GridSettings* New() const PROTOBUF_FINAL { return New(NULL); }

  GridSettings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GridSettings& from);
  void MergeFrom(const GridSettings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GridSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KuplungApp.ObjectCoordinate positionX = 3;
  bool has_positionx() const;
  void clear_positionx();
  static const int kPositionXFieldNumber = 3;
  const ::KuplungApp::ObjectCoordinate& positionx() const;
  ::KuplungApp::ObjectCoordinate* mutable_positionx();
  ::KuplungApp::ObjectCoordinate* release_positionx();
  void set_allocated_positionx(::KuplungApp::ObjectCoordinate* positionx);

  // required .KuplungApp.ObjectCoordinate positionY = 4;
  bool has_positiony() const;
  void clear_positiony();
  static const int kPositionYFieldNumber = 4;
  const ::KuplungApp::ObjectCoordinate& positiony() const;
  ::KuplungApp::ObjectCoordinate* mutable_positiony();
  ::KuplungApp::ObjectCoordinate* release_positiony();
  void set_allocated_positiony(::KuplungApp::ObjectCoordinate* positiony);

  // required .KuplungApp.ObjectCoordinate positionZ = 5;
  bool has_positionz() const;
  void clear_positionz();
  static const int kPositionZFieldNumber = 5;
  const ::KuplungApp::ObjectCoordinate& positionz() const;
  ::KuplungApp::ObjectCoordinate* mutable_positionz();
  ::KuplungApp::ObjectCoordinate* release_positionz();
  void set_allocated_positionz(::KuplungApp::ObjectCoordinate* positionz);

  // required .KuplungApp.ObjectCoordinate rotateX = 6;
  bool has_rotatex() const;
  void clear_rotatex();
  static const int kRotateXFieldNumber = 6;
  const ::KuplungApp::ObjectCoordinate& rotatex() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatex();
  ::KuplungApp::ObjectCoordinate* release_rotatex();
  void set_allocated_rotatex(::KuplungApp::ObjectCoordinate* rotatex);

  // required .KuplungApp.ObjectCoordinate rotateY = 7;
  bool has_rotatey() const;
  void clear_rotatey();
  static const int kRotateYFieldNumber = 7;
  const ::KuplungApp::ObjectCoordinate& rotatey() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatey();
  ::KuplungApp::ObjectCoordinate* release_rotatey();
  void set_allocated_rotatey(::KuplungApp::ObjectCoordinate* rotatey);

  // required .KuplungApp.ObjectCoordinate rotateZ = 8;
  bool has_rotatez() const;
  void clear_rotatez();
  static const int kRotateZFieldNumber = 8;
  const ::KuplungApp::ObjectCoordinate& rotatez() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatez();
  ::KuplungApp::ObjectCoordinate* release_rotatez();
  void set_allocated_rotatez(::KuplungApp::ObjectCoordinate* rotatez);

  // required .KuplungApp.ObjectCoordinate scaleX = 9;
  bool has_scalex() const;
  void clear_scalex();
  static const int kScaleXFieldNumber = 9;
  const ::KuplungApp::ObjectCoordinate& scalex() const;
  ::KuplungApp::ObjectCoordinate* mutable_scalex();
  ::KuplungApp::ObjectCoordinate* release_scalex();
  void set_allocated_scalex(::KuplungApp::ObjectCoordinate* scalex);

  // required .KuplungApp.ObjectCoordinate scaleY = 10;
  bool has_scaley() const;
  void clear_scaley();
  static const int kScaleYFieldNumber = 10;
  const ::KuplungApp::ObjectCoordinate& scaley() const;
  ::KuplungApp::ObjectCoordinate* mutable_scaley();
  ::KuplungApp::ObjectCoordinate* release_scaley();
  void set_allocated_scaley(::KuplungApp::ObjectCoordinate* scaley);

  // required .KuplungApp.ObjectCoordinate scaleZ = 11;
  bool has_scalez() const;
  void clear_scalez();
  static const int kScaleZFieldNumber = 11;
  const ::KuplungApp::ObjectCoordinate& scalez() const;
  ::KuplungApp::ObjectCoordinate* mutable_scalez();
  ::KuplungApp::ObjectCoordinate* release_scalez();
  void set_allocated_scalez(::KuplungApp::ObjectCoordinate* scalez);

  // required bool actAsMirror = 1;
  bool has_actasmirror() const;
  void clear_actasmirror();
  static const int kActAsMirrorFieldNumber = 1;
  bool actasmirror() const;
  void set_actasmirror(bool value);

  // required int32 gridSize = 2;
  bool has_gridsize() const;
  void clear_gridsize();
  static const int kGridSizeFieldNumber = 2;
  ::google::protobuf::int32 gridsize() const;
  void set_gridsize(::google::protobuf::int32 value);

  // required float transparency = 12;
  bool has_transparency() const;
  void clear_transparency();
  static const int kTransparencyFieldNumber = 12;
  float transparency() const;
  void set_transparency(float value);

  // required int32 showGrid = 13;
  bool has_showgrid() const;
  void clear_showgrid();
  static const int kShowGridFieldNumber = 13;
  ::google::protobuf::int32 showgrid() const;
  void set_showgrid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:KuplungApp.GridSettings)
 private:
  void set_has_actasmirror();
  void clear_has_actasmirror();
  void set_has_gridsize();
  void clear_has_gridsize();
  void set_has_positionx();
  void clear_has_positionx();
  void set_has_positiony();
  void clear_has_positiony();
  void set_has_positionz();
  void clear_has_positionz();
  void set_has_rotatex();
  void clear_has_rotatex();
  void set_has_rotatey();
  void clear_has_rotatey();
  void set_has_rotatez();
  void clear_has_rotatez();
  void set_has_scalex();
  void clear_has_scalex();
  void set_has_scaley();
  void clear_has_scaley();
  void set_has_scalez();
  void clear_has_scalez();
  void set_has_transparency();
  void clear_has_transparency();
  void set_has_showgrid();
  void clear_has_showgrid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::KuplungApp::ObjectCoordinate* positionx_;
  ::KuplungApp::ObjectCoordinate* positiony_;
  ::KuplungApp::ObjectCoordinate* positionz_;
  ::KuplungApp::ObjectCoordinate* rotatex_;
  ::KuplungApp::ObjectCoordinate* rotatey_;
  ::KuplungApp::ObjectCoordinate* rotatez_;
  ::KuplungApp::ObjectCoordinate* scalex_;
  ::KuplungApp::ObjectCoordinate* scaley_;
  ::KuplungApp::ObjectCoordinate* scalez_;
  bool actasmirror_;
  ::google::protobuf::int32 gridsize_;
  float transparency_;
  ::google::protobuf::int32 showgrid_;
  friend struct  protobuf_KuplungAppSettings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LightObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KuplungApp.LightObject) */ {
 public:
  LightObject();
  virtual ~LightObject();

  LightObject(const LightObject& from);

  inline LightObject& operator=(const LightObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LightObject& default_instance();

  static inline const LightObject* internal_default_instance() {
    return reinterpret_cast<const LightObject*>(
               &_LightObject_default_instance_);
  }

  void Swap(LightObject* other);

  // implements Message ----------------------------------------------

  inline LightObject* New() const PROTOBUF_FINAL { return New(NULL); }

  LightObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LightObject& from);
  void MergeFrom(const LightObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LightObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required .KuplungApp.ObjectCoordinate positionX = 7;
  bool has_positionx() const;
  void clear_positionx();
  static const int kPositionXFieldNumber = 7;
  const ::KuplungApp::ObjectCoordinate& positionx() const;
  ::KuplungApp::ObjectCoordinate* mutable_positionx();
  ::KuplungApp::ObjectCoordinate* release_positionx();
  void set_allocated_positionx(::KuplungApp::ObjectCoordinate* positionx);

  // required .KuplungApp.ObjectCoordinate positionY = 8;
  bool has_positiony() const;
  void clear_positiony();
  static const int kPositionYFieldNumber = 8;
  const ::KuplungApp::ObjectCoordinate& positiony() const;
  ::KuplungApp::ObjectCoordinate* mutable_positiony();
  ::KuplungApp::ObjectCoordinate* release_positiony();
  void set_allocated_positiony(::KuplungApp::ObjectCoordinate* positiony);

  // required .KuplungApp.ObjectCoordinate positionZ = 9;
  bool has_positionz() const;
  void clear_positionz();
  static const int kPositionZFieldNumber = 9;
  const ::KuplungApp::ObjectCoordinate& positionz() const;
  ::KuplungApp::ObjectCoordinate* mutable_positionz();
  ::KuplungApp::ObjectCoordinate* release_positionz();
  void set_allocated_positionz(::KuplungApp::ObjectCoordinate* positionz);

  // required .KuplungApp.ObjectCoordinate directionX = 10;
  bool has_directionx() const;
  void clear_directionx();
  static const int kDirectionXFieldNumber = 10;
  const ::KuplungApp::ObjectCoordinate& directionx() const;
  ::KuplungApp::ObjectCoordinate* mutable_directionx();
  ::KuplungApp::ObjectCoordinate* release_directionx();
  void set_allocated_directionx(::KuplungApp::ObjectCoordinate* directionx);

  // required .KuplungApp.ObjectCoordinate directionY = 11;
  bool has_directiony() const;
  void clear_directiony();
  static const int kDirectionYFieldNumber = 11;
  const ::KuplungApp::ObjectCoordinate& directiony() const;
  ::KuplungApp::ObjectCoordinate* mutable_directiony();
  ::KuplungApp::ObjectCoordinate* release_directiony();
  void set_allocated_directiony(::KuplungApp::ObjectCoordinate* directiony);

  // required .KuplungApp.ObjectCoordinate directionZ = 12;
  bool has_directionz() const;
  void clear_directionz();
  static const int kDirectionZFieldNumber = 12;
  const ::KuplungApp::ObjectCoordinate& directionz() const;
  ::KuplungApp::ObjectCoordinate* mutable_directionz();
  ::KuplungApp::ObjectCoordinate* release_directionz();
  void set_allocated_directionz(::KuplungApp::ObjectCoordinate* directionz);

  // required .KuplungApp.ObjectCoordinate scaleX = 13;
  bool has_scalex() const;
  void clear_scalex();
  static const int kScaleXFieldNumber = 13;
  const ::KuplungApp::ObjectCoordinate& scalex() const;
  ::KuplungApp::ObjectCoordinate* mutable_scalex();
  ::KuplungApp::ObjectCoordinate* release_scalex();
  void set_allocated_scalex(::KuplungApp::ObjectCoordinate* scalex);

  // required .KuplungApp.ObjectCoordinate scaleY = 14;
  bool has_scaley() const;
  void clear_scaley();
  static const int kScaleYFieldNumber = 14;
  const ::KuplungApp::ObjectCoordinate& scaley() const;
  ::KuplungApp::ObjectCoordinate* mutable_scaley();
  ::KuplungApp::ObjectCoordinate* release_scaley();
  void set_allocated_scaley(::KuplungApp::ObjectCoordinate* scaley);

  // required .KuplungApp.ObjectCoordinate scaleZ = 15;
  bool has_scalez() const;
  void clear_scalez();
  static const int kScaleZFieldNumber = 15;
  const ::KuplungApp::ObjectCoordinate& scalez() const;
  ::KuplungApp::ObjectCoordinate* mutable_scalez();
  ::KuplungApp::ObjectCoordinate* release_scalez();
  void set_allocated_scalez(::KuplungApp::ObjectCoordinate* scalez);

  // required .KuplungApp.ObjectCoordinate rotateX = 16;
  bool has_rotatex() const;
  void clear_rotatex();
  static const int kRotateXFieldNumber = 16;
  const ::KuplungApp::ObjectCoordinate& rotatex() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatex();
  ::KuplungApp::ObjectCoordinate* release_rotatex();
  void set_allocated_rotatex(::KuplungApp::ObjectCoordinate* rotatex);

  // required .KuplungApp.ObjectCoordinate rotateY = 17;
  bool has_rotatey() const;
  void clear_rotatey();
  static const int kRotateYFieldNumber = 17;
  const ::KuplungApp::ObjectCoordinate& rotatey() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatey();
  ::KuplungApp::ObjectCoordinate* release_rotatey();
  void set_allocated_rotatey(::KuplungApp::ObjectCoordinate* rotatey);

  // required .KuplungApp.ObjectCoordinate rotateZ = 18;
  bool has_rotatez() const;
  void clear_rotatez();
  static const int kRotateZFieldNumber = 18;
  const ::KuplungApp::ObjectCoordinate& rotatez() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatez();
  ::KuplungApp::ObjectCoordinate* release_rotatez();
  void set_allocated_rotatez(::KuplungApp::ObjectCoordinate* rotatez);

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
  bool has_rotatecenterx() const;
  void clear_rotatecenterx();
  static const int kRotateCenterXFieldNumber = 19;
  const ::KuplungApp::ObjectCoordinate& rotatecenterx() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatecenterx();
  ::KuplungApp::ObjectCoordinate* release_rotatecenterx();
  void set_allocated_rotatecenterx(::KuplungApp::ObjectCoordinate* rotatecenterx);

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
  bool has_rotatecentery() const;
  void clear_rotatecentery();
  static const int kRotateCenterYFieldNumber = 20;
  const ::KuplungApp::ObjectCoordinate& rotatecentery() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatecentery();
  ::KuplungApp::ObjectCoordinate* release_rotatecentery();
  void set_allocated_rotatecentery(::KuplungApp::ObjectCoordinate* rotatecentery);

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
  bool has_rotatecenterz() const;
  void clear_rotatecenterz();
  static const int kRotateCenterZFieldNumber = 21;
  const ::KuplungApp::ObjectCoordinate& rotatecenterz() const;
  ::KuplungApp::ObjectCoordinate* mutable_rotatecenterz();
  ::KuplungApp::ObjectCoordinate* release_rotatecenterz();
  void set_allocated_rotatecenterz(::KuplungApp::ObjectCoordinate* rotatecenterz);

  // required .KuplungApp.MaterialColor ambient = 22;
  bool has_ambient() const;
  void clear_ambient();
  static const int kAmbientFieldNumber = 22;
  const ::KuplungApp::MaterialColor& ambient() const;
  ::KuplungApp::MaterialColor* mutable_ambient();
  ::KuplungApp::MaterialColor* release_ambient();
  void set_allocated_ambient(::KuplungApp::MaterialColor* ambient);

  // required .KuplungApp.MaterialColor diffuse = 23;
  bool has_diffuse() const;
  void clear_diffuse();
  static const int kDiffuseFieldNumber = 23;
  const ::KuplungApp::MaterialColor& diffuse() const;
  ::KuplungApp::MaterialColor* mutable_diffuse();
  ::KuplungApp::MaterialColor* release_diffuse();
  void set_allocated_diffuse(::KuplungApp::MaterialColor* diffuse);

  // required .KuplungApp.MaterialColor specular = 24;
  bool has_specular() const;
  void clear_specular();
  static const int kSpecularFieldNumber = 24;
  const ::KuplungApp::MaterialColor& specular() const;
  ::KuplungApp::MaterialColor* mutable_specular();
  ::KuplungApp::MaterialColor* release_specular();
  void set_allocated_specular(::KuplungApp::MaterialColor* specular);

  // required .KuplungApp.ObjectCoordinate lCutOff = 25;
  bool has_lcutoff() const;
  void clear_lcutoff();
  static const int kLCutOffFieldNumber = 25;
  const ::KuplungApp::ObjectCoordinate& lcutoff() const;
  ::KuplungApp::ObjectCoordinate* mutable_lcutoff();
  ::KuplungApp::ObjectCoordinate* release_lcutoff();
  void set_allocated_lcutoff(::KuplungApp::ObjectCoordinate* lcutoff);

  // required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
  bool has_loutercutoff() const;
  void clear_loutercutoff();
  static const int kLOuterCutOffFieldNumber = 26;
  const ::KuplungApp::ObjectCoordinate& loutercutoff() const;
  ::KuplungApp::ObjectCoordinate* mutable_loutercutoff();
  ::KuplungApp::ObjectCoordinate* release_loutercutoff();
  void set_allocated_loutercutoff(::KuplungApp::ObjectCoordinate* loutercutoff);

  // required .KuplungApp.ObjectCoordinate lConstant = 27;
  bool has_lconstant() const;
  void clear_lconstant();
  static const int kLConstantFieldNumber = 27;
  const ::KuplungApp::ObjectCoordinate& lconstant() const;
  ::KuplungApp::ObjectCoordinate* mutable_lconstant();
  ::KuplungApp::ObjectCoordinate* release_lconstant();
  void set_allocated_lconstant(::KuplungApp::ObjectCoordinate* lconstant);

  // required .KuplungApp.ObjectCoordinate lLinear = 28;
  bool has_llinear() const;
  void clear_llinear();
  static const int kLLinearFieldNumber = 28;
  const ::KuplungApp::ObjectCoordinate& llinear() const;
  ::KuplungApp::ObjectCoordinate* mutable_llinear();
  ::KuplungApp::ObjectCoordinate* release_llinear();
  void set_allocated_llinear(::KuplungApp::ObjectCoordinate* llinear);

  // required .KuplungApp.ObjectCoordinate lQuadratic = 29;
  bool has_lquadratic() const;
  void clear_lquadratic();
  static const int kLQuadraticFieldNumber = 29;
  const ::KuplungApp::ObjectCoordinate& lquadratic() const;
  ::KuplungApp::ObjectCoordinate* mutable_lquadratic();
  ::KuplungApp::ObjectCoordinate* release_lquadratic();
  void set_allocated_lquadratic(::KuplungApp::ObjectCoordinate* lquadratic);

  // required int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required bool showLampObject = 4;
  bool has_showlampobject() const;
  void clear_showlampobject();
  static const int kShowLampObjectFieldNumber = 4;
  bool showlampobject() const;
  void set_showlampobject(bool value);

  // required bool showLampDirection = 5;
  bool has_showlampdirection() const;
  void clear_showlampdirection();
  static const int kShowLampDirectionFieldNumber = 5;
  bool showlampdirection() const;
  void set_showlampdirection(bool value);

  // required bool showInWire = 6;
  bool has_showinwire() const;
  void clear_showinwire();
  static const int kShowInWireFieldNumber = 6;
  bool showinwire() const;
  void set_showinwire(bool value);

  // @@protoc_insertion_point(class_scope:KuplungApp.LightObject)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_description();
  void clear_has_description();
  void set_has_type();
  void clear_has_type();
  void set_has_showlampobject();
  void clear_has_showlampobject();
  void set_has_showlampdirection();
  void clear_has_showlampdirection();
  void set_has_showinwire();
  void clear_has_showinwire();
  void set_has_positionx();
  void clear_has_positionx();
  void set_has_positiony();
  void clear_has_positiony();
  void set_has_positionz();
  void clear_has_positionz();
  void set_has_directionx();
  void clear_has_directionx();
  void set_has_directiony();
  void clear_has_directiony();
  void set_has_directionz();
  void clear_has_directionz();
  void set_has_scalex();
  void clear_has_scalex();
  void set_has_scaley();
  void clear_has_scaley();
  void set_has_scalez();
  void clear_has_scalez();
  void set_has_rotatex();
  void clear_has_rotatex();
  void set_has_rotatey();
  void clear_has_rotatey();
  void set_has_rotatez();
  void clear_has_rotatez();
  void set_has_rotatecenterx();
  void clear_has_rotatecenterx();
  void set_has_rotatecentery();
  void clear_has_rotatecentery();
  void set_has_rotatecenterz();
  void clear_has_rotatecenterz();
  void set_has_ambient();
  void clear_has_ambient();
  void set_has_diffuse();
  void clear_has_diffuse();
  void set_has_specular();
  void clear_has_specular();
  void set_has_lcutoff();
  void clear_has_lcutoff();
  void set_has_loutercutoff();
  void clear_has_loutercutoff();
  void set_has_lconstant();
  void clear_has_lconstant();
  void set_has_llinear();
  void clear_has_llinear();
  void set_has_lquadratic();
  void clear_has_lquadratic();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::KuplungApp::ObjectCoordinate* positionx_;
  ::KuplungApp::ObjectCoordinate* positiony_;
  ::KuplungApp::ObjectCoordinate* positionz_;
  ::KuplungApp::ObjectCoordinate* directionx_;
  ::KuplungApp::ObjectCoordinate* directiony_;
  ::KuplungApp::ObjectCoordinate* directionz_;
  ::KuplungApp::ObjectCoordinate* scalex_;
  ::KuplungApp::ObjectCoordinate* scaley_;
  ::KuplungApp::ObjectCoordinate* scalez_;
  ::KuplungApp::ObjectCoordinate* rotatex_;
  ::KuplungApp::ObjectCoordinate* rotatey_;
  ::KuplungApp::ObjectCoordinate* rotatez_;
  ::KuplungApp::ObjectCoordinate* rotatecenterx_;
  ::KuplungApp::ObjectCoordinate* rotatecentery_;
  ::KuplungApp::ObjectCoordinate* rotatecenterz_;
  ::KuplungApp::MaterialColor* ambient_;
  ::KuplungApp::MaterialColor* diffuse_;
  ::KuplungApp::MaterialColor* specular_;
  ::KuplungApp::ObjectCoordinate* lcutoff_;
  ::KuplungApp::ObjectCoordinate* loutercutoff_;
  ::KuplungApp::ObjectCoordinate* lconstant_;
  ::KuplungApp::ObjectCoordinate* llinear_;
  ::KuplungApp::ObjectCoordinate* lquadratic_;
  ::google::protobuf::int32 type_;
  bool showlampobject_;
  bool showlampdirection_;
  bool showinwire_;
  friend struct  protobuf_KuplungAppSettings_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GUISettings

// required float Setting_FOV = 1;
inline bool GUISettings::has_setting_fov() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GUISettings::set_has_setting_fov() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GUISettings::clear_has_setting_fov() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GUISettings::clear_setting_fov() {
  setting_fov_ = 0;
  clear_has_setting_fov();
}
inline float GUISettings::setting_fov() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_FOV)
  return setting_fov_;
}
inline void GUISettings::set_setting_fov(float value) {
  set_has_setting_fov();
  setting_fov_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_FOV)
}

// required float Setting_OutlineThickness = 2;
inline bool GUISettings::has_setting_outlinethickness() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GUISettings::set_has_setting_outlinethickness() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GUISettings::clear_has_setting_outlinethickness() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GUISettings::clear_setting_outlinethickness() {
  setting_outlinethickness_ = 0;
  clear_has_setting_outlinethickness();
}
inline float GUISettings::setting_outlinethickness() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_OutlineThickness)
  return setting_outlinethickness_;
}
inline void GUISettings::set_setting_outlinethickness(float value) {
  set_has_setting_outlinethickness();
  setting_outlinethickness_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_OutlineThickness)
}

// required float Setting_RatioWidth = 3;
inline bool GUISettings::has_setting_ratiowidth() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GUISettings::set_has_setting_ratiowidth() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GUISettings::clear_has_setting_ratiowidth() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GUISettings::clear_setting_ratiowidth() {
  setting_ratiowidth_ = 0;
  clear_has_setting_ratiowidth();
}
inline float GUISettings::setting_ratiowidth() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_RatioWidth)
  return setting_ratiowidth_;
}
inline void GUISettings::set_setting_ratiowidth(float value) {
  set_has_setting_ratiowidth();
  setting_ratiowidth_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_RatioWidth)
}

// required float Setting_RatioHeight = 4;
inline bool GUISettings::has_setting_ratioheight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GUISettings::set_has_setting_ratioheight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GUISettings::clear_has_setting_ratioheight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GUISettings::clear_setting_ratioheight() {
  setting_ratioheight_ = 0;
  clear_has_setting_ratioheight();
}
inline float GUISettings::setting_ratioheight() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_RatioHeight)
  return setting_ratioheight_;
}
inline void GUISettings::set_setting_ratioheight(float value) {
  set_has_setting_ratioheight();
  setting_ratioheight_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_RatioHeight)
}

// required float Setting_PlaneClose = 5;
inline bool GUISettings::has_setting_planeclose() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GUISettings::set_has_setting_planeclose() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GUISettings::clear_has_setting_planeclose() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GUISettings::clear_setting_planeclose() {
  setting_planeclose_ = 0;
  clear_has_setting_planeclose();
}
inline float GUISettings::setting_planeclose() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_PlaneClose)
  return setting_planeclose_;
}
inline void GUISettings::set_setting_planeclose(float value) {
  set_has_setting_planeclose();
  setting_planeclose_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_PlaneClose)
}

// required float Setting_PlaneFar = 6;
inline bool GUISettings::has_setting_planefar() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GUISettings::set_has_setting_planefar() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GUISettings::clear_has_setting_planefar() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GUISettings::clear_setting_planefar() {
  setting_planefar_ = 0;
  clear_has_setting_planefar();
}
inline float GUISettings::setting_planefar() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_PlaneFar)
  return setting_planefar_;
}
inline void GUISettings::set_setting_planefar(float value) {
  set_has_setting_planefar();
  setting_planefar_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_PlaneFar)
}

// required int32 Setting_GridSize = 7;
inline bool GUISettings::has_setting_gridsize() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GUISettings::set_has_setting_gridsize() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GUISettings::clear_has_setting_gridsize() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GUISettings::clear_setting_gridsize() {
  setting_gridsize_ = 0;
  clear_has_setting_gridsize();
}
inline ::google::protobuf::int32 GUISettings::setting_gridsize() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_GridSize)
  return setting_gridsize_;
}
inline void GUISettings::set_setting_gridsize(::google::protobuf::int32 value) {
  set_has_setting_gridsize();
  setting_gridsize_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_GridSize)
}

// required int32 Setting_Skybox = 8;
inline bool GUISettings::has_setting_skybox() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GUISettings::set_has_setting_skybox() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GUISettings::clear_has_setting_skybox() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GUISettings::clear_setting_skybox() {
  setting_skybox_ = 0;
  clear_has_setting_skybox();
}
inline ::google::protobuf::int32 GUISettings::setting_skybox() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_Skybox)
  return setting_skybox_;
}
inline void GUISettings::set_setting_skybox(::google::protobuf::int32 value) {
  set_has_setting_skybox();
  setting_skybox_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_Skybox)
}

// required .KuplungApp.Vec4 Setting_OutlineColor = 9;
inline bool GUISettings::has_setting_outlinecolor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GUISettings::set_has_setting_outlinecolor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GUISettings::clear_has_setting_outlinecolor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GUISettings::clear_setting_outlinecolor() {
  if (setting_outlinecolor_ != NULL) setting_outlinecolor_->::KuplungApp::Vec4::Clear();
  clear_has_setting_outlinecolor();
}
inline const ::KuplungApp::Vec4& GUISettings::setting_outlinecolor() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_OutlineColor)
  return setting_outlinecolor_ != NULL ? *setting_outlinecolor_
                         : *::KuplungApp::Vec4::internal_default_instance();
}
inline ::KuplungApp::Vec4* GUISettings::mutable_setting_outlinecolor() {
  set_has_setting_outlinecolor();
  if (setting_outlinecolor_ == NULL) {
    setting_outlinecolor_ = new ::KuplungApp::Vec4;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.Setting_OutlineColor)
  return setting_outlinecolor_;
}
inline ::KuplungApp::Vec4* GUISettings::release_setting_outlinecolor() {
  // @@protoc_insertion_point(field_release:KuplungApp.GUISettings.Setting_OutlineColor)
  clear_has_setting_outlinecolor();
  ::KuplungApp::Vec4* temp = setting_outlinecolor_;
  setting_outlinecolor_ = NULL;
  return temp;
}
inline void GUISettings::set_allocated_setting_outlinecolor(::KuplungApp::Vec4* setting_outlinecolor) {
  delete setting_outlinecolor_;
  setting_outlinecolor_ = setting_outlinecolor;
  if (setting_outlinecolor) {
    set_has_setting_outlinecolor();
  } else {
    clear_has_setting_outlinecolor();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GUISettings.Setting_OutlineColor)
}

// required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
inline bool GUISettings::has_setting_uiambientlight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GUISettings::set_has_setting_uiambientlight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GUISettings::clear_has_setting_uiambientlight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GUISettings::clear_setting_uiambientlight() {
  if (setting_uiambientlight_ != NULL) setting_uiambientlight_->::KuplungApp::Vec3::Clear();
  clear_has_setting_uiambientlight();
}
inline const ::KuplungApp::Vec3& GUISettings::setting_uiambientlight() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_UIAmbientLight)
  return setting_uiambientlight_ != NULL ? *setting_uiambientlight_
                         : *::KuplungApp::Vec3::internal_default_instance();
}
inline ::KuplungApp::Vec3* GUISettings::mutable_setting_uiambientlight() {
  set_has_setting_uiambientlight();
  if (setting_uiambientlight_ == NULL) {
    setting_uiambientlight_ = new ::KuplungApp::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.Setting_UIAmbientLight)
  return setting_uiambientlight_;
}
inline ::KuplungApp::Vec3* GUISettings::release_setting_uiambientlight() {
  // @@protoc_insertion_point(field_release:KuplungApp.GUISettings.Setting_UIAmbientLight)
  clear_has_setting_uiambientlight();
  ::KuplungApp::Vec3* temp = setting_uiambientlight_;
  setting_uiambientlight_ = NULL;
  return temp;
}
inline void GUISettings::set_allocated_setting_uiambientlight(::KuplungApp::Vec3* setting_uiambientlight) {
  delete setting_uiambientlight_;
  setting_uiambientlight_ = setting_uiambientlight;
  if (setting_uiambientlight) {
    set_has_setting_uiambientlight();
  } else {
    clear_has_setting_uiambientlight();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GUISettings.Setting_UIAmbientLight)
}

// required bool Setting_FixedGridWorld = 11;
inline bool GUISettings::has_setting_fixedgridworld() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GUISettings::set_has_setting_fixedgridworld() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GUISettings::clear_has_setting_fixedgridworld() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GUISettings::clear_setting_fixedgridworld() {
  setting_fixedgridworld_ = false;
  clear_has_setting_fixedgridworld();
}
inline bool GUISettings::setting_fixedgridworld() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_FixedGridWorld)
  return setting_fixedgridworld_;
}
inline void GUISettings::set_setting_fixedgridworld(bool value) {
  set_has_setting_fixedgridworld();
  setting_fixedgridworld_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_FixedGridWorld)
}

// required bool Setting_OutlineColorPickerOpen = 12;
inline bool GUISettings::has_setting_outlinecolorpickeropen() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GUISettings::set_has_setting_outlinecolorpickeropen() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GUISettings::clear_has_setting_outlinecolorpickeropen() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GUISettings::clear_setting_outlinecolorpickeropen() {
  setting_outlinecolorpickeropen_ = false;
  clear_has_setting_outlinecolorpickeropen();
}
inline bool GUISettings::setting_outlinecolorpickeropen() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_OutlineColorPickerOpen)
  return setting_outlinecolorpickeropen_;
}
inline void GUISettings::set_setting_outlinecolorpickeropen(bool value) {
  set_has_setting_outlinecolorpickeropen();
  setting_outlinecolorpickeropen_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_OutlineColorPickerOpen)
}

// required bool Setting_ShowAxisHelpers = 13;
inline bool GUISettings::has_setting_showaxishelpers() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GUISettings::set_has_setting_showaxishelpers() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GUISettings::clear_has_setting_showaxishelpers() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GUISettings::clear_setting_showaxishelpers() {
  setting_showaxishelpers_ = false;
  clear_has_setting_showaxishelpers();
}
inline bool GUISettings::setting_showaxishelpers() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_ShowAxisHelpers)
  return setting_showaxishelpers_;
}
inline void GUISettings::set_setting_showaxishelpers(bool value) {
  set_has_setting_showaxishelpers();
  setting_showaxishelpers_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_ShowAxisHelpers)
}

// required bool Settings_ShowZAxis = 14;
inline bool GUISettings::has_settings_showzaxis() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GUISettings::set_has_settings_showzaxis() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GUISettings::clear_has_settings_showzaxis() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GUISettings::clear_settings_showzaxis() {
  settings_showzaxis_ = false;
  clear_has_settings_showzaxis();
}
inline bool GUISettings::settings_showzaxis() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Settings_ShowZAxis)
  return settings_showzaxis_;
}
inline void GUISettings::set_settings_showzaxis(bool value) {
  set_has_settings_showzaxis();
  settings_showzaxis_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Settings_ShowZAxis)
}

// required bool Setting_DeferredTestMode = 15;
inline bool GUISettings::has_setting_deferredtestmode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void GUISettings::set_has_setting_deferredtestmode() {
  _has_bits_[0] |= 0x04000000u;
}
inline void GUISettings::clear_has_setting_deferredtestmode() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void GUISettings::clear_setting_deferredtestmode() {
  setting_deferredtestmode_ = false;
  clear_has_setting_deferredtestmode();
}
inline bool GUISettings::setting_deferredtestmode() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_DeferredTestMode)
  return setting_deferredtestmode_;
}
inline void GUISettings::set_setting_deferredtestmode(bool value) {
  set_has_setting_deferredtestmode();
  setting_deferredtestmode_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_DeferredTestMode)
}

// required bool Setting_DeferredTestLights = 16;
inline bool GUISettings::has_setting_deferredtestlights() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void GUISettings::set_has_setting_deferredtestlights() {
  _has_bits_[0] |= 0x08000000u;
}
inline void GUISettings::clear_has_setting_deferredtestlights() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void GUISettings::clear_setting_deferredtestlights() {
  setting_deferredtestlights_ = false;
  clear_has_setting_deferredtestlights();
}
inline bool GUISettings::setting_deferredtestlights() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_DeferredTestLights)
  return setting_deferredtestlights_;
}
inline void GUISettings::set_setting_deferredtestlights(bool value) {
  set_has_setting_deferredtestlights();
  setting_deferredtestlights_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_DeferredTestLights)
}

// required int32 Setting_LightingPass_DrawMode = 17;
inline bool GUISettings::has_setting_lightingpass_drawmode() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GUISettings::set_has_setting_lightingpass_drawmode() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GUISettings::clear_has_setting_lightingpass_drawmode() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GUISettings::clear_setting_lightingpass_drawmode() {
  setting_lightingpass_drawmode_ = 0;
  clear_has_setting_lightingpass_drawmode();
}
inline ::google::protobuf::int32 GUISettings::setting_lightingpass_drawmode() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_LightingPass_DrawMode)
  return setting_lightingpass_drawmode_;
}
inline void GUISettings::set_setting_lightingpass_drawmode(::google::protobuf::int32 value) {
  set_has_setting_lightingpass_drawmode();
  setting_lightingpass_drawmode_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_LightingPass_DrawMode)
}

// required int32 Setting_DeferredTestLightsNumber = 18;
inline bool GUISettings::has_setting_deferredtestlightsnumber() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void GUISettings::set_has_setting_deferredtestlightsnumber() {
  _has_bits_[0] |= 0x00800000u;
}
inline void GUISettings::clear_has_setting_deferredtestlightsnumber() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void GUISettings::clear_setting_deferredtestlightsnumber() {
  setting_deferredtestlightsnumber_ = 0;
  clear_has_setting_deferredtestlightsnumber();
}
inline ::google::protobuf::int32 GUISettings::setting_deferredtestlightsnumber() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_DeferredTestLightsNumber)
  return setting_deferredtestlightsnumber_;
}
inline void GUISettings::set_setting_deferredtestlightsnumber(::google::protobuf::int32 value) {
  set_has_setting_deferredtestlightsnumber();
  setting_deferredtestlightsnumber_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_DeferredTestLightsNumber)
}

// required float Setting_DeferredAmbientStrength = 19;
inline bool GUISettings::has_setting_deferredambientstrength() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GUISettings::set_has_setting_deferredambientstrength() {
  _has_bits_[0] |= 0x01000000u;
}
inline void GUISettings::clear_has_setting_deferredambientstrength() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void GUISettings::clear_setting_deferredambientstrength() {
  setting_deferredambientstrength_ = 0;
  clear_has_setting_deferredambientstrength();
}
inline float GUISettings::setting_deferredambientstrength() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_DeferredAmbientStrength)
  return setting_deferredambientstrength_;
}
inline void GUISettings::set_setting_deferredambientstrength(float value) {
  set_has_setting_deferredambientstrength();
  setting_deferredambientstrength_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_DeferredAmbientStrength)
}

// required int32 viewModelSkin = 20;
inline bool GUISettings::has_viewmodelskin() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void GUISettings::set_has_viewmodelskin() {
  _has_bits_[0] |= 0x02000000u;
}
inline void GUISettings::clear_has_viewmodelskin() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void GUISettings::clear_viewmodelskin() {
  viewmodelskin_ = 0;
  clear_has_viewmodelskin();
}
inline ::google::protobuf::int32 GUISettings::viewmodelskin() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.viewModelSkin)
  return viewmodelskin_;
}
inline void GUISettings::set_viewmodelskin(::google::protobuf::int32 value) {
  set_has_viewmodelskin();
  viewmodelskin_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.viewModelSkin)
}

// required .KuplungApp.Vec3 SolidLight_Direction = 21;
inline bool GUISettings::has_solidlight_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GUISettings::set_has_solidlight_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GUISettings::clear_has_solidlight_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GUISettings::clear_solidlight_direction() {
  if (solidlight_direction_ != NULL) solidlight_direction_->::KuplungApp::Vec3::Clear();
  clear_has_solidlight_direction();
}
inline const ::KuplungApp::Vec3& GUISettings::solidlight_direction() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_Direction)
  return solidlight_direction_ != NULL ? *solidlight_direction_
                         : *::KuplungApp::Vec3::internal_default_instance();
}
inline ::KuplungApp::Vec3* GUISettings::mutable_solidlight_direction() {
  set_has_solidlight_direction();
  if (solidlight_direction_ == NULL) {
    solidlight_direction_ = new ::KuplungApp::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.SolidLight_Direction)
  return solidlight_direction_;
}
inline ::KuplungApp::Vec3* GUISettings::release_solidlight_direction() {
  // @@protoc_insertion_point(field_release:KuplungApp.GUISettings.SolidLight_Direction)
  clear_has_solidlight_direction();
  ::KuplungApp::Vec3* temp = solidlight_direction_;
  solidlight_direction_ = NULL;
  return temp;
}
inline void GUISettings::set_allocated_solidlight_direction(::KuplungApp::Vec3* solidlight_direction) {
  delete solidlight_direction_;
  solidlight_direction_ = solidlight_direction;
  if (solidlight_direction) {
    set_has_solidlight_direction();
  } else {
    clear_has_solidlight_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GUISettings.SolidLight_Direction)
}

// required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
inline bool GUISettings::has_solidlight_materialcolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GUISettings::set_has_solidlight_materialcolor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GUISettings::clear_has_solidlight_materialcolor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GUISettings::clear_solidlight_materialcolor() {
  if (solidlight_materialcolor_ != NULL) solidlight_materialcolor_->::KuplungApp::Vec3::Clear();
  clear_has_solidlight_materialcolor();
}
inline const ::KuplungApp::Vec3& GUISettings::solidlight_materialcolor() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_MaterialColor)
  return solidlight_materialcolor_ != NULL ? *solidlight_materialcolor_
                         : *::KuplungApp::Vec3::internal_default_instance();
}
inline ::KuplungApp::Vec3* GUISettings::mutable_solidlight_materialcolor() {
  set_has_solidlight_materialcolor();
  if (solidlight_materialcolor_ == NULL) {
    solidlight_materialcolor_ = new ::KuplungApp::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.SolidLight_MaterialColor)
  return solidlight_materialcolor_;
}
inline ::KuplungApp::Vec3* GUISettings::release_solidlight_materialcolor() {
  // @@protoc_insertion_point(field_release:KuplungApp.GUISettings.SolidLight_MaterialColor)
  clear_has_solidlight_materialcolor();
  ::KuplungApp::Vec3* temp = solidlight_materialcolor_;
  solidlight_materialcolor_ = NULL;
  return temp;
}
inline void GUISettings::set_allocated_solidlight_materialcolor(::KuplungApp::Vec3* solidlight_materialcolor) {
  delete solidlight_materialcolor_;
  solidlight_materialcolor_ = solidlight_materialcolor;
  if (solidlight_materialcolor) {
    set_has_solidlight_materialcolor();
  } else {
    clear_has_solidlight_materialcolor();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GUISettings.SolidLight_MaterialColor)
}

// required .KuplungApp.Vec3 SolidLight_Ambient = 23;
inline bool GUISettings::has_solidlight_ambient() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GUISettings::set_has_solidlight_ambient() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GUISettings::clear_has_solidlight_ambient() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GUISettings::clear_solidlight_ambient() {
  if (solidlight_ambient_ != NULL) solidlight_ambient_->::KuplungApp::Vec3::Clear();
  clear_has_solidlight_ambient();
}
inline const ::KuplungApp::Vec3& GUISettings::solidlight_ambient() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_Ambient)
  return solidlight_ambient_ != NULL ? *solidlight_ambient_
                         : *::KuplungApp::Vec3::internal_default_instance();
}
inline ::KuplungApp::Vec3* GUISettings::mutable_solidlight_ambient() {
  set_has_solidlight_ambient();
  if (solidlight_ambient_ == NULL) {
    solidlight_ambient_ = new ::KuplungApp::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.SolidLight_Ambient)
  return solidlight_ambient_;
}
inline ::KuplungApp::Vec3* GUISettings::release_solidlight_ambient() {
  // @@protoc_insertion_point(field_release:KuplungApp.GUISettings.SolidLight_Ambient)
  clear_has_solidlight_ambient();
  ::KuplungApp::Vec3* temp = solidlight_ambient_;
  solidlight_ambient_ = NULL;
  return temp;
}
inline void GUISettings::set_allocated_solidlight_ambient(::KuplungApp::Vec3* solidlight_ambient) {
  delete solidlight_ambient_;
  solidlight_ambient_ = solidlight_ambient;
  if (solidlight_ambient) {
    set_has_solidlight_ambient();
  } else {
    clear_has_solidlight_ambient();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GUISettings.SolidLight_Ambient)
}

// required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
inline bool GUISettings::has_solidlight_diffuse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GUISettings::set_has_solidlight_diffuse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GUISettings::clear_has_solidlight_diffuse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GUISettings::clear_solidlight_diffuse() {
  if (solidlight_diffuse_ != NULL) solidlight_diffuse_->::KuplungApp::Vec3::Clear();
  clear_has_solidlight_diffuse();
}
inline const ::KuplungApp::Vec3& GUISettings::solidlight_diffuse() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_Diffuse)
  return solidlight_diffuse_ != NULL ? *solidlight_diffuse_
                         : *::KuplungApp::Vec3::internal_default_instance();
}
inline ::KuplungApp::Vec3* GUISettings::mutable_solidlight_diffuse() {
  set_has_solidlight_diffuse();
  if (solidlight_diffuse_ == NULL) {
    solidlight_diffuse_ = new ::KuplungApp::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.SolidLight_Diffuse)
  return solidlight_diffuse_;
}
inline ::KuplungApp::Vec3* GUISettings::release_solidlight_diffuse() {
  // @@protoc_insertion_point(field_release:KuplungApp.GUISettings.SolidLight_Diffuse)
  clear_has_solidlight_diffuse();
  ::KuplungApp::Vec3* temp = solidlight_diffuse_;
  solidlight_diffuse_ = NULL;
  return temp;
}
inline void GUISettings::set_allocated_solidlight_diffuse(::KuplungApp::Vec3* solidlight_diffuse) {
  delete solidlight_diffuse_;
  solidlight_diffuse_ = solidlight_diffuse;
  if (solidlight_diffuse) {
    set_has_solidlight_diffuse();
  } else {
    clear_has_solidlight_diffuse();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GUISettings.SolidLight_Diffuse)
}

// required .KuplungApp.Vec3 SolidLight_Specular = 25;
inline bool GUISettings::has_solidlight_specular() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GUISettings::set_has_solidlight_specular() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GUISettings::clear_has_solidlight_specular() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GUISettings::clear_solidlight_specular() {
  if (solidlight_specular_ != NULL) solidlight_specular_->::KuplungApp::Vec3::Clear();
  clear_has_solidlight_specular();
}
inline const ::KuplungApp::Vec3& GUISettings::solidlight_specular() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_Specular)
  return solidlight_specular_ != NULL ? *solidlight_specular_
                         : *::KuplungApp::Vec3::internal_default_instance();
}
inline ::KuplungApp::Vec3* GUISettings::mutable_solidlight_specular() {
  set_has_solidlight_specular();
  if (solidlight_specular_ == NULL) {
    solidlight_specular_ = new ::KuplungApp::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.SolidLight_Specular)
  return solidlight_specular_;
}
inline ::KuplungApp::Vec3* GUISettings::release_solidlight_specular() {
  // @@protoc_insertion_point(field_release:KuplungApp.GUISettings.SolidLight_Specular)
  clear_has_solidlight_specular();
  ::KuplungApp::Vec3* temp = solidlight_specular_;
  solidlight_specular_ = NULL;
  return temp;
}
inline void GUISettings::set_allocated_solidlight_specular(::KuplungApp::Vec3* solidlight_specular) {
  delete solidlight_specular_;
  solidlight_specular_ = solidlight_specular;
  if (solidlight_specular) {
    set_has_solidlight_specular();
  } else {
    clear_has_solidlight_specular();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GUISettings.SolidLight_Specular)
}

// required float SolidLight_Ambient_Strength = 26;
inline bool GUISettings::has_solidlight_ambient_strength() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void GUISettings::set_has_solidlight_ambient_strength() {
  _has_bits_[0] |= 0x40000000u;
}
inline void GUISettings::clear_has_solidlight_ambient_strength() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void GUISettings::clear_solidlight_ambient_strength() {
  solidlight_ambient_strength_ = 0;
  clear_has_solidlight_ambient_strength();
}
inline float GUISettings::solidlight_ambient_strength() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_Ambient_Strength)
  return solidlight_ambient_strength_;
}
inline void GUISettings::set_solidlight_ambient_strength(float value) {
  set_has_solidlight_ambient_strength();
  solidlight_ambient_strength_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.SolidLight_Ambient_Strength)
}

// required float SolidLight_Diffuse_Strength = 27;
inline bool GUISettings::has_solidlight_diffuse_strength() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void GUISettings::set_has_solidlight_diffuse_strength() {
  _has_bits_[0] |= 0x80000000u;
}
inline void GUISettings::clear_has_solidlight_diffuse_strength() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void GUISettings::clear_solidlight_diffuse_strength() {
  solidlight_diffuse_strength_ = 0;
  clear_has_solidlight_diffuse_strength();
}
inline float GUISettings::solidlight_diffuse_strength() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_Diffuse_Strength)
  return solidlight_diffuse_strength_;
}
inline void GUISettings::set_solidlight_diffuse_strength(float value) {
  set_has_solidlight_diffuse_strength();
  solidlight_diffuse_strength_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.SolidLight_Diffuse_Strength)
}

// required float SolidLight_Specular_Strength = 28;
inline bool GUISettings::has_solidlight_specular_strength() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void GUISettings::set_has_solidlight_specular_strength() {
  _has_bits_[1] |= 0x00000001u;
}
inline void GUISettings::clear_has_solidlight_specular_strength() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void GUISettings::clear_solidlight_specular_strength() {
  solidlight_specular_strength_ = 0;
  clear_has_solidlight_specular_strength();
}
inline float GUISettings::solidlight_specular_strength() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_Specular_Strength)
  return solidlight_specular_strength_;
}
inline void GUISettings::set_solidlight_specular_strength(float value) {
  set_has_solidlight_specular_strength();
  solidlight_specular_strength_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.SolidLight_Specular_Strength)
}

// required bool SolidLight_MaterialColor_ColorPicker = 29;
inline bool GUISettings::has_solidlight_materialcolor_colorpicker() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void GUISettings::set_has_solidlight_materialcolor_colorpicker() {
  _has_bits_[0] |= 0x10000000u;
}
inline void GUISettings::clear_has_solidlight_materialcolor_colorpicker() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void GUISettings::clear_solidlight_materialcolor_colorpicker() {
  solidlight_materialcolor_colorpicker_ = false;
  clear_has_solidlight_materialcolor_colorpicker();
}
inline bool GUISettings::solidlight_materialcolor_colorpicker() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_MaterialColor_ColorPicker)
  return solidlight_materialcolor_colorpicker_;
}
inline void GUISettings::set_solidlight_materialcolor_colorpicker(bool value) {
  set_has_solidlight_materialcolor_colorpicker();
  solidlight_materialcolor_colorpicker_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.SolidLight_MaterialColor_ColorPicker)
}

// required bool SolidLight_Ambient_ColorPicker = 30;
inline bool GUISettings::has_solidlight_ambient_colorpicker() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void GUISettings::set_has_solidlight_ambient_colorpicker() {
  _has_bits_[0] |= 0x20000000u;
}
inline void GUISettings::clear_has_solidlight_ambient_colorpicker() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void GUISettings::clear_solidlight_ambient_colorpicker() {
  solidlight_ambient_colorpicker_ = false;
  clear_has_solidlight_ambient_colorpicker();
}
inline bool GUISettings::solidlight_ambient_colorpicker() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_Ambient_ColorPicker)
  return solidlight_ambient_colorpicker_;
}
inline void GUISettings::set_solidlight_ambient_colorpicker(bool value) {
  set_has_solidlight_ambient_colorpicker();
  solidlight_ambient_colorpicker_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.SolidLight_Ambient_ColorPicker)
}

// required bool SolidLight_Diffuse_ColorPicker = 31;
inline bool GUISettings::has_solidlight_diffuse_colorpicker() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void GUISettings::set_has_solidlight_diffuse_colorpicker() {
  _has_bits_[1] |= 0x00000002u;
}
inline void GUISettings::clear_has_solidlight_diffuse_colorpicker() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void GUISettings::clear_solidlight_diffuse_colorpicker() {
  solidlight_diffuse_colorpicker_ = false;
  clear_has_solidlight_diffuse_colorpicker();
}
inline bool GUISettings::solidlight_diffuse_colorpicker() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_Diffuse_ColorPicker)
  return solidlight_diffuse_colorpicker_;
}
inline void GUISettings::set_solidlight_diffuse_colorpicker(bool value) {
  set_has_solidlight_diffuse_colorpicker();
  solidlight_diffuse_colorpicker_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.SolidLight_Diffuse_ColorPicker)
}

// required bool SolidLight_Specular_ColorPicker = 32;
inline bool GUISettings::has_solidlight_specular_colorpicker() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void GUISettings::set_has_solidlight_specular_colorpicker() {
  _has_bits_[1] |= 0x00000004u;
}
inline void GUISettings::clear_has_solidlight_specular_colorpicker() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void GUISettings::clear_solidlight_specular_colorpicker() {
  solidlight_specular_colorpicker_ = false;
  clear_has_solidlight_specular_colorpicker();
}
inline bool GUISettings::solidlight_specular_colorpicker() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.SolidLight_Specular_ColorPicker)
  return solidlight_specular_colorpicker_;
}
inline void GUISettings::set_solidlight_specular_colorpicker(bool value) {
  set_has_solidlight_specular_colorpicker();
  solidlight_specular_colorpicker_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.SolidLight_Specular_ColorPicker)
}

// required bool Setting_ShowTerrain = 33;
inline bool GUISettings::has_setting_showterrain() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void GUISettings::set_has_setting_showterrain() {
  _has_bits_[1] |= 0x00000008u;
}
inline void GUISettings::clear_has_setting_showterrain() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void GUISettings::clear_setting_showterrain() {
  setting_showterrain_ = false;
  clear_has_setting_showterrain();
}
inline bool GUISettings::setting_showterrain() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_ShowTerrain)
  return setting_showterrain_;
}
inline void GUISettings::set_setting_showterrain(bool value) {
  set_has_setting_showterrain();
  setting_showterrain_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_ShowTerrain)
}

// required bool Setting_TerrainModel = 34;
inline bool GUISettings::has_setting_terrainmodel() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void GUISettings::set_has_setting_terrainmodel() {
  _has_bits_[1] |= 0x00000010u;
}
inline void GUISettings::clear_has_setting_terrainmodel() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void GUISettings::clear_setting_terrainmodel() {
  setting_terrainmodel_ = false;
  clear_has_setting_terrainmodel();
}
inline bool GUISettings::setting_terrainmodel() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_TerrainModel)
  return setting_terrainmodel_;
}
inline void GUISettings::set_setting_terrainmodel(bool value) {
  set_has_setting_terrainmodel();
  setting_terrainmodel_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_TerrainModel)
}

// required bool Setting_TerrainAnimateX = 35;
inline bool GUISettings::has_setting_terrainanimatex() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void GUISettings::set_has_setting_terrainanimatex() {
  _has_bits_[1] |= 0x00000040u;
}
inline void GUISettings::clear_has_setting_terrainanimatex() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void GUISettings::clear_setting_terrainanimatex() {
  setting_terrainanimatex_ = false;
  clear_has_setting_terrainanimatex();
}
inline bool GUISettings::setting_terrainanimatex() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_TerrainAnimateX)
  return setting_terrainanimatex_;
}
inline void GUISettings::set_setting_terrainanimatex(bool value) {
  set_has_setting_terrainanimatex();
  setting_terrainanimatex_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_TerrainAnimateX)
}

// required bool Setting_TerrainAnimateY = 36;
inline bool GUISettings::has_setting_terrainanimatey() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void GUISettings::set_has_setting_terrainanimatey() {
  _has_bits_[1] |= 0x00000080u;
}
inline void GUISettings::clear_has_setting_terrainanimatey() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void GUISettings::clear_setting_terrainanimatey() {
  setting_terrainanimatey_ = false;
  clear_has_setting_terrainanimatey();
}
inline bool GUISettings::setting_terrainanimatey() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_TerrainAnimateY)
  return setting_terrainanimatey_;
}
inline void GUISettings::set_setting_terrainanimatey(bool value) {
  set_has_setting_terrainanimatey();
  setting_terrainanimatey_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_TerrainAnimateY)
}

// required string heightmapImage = 37;
inline bool GUISettings::has_heightmapimage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GUISettings::set_has_heightmapimage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GUISettings::clear_has_heightmapimage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GUISettings::clear_heightmapimage() {
  heightmapimage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_heightmapimage();
}
inline const ::std::string& GUISettings::heightmapimage() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.heightmapImage)
  return heightmapimage_.GetNoArena();
}
inline void GUISettings::set_heightmapimage(const ::std::string& value) {
  set_has_heightmapimage();
  heightmapimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.heightmapImage)
}
#if LANG_CXX11
inline void GUISettings::set_heightmapimage(::std::string&& value) {
  set_has_heightmapimage();
  heightmapimage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.GUISettings.heightmapImage)
}
#endif
inline void GUISettings::set_heightmapimage(const char* value) {
  set_has_heightmapimage();
  heightmapimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.GUISettings.heightmapImage)
}
inline void GUISettings::set_heightmapimage(const char* value, size_t size) {
  set_has_heightmapimage();
  heightmapimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.GUISettings.heightmapImage)
}
inline ::std::string* GUISettings::mutable_heightmapimage() {
  set_has_heightmapimage();
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.heightmapImage)
  return heightmapimage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GUISettings::release_heightmapimage() {
  // @@protoc_insertion_point(field_release:KuplungApp.GUISettings.heightmapImage)
  clear_has_heightmapimage();
  return heightmapimage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUISettings::set_allocated_heightmapimage(::std::string* heightmapimage) {
  if (heightmapimage != NULL) {
    set_has_heightmapimage();
  } else {
    clear_has_heightmapimage();
  }
  heightmapimage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heightmapimage);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GUISettings.heightmapImage)
}

// required int32 Setting_TerrainWidth = 38;
inline bool GUISettings::has_setting_terrainwidth() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void GUISettings::set_has_setting_terrainwidth() {
  _has_bits_[1] |= 0x00000020u;
}
inline void GUISettings::clear_has_setting_terrainwidth() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void GUISettings::clear_setting_terrainwidth() {
  setting_terrainwidth_ = 0;
  clear_has_setting_terrainwidth();
}
inline ::google::protobuf::int32 GUISettings::setting_terrainwidth() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_TerrainWidth)
  return setting_terrainwidth_;
}
inline void GUISettings::set_setting_terrainwidth(::google::protobuf::int32 value) {
  set_has_setting_terrainwidth();
  setting_terrainwidth_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_TerrainWidth)
}

// required int32 Setting_TerrainHeight = 39;
inline bool GUISettings::has_setting_terrainheight() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void GUISettings::set_has_setting_terrainheight() {
  _has_bits_[1] |= 0x00000400u;
}
inline void GUISettings::clear_has_setting_terrainheight() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void GUISettings::clear_setting_terrainheight() {
  setting_terrainheight_ = 0;
  clear_has_setting_terrainheight();
}
inline ::google::protobuf::int32 GUISettings::setting_terrainheight() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_TerrainHeight)
  return setting_terrainheight_;
}
inline void GUISettings::set_setting_terrainheight(::google::protobuf::int32 value) {
  set_has_setting_terrainheight();
  setting_terrainheight_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_TerrainHeight)
}

// required bool Setting_ShowSpaceship = 40;
inline bool GUISettings::has_setting_showspaceship() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void GUISettings::set_has_setting_showspaceship() {
  _has_bits_[1] |= 0x00000100u;
}
inline void GUISettings::clear_has_setting_showspaceship() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void GUISettings::clear_setting_showspaceship() {
  setting_showspaceship_ = false;
  clear_has_setting_showspaceship();
}
inline bool GUISettings::setting_showspaceship() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_ShowSpaceship)
  return setting_showspaceship_;
}
inline void GUISettings::set_setting_showspaceship(bool value) {
  set_has_setting_showspaceship();
  setting_showspaceship_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_ShowSpaceship)
}

// required bool Setting_GenerateSpaceship = 41;
inline bool GUISettings::has_setting_generatespaceship() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void GUISettings::set_has_setting_generatespaceship() {
  _has_bits_[1] |= 0x00000200u;
}
inline void GUISettings::clear_has_setting_generatespaceship() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void GUISettings::clear_setting_generatespaceship() {
  setting_generatespaceship_ = false;
  clear_has_setting_generatespaceship();
}
inline bool GUISettings::setting_generatespaceship() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.Setting_GenerateSpaceship)
  return setting_generatespaceship_;
}
inline void GUISettings::set_setting_generatespaceship(bool value) {
  set_has_setting_generatespaceship();
  setting_generatespaceship_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GUISettings.Setting_GenerateSpaceship)
}

// required .KuplungApp.CameraSettings camera = 42;
inline bool GUISettings::has_camera() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GUISettings::set_has_camera() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GUISettings::clear_has_camera() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GUISettings::clear_camera() {
  if (camera_ != NULL) camera_->::KuplungApp::CameraSettings::Clear();
  clear_has_camera();
}
inline const ::KuplungApp::CameraSettings& GUISettings::camera() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.camera)
  return camera_ != NULL ? *camera_
                         : *::KuplungApp::CameraSettings::internal_default_instance();
}
inline ::KuplungApp::CameraSettings* GUISettings::mutable_camera() {
  set_has_camera();
  if (camera_ == NULL) {
    camera_ = new ::KuplungApp::CameraSettings;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.camera)
  return camera_;
}
inline ::KuplungApp::CameraSettings* GUISettings::release_camera() {
  // @@protoc_insertion_point(field_release:KuplungApp.GUISettings.camera)
  clear_has_camera();
  ::KuplungApp::CameraSettings* temp = camera_;
  camera_ = NULL;
  return temp;
}
inline void GUISettings::set_allocated_camera(::KuplungApp::CameraSettings* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    set_has_camera();
  } else {
    clear_has_camera();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GUISettings.camera)
}

// required .KuplungApp.GridSettings grid = 43;
inline bool GUISettings::has_grid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GUISettings::set_has_grid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GUISettings::clear_has_grid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GUISettings::clear_grid() {
  if (grid_ != NULL) grid_->::KuplungApp::GridSettings::Clear();
  clear_has_grid();
}
inline const ::KuplungApp::GridSettings& GUISettings::grid() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.grid)
  return grid_ != NULL ? *grid_
                         : *::KuplungApp::GridSettings::internal_default_instance();
}
inline ::KuplungApp::GridSettings* GUISettings::mutable_grid() {
  set_has_grid();
  if (grid_ == NULL) {
    grid_ = new ::KuplungApp::GridSettings;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.grid)
  return grid_;
}
inline ::KuplungApp::GridSettings* GUISettings::release_grid() {
  // @@protoc_insertion_point(field_release:KuplungApp.GUISettings.grid)
  clear_has_grid();
  ::KuplungApp::GridSettings* temp = grid_;
  grid_ = NULL;
  return temp;
}
inline void GUISettings::set_allocated_grid(::KuplungApp::GridSettings* grid) {
  delete grid_;
  grid_ = grid;
  if (grid) {
    set_has_grid();
  } else {
    clear_has_grid();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GUISettings.grid)
}

// repeated .KuplungApp.LightObject lights = 44;
inline int GUISettings::lights_size() const {
  return lights_.size();
}
inline void GUISettings::clear_lights() {
  lights_.Clear();
}
inline const ::KuplungApp::LightObject& GUISettings::lights(int index) const {
  // @@protoc_insertion_point(field_get:KuplungApp.GUISettings.lights)
  return lights_.Get(index);
}
inline ::KuplungApp::LightObject* GUISettings::mutable_lights(int index) {
  // @@protoc_insertion_point(field_mutable:KuplungApp.GUISettings.lights)
  return lights_.Mutable(index);
}
inline ::KuplungApp::LightObject* GUISettings::add_lights() {
  // @@protoc_insertion_point(field_add:KuplungApp.GUISettings.lights)
  return lights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::KuplungApp::LightObject >*
GUISettings::mutable_lights() {
  // @@protoc_insertion_point(field_mutable_list:KuplungApp.GUISettings.lights)
  return &lights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::KuplungApp::LightObject >&
GUISettings::lights() const {
  // @@protoc_insertion_point(field_list:KuplungApp.GUISettings.lights)
  return lights_;
}

// -------------------------------------------------------------------

// CameraSettings

// required .KuplungApp.Vec3 cameraPosition = 1;
inline bool CameraSettings::has_cameraposition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraSettings::set_has_cameraposition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraSettings::clear_has_cameraposition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraSettings::clear_cameraposition() {
  if (cameraposition_ != NULL) cameraposition_->::KuplungApp::Vec3::Clear();
  clear_has_cameraposition();
}
inline const ::KuplungApp::Vec3& CameraSettings::cameraposition() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.cameraPosition)
  return cameraposition_ != NULL ? *cameraposition_
                         : *::KuplungApp::Vec3::internal_default_instance();
}
inline ::KuplungApp::Vec3* CameraSettings::mutable_cameraposition() {
  set_has_cameraposition();
  if (cameraposition_ == NULL) {
    cameraposition_ = new ::KuplungApp::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.cameraPosition)
  return cameraposition_;
}
inline ::KuplungApp::Vec3* CameraSettings::release_cameraposition() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.cameraPosition)
  clear_has_cameraposition();
  ::KuplungApp::Vec3* temp = cameraposition_;
  cameraposition_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_cameraposition(::KuplungApp::Vec3* cameraposition) {
  delete cameraposition_;
  cameraposition_ = cameraposition;
  if (cameraposition) {
    set_has_cameraposition();
  } else {
    clear_has_cameraposition();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.cameraPosition)
}

// required .KuplungApp.Vec3 View_Eye = 2;
inline bool CameraSettings::has_view_eye() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraSettings::set_has_view_eye() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraSettings::clear_has_view_eye() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraSettings::clear_view_eye() {
  if (view_eye_ != NULL) view_eye_->::KuplungApp::Vec3::Clear();
  clear_has_view_eye();
}
inline const ::KuplungApp::Vec3& CameraSettings::view_eye() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.View_Eye)
  return view_eye_ != NULL ? *view_eye_
                         : *::KuplungApp::Vec3::internal_default_instance();
}
inline ::KuplungApp::Vec3* CameraSettings::mutable_view_eye() {
  set_has_view_eye();
  if (view_eye_ == NULL) {
    view_eye_ = new ::KuplungApp::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.View_Eye)
  return view_eye_;
}
inline ::KuplungApp::Vec3* CameraSettings::release_view_eye() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.View_Eye)
  clear_has_view_eye();
  ::KuplungApp::Vec3* temp = view_eye_;
  view_eye_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_view_eye(::KuplungApp::Vec3* view_eye) {
  delete view_eye_;
  view_eye_ = view_eye;
  if (view_eye) {
    set_has_view_eye();
  } else {
    clear_has_view_eye();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.View_Eye)
}

// required .KuplungApp.Vec3 View_Center = 3;
inline bool CameraSettings::has_view_center() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraSettings::set_has_view_center() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraSettings::clear_has_view_center() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraSettings::clear_view_center() {
  if (view_center_ != NULL) view_center_->::KuplungApp::Vec3::Clear();
  clear_has_view_center();
}
inline const ::KuplungApp::Vec3& CameraSettings::view_center() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.View_Center)
  return view_center_ != NULL ? *view_center_
                         : *::KuplungApp::Vec3::internal_default_instance();
}
inline ::KuplungApp::Vec3* CameraSettings::mutable_view_center() {
  set_has_view_center();
  if (view_center_ == NULL) {
    view_center_ = new ::KuplungApp::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.View_Center)
  return view_center_;
}
inline ::KuplungApp::Vec3* CameraSettings::release_view_center() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.View_Center)
  clear_has_view_center();
  ::KuplungApp::Vec3* temp = view_center_;
  view_center_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_view_center(::KuplungApp::Vec3* view_center) {
  delete view_center_;
  view_center_ = view_center;
  if (view_center) {
    set_has_view_center();
  } else {
    clear_has_view_center();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.View_Center)
}

// required .KuplungApp.Vec3 View_Up = 4;
inline bool CameraSettings::has_view_up() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraSettings::set_has_view_up() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraSettings::clear_has_view_up() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraSettings::clear_view_up() {
  if (view_up_ != NULL) view_up_->::KuplungApp::Vec3::Clear();
  clear_has_view_up();
}
inline const ::KuplungApp::Vec3& CameraSettings::view_up() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.View_Up)
  return view_up_ != NULL ? *view_up_
                         : *::KuplungApp::Vec3::internal_default_instance();
}
inline ::KuplungApp::Vec3* CameraSettings::mutable_view_up() {
  set_has_view_up();
  if (view_up_ == NULL) {
    view_up_ = new ::KuplungApp::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.View_Up)
  return view_up_;
}
inline ::KuplungApp::Vec3* CameraSettings::release_view_up() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.View_Up)
  clear_has_view_up();
  ::KuplungApp::Vec3* temp = view_up_;
  view_up_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_view_up(::KuplungApp::Vec3* view_up) {
  delete view_up_;
  view_up_ = view_up;
  if (view_up) {
    set_has_view_up();
  } else {
    clear_has_view_up();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.View_Up)
}

// required .KuplungApp.ObjectCoordinate positionX = 5;
inline bool CameraSettings::has_positionx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraSettings::set_has_positionx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraSettings::clear_has_positionx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraSettings::clear_positionx() {
  if (positionx_ != NULL) positionx_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positionx();
}
inline const ::KuplungApp::ObjectCoordinate& CameraSettings::positionx() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.positionX)
  return positionx_ != NULL ? *positionx_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::mutable_positionx() {
  set_has_positionx();
  if (positionx_ == NULL) {
    positionx_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.positionX)
  return positionx_;
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::release_positionx() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.positionX)
  clear_has_positionx();
  ::KuplungApp::ObjectCoordinate* temp = positionx_;
  positionx_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_positionx(::KuplungApp::ObjectCoordinate* positionx) {
  delete positionx_;
  positionx_ = positionx;
  if (positionx) {
    set_has_positionx();
  } else {
    clear_has_positionx();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.positionX)
}

// required .KuplungApp.ObjectCoordinate positionY = 6;
inline bool CameraSettings::has_positiony() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraSettings::set_has_positiony() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraSettings::clear_has_positiony() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraSettings::clear_positiony() {
  if (positiony_ != NULL) positiony_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positiony();
}
inline const ::KuplungApp::ObjectCoordinate& CameraSettings::positiony() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.positionY)
  return positiony_ != NULL ? *positiony_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::mutable_positiony() {
  set_has_positiony();
  if (positiony_ == NULL) {
    positiony_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.positionY)
  return positiony_;
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::release_positiony() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.positionY)
  clear_has_positiony();
  ::KuplungApp::ObjectCoordinate* temp = positiony_;
  positiony_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_positiony(::KuplungApp::ObjectCoordinate* positiony) {
  delete positiony_;
  positiony_ = positiony;
  if (positiony) {
    set_has_positiony();
  } else {
    clear_has_positiony();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.positionY)
}

// required .KuplungApp.ObjectCoordinate positionZ = 7;
inline bool CameraSettings::has_positionz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraSettings::set_has_positionz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraSettings::clear_has_positionz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraSettings::clear_positionz() {
  if (positionz_ != NULL) positionz_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positionz();
}
inline const ::KuplungApp::ObjectCoordinate& CameraSettings::positionz() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.positionZ)
  return positionz_ != NULL ? *positionz_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::mutable_positionz() {
  set_has_positionz();
  if (positionz_ == NULL) {
    positionz_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.positionZ)
  return positionz_;
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::release_positionz() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.positionZ)
  clear_has_positionz();
  ::KuplungApp::ObjectCoordinate* temp = positionz_;
  positionz_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_positionz(::KuplungApp::ObjectCoordinate* positionz) {
  delete positionz_;
  positionz_ = positionz;
  if (positionz) {
    set_has_positionz();
  } else {
    clear_has_positionz();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.positionZ)
}

// required .KuplungApp.ObjectCoordinate rotateX = 8;
inline bool CameraSettings::has_rotatex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraSettings::set_has_rotatex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraSettings::clear_has_rotatex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraSettings::clear_rotatex() {
  if (rotatex_ != NULL) rotatex_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatex();
}
inline const ::KuplungApp::ObjectCoordinate& CameraSettings::rotatex() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.rotateX)
  return rotatex_ != NULL ? *rotatex_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::mutable_rotatex() {
  set_has_rotatex();
  if (rotatex_ == NULL) {
    rotatex_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.rotateX)
  return rotatex_;
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::release_rotatex() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.rotateX)
  clear_has_rotatex();
  ::KuplungApp::ObjectCoordinate* temp = rotatex_;
  rotatex_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_rotatex(::KuplungApp::ObjectCoordinate* rotatex) {
  delete rotatex_;
  rotatex_ = rotatex;
  if (rotatex) {
    set_has_rotatex();
  } else {
    clear_has_rotatex();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.rotateX)
}

// required .KuplungApp.ObjectCoordinate rotateY = 9;
inline bool CameraSettings::has_rotatey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraSettings::set_has_rotatey() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraSettings::clear_has_rotatey() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraSettings::clear_rotatey() {
  if (rotatey_ != NULL) rotatey_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatey();
}
inline const ::KuplungApp::ObjectCoordinate& CameraSettings::rotatey() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.rotateY)
  return rotatey_ != NULL ? *rotatey_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::mutable_rotatey() {
  set_has_rotatey();
  if (rotatey_ == NULL) {
    rotatey_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.rotateY)
  return rotatey_;
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::release_rotatey() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.rotateY)
  clear_has_rotatey();
  ::KuplungApp::ObjectCoordinate* temp = rotatey_;
  rotatey_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_rotatey(::KuplungApp::ObjectCoordinate* rotatey) {
  delete rotatey_;
  rotatey_ = rotatey;
  if (rotatey) {
    set_has_rotatey();
  } else {
    clear_has_rotatey();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.rotateY)
}

// required .KuplungApp.ObjectCoordinate rotateZ = 10;
inline bool CameraSettings::has_rotatez() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraSettings::set_has_rotatez() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraSettings::clear_has_rotatez() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraSettings::clear_rotatez() {
  if (rotatez_ != NULL) rotatez_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatez();
}
inline const ::KuplungApp::ObjectCoordinate& CameraSettings::rotatez() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.rotateZ)
  return rotatez_ != NULL ? *rotatez_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::mutable_rotatez() {
  set_has_rotatez();
  if (rotatez_ == NULL) {
    rotatez_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.rotateZ)
  return rotatez_;
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::release_rotatez() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.rotateZ)
  clear_has_rotatez();
  ::KuplungApp::ObjectCoordinate* temp = rotatez_;
  rotatez_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_rotatez(::KuplungApp::ObjectCoordinate* rotatez) {
  delete rotatez_;
  rotatez_ = rotatez;
  if (rotatez) {
    set_has_rotatez();
  } else {
    clear_has_rotatez();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.rotateZ)
}

// required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
inline bool CameraSettings::has_rotatecenterx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraSettings::set_has_rotatecenterx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraSettings::clear_has_rotatecenterx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraSettings::clear_rotatecenterx() {
  if (rotatecenterx_ != NULL) rotatecenterx_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatecenterx();
}
inline const ::KuplungApp::ObjectCoordinate& CameraSettings::rotatecenterx() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.rotateCenterX)
  return rotatecenterx_ != NULL ? *rotatecenterx_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::mutable_rotatecenterx() {
  set_has_rotatecenterx();
  if (rotatecenterx_ == NULL) {
    rotatecenterx_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.rotateCenterX)
  return rotatecenterx_;
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::release_rotatecenterx() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.rotateCenterX)
  clear_has_rotatecenterx();
  ::KuplungApp::ObjectCoordinate* temp = rotatecenterx_;
  rotatecenterx_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_rotatecenterx(::KuplungApp::ObjectCoordinate* rotatecenterx) {
  delete rotatecenterx_;
  rotatecenterx_ = rotatecenterx;
  if (rotatecenterx) {
    set_has_rotatecenterx();
  } else {
    clear_has_rotatecenterx();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.rotateCenterX)
}

// required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
inline bool CameraSettings::has_rotatecentery() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraSettings::set_has_rotatecentery() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CameraSettings::clear_has_rotatecentery() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CameraSettings::clear_rotatecentery() {
  if (rotatecentery_ != NULL) rotatecentery_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatecentery();
}
inline const ::KuplungApp::ObjectCoordinate& CameraSettings::rotatecentery() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.rotateCenterY)
  return rotatecentery_ != NULL ? *rotatecentery_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::mutable_rotatecentery() {
  set_has_rotatecentery();
  if (rotatecentery_ == NULL) {
    rotatecentery_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.rotateCenterY)
  return rotatecentery_;
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::release_rotatecentery() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.rotateCenterY)
  clear_has_rotatecentery();
  ::KuplungApp::ObjectCoordinate* temp = rotatecentery_;
  rotatecentery_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_rotatecentery(::KuplungApp::ObjectCoordinate* rotatecentery) {
  delete rotatecentery_;
  rotatecentery_ = rotatecentery;
  if (rotatecentery) {
    set_has_rotatecentery();
  } else {
    clear_has_rotatecentery();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.rotateCenterY)
}

// required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
inline bool CameraSettings::has_rotatecenterz() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CameraSettings::set_has_rotatecenterz() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CameraSettings::clear_has_rotatecenterz() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CameraSettings::clear_rotatecenterz() {
  if (rotatecenterz_ != NULL) rotatecenterz_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatecenterz();
}
inline const ::KuplungApp::ObjectCoordinate& CameraSettings::rotatecenterz() const {
  // @@protoc_insertion_point(field_get:KuplungApp.CameraSettings.rotateCenterZ)
  return rotatecenterz_ != NULL ? *rotatecenterz_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::mutable_rotatecenterz() {
  set_has_rotatecenterz();
  if (rotatecenterz_ == NULL) {
    rotatecenterz_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.CameraSettings.rotateCenterZ)
  return rotatecenterz_;
}
inline ::KuplungApp::ObjectCoordinate* CameraSettings::release_rotatecenterz() {
  // @@protoc_insertion_point(field_release:KuplungApp.CameraSettings.rotateCenterZ)
  clear_has_rotatecenterz();
  ::KuplungApp::ObjectCoordinate* temp = rotatecenterz_;
  rotatecenterz_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_rotatecenterz(::KuplungApp::ObjectCoordinate* rotatecenterz) {
  delete rotatecenterz_;
  rotatecenterz_ = rotatecenterz;
  if (rotatecenterz) {
    set_has_rotatecenterz();
  } else {
    clear_has_rotatecenterz();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.CameraSettings.rotateCenterZ)
}

// -------------------------------------------------------------------

// GridSettings

// required bool actAsMirror = 1;
inline bool GridSettings::has_actasmirror() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GridSettings::set_has_actasmirror() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GridSettings::clear_has_actasmirror() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GridSettings::clear_actasmirror() {
  actasmirror_ = false;
  clear_has_actasmirror();
}
inline bool GridSettings::actasmirror() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.actAsMirror)
  return actasmirror_;
}
inline void GridSettings::set_actasmirror(bool value) {
  set_has_actasmirror();
  actasmirror_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GridSettings.actAsMirror)
}

// required int32 gridSize = 2;
inline bool GridSettings::has_gridsize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GridSettings::set_has_gridsize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GridSettings::clear_has_gridsize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GridSettings::clear_gridsize() {
  gridsize_ = 0;
  clear_has_gridsize();
}
inline ::google::protobuf::int32 GridSettings::gridsize() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.gridSize)
  return gridsize_;
}
inline void GridSettings::set_gridsize(::google::protobuf::int32 value) {
  set_has_gridsize();
  gridsize_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GridSettings.gridSize)
}

// required .KuplungApp.ObjectCoordinate positionX = 3;
inline bool GridSettings::has_positionx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridSettings::set_has_positionx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridSettings::clear_has_positionx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridSettings::clear_positionx() {
  if (positionx_ != NULL) positionx_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positionx();
}
inline const ::KuplungApp::ObjectCoordinate& GridSettings::positionx() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.positionX)
  return positionx_ != NULL ? *positionx_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::mutable_positionx() {
  set_has_positionx();
  if (positionx_ == NULL) {
    positionx_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GridSettings.positionX)
  return positionx_;
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::release_positionx() {
  // @@protoc_insertion_point(field_release:KuplungApp.GridSettings.positionX)
  clear_has_positionx();
  ::KuplungApp::ObjectCoordinate* temp = positionx_;
  positionx_ = NULL;
  return temp;
}
inline void GridSettings::set_allocated_positionx(::KuplungApp::ObjectCoordinate* positionx) {
  delete positionx_;
  positionx_ = positionx;
  if (positionx) {
    set_has_positionx();
  } else {
    clear_has_positionx();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GridSettings.positionX)
}

// required .KuplungApp.ObjectCoordinate positionY = 4;
inline bool GridSettings::has_positiony() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridSettings::set_has_positiony() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridSettings::clear_has_positiony() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridSettings::clear_positiony() {
  if (positiony_ != NULL) positiony_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positiony();
}
inline const ::KuplungApp::ObjectCoordinate& GridSettings::positiony() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.positionY)
  return positiony_ != NULL ? *positiony_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::mutable_positiony() {
  set_has_positiony();
  if (positiony_ == NULL) {
    positiony_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GridSettings.positionY)
  return positiony_;
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::release_positiony() {
  // @@protoc_insertion_point(field_release:KuplungApp.GridSettings.positionY)
  clear_has_positiony();
  ::KuplungApp::ObjectCoordinate* temp = positiony_;
  positiony_ = NULL;
  return temp;
}
inline void GridSettings::set_allocated_positiony(::KuplungApp::ObjectCoordinate* positiony) {
  delete positiony_;
  positiony_ = positiony;
  if (positiony) {
    set_has_positiony();
  } else {
    clear_has_positiony();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GridSettings.positionY)
}

// required .KuplungApp.ObjectCoordinate positionZ = 5;
inline bool GridSettings::has_positionz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridSettings::set_has_positionz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridSettings::clear_has_positionz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridSettings::clear_positionz() {
  if (positionz_ != NULL) positionz_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positionz();
}
inline const ::KuplungApp::ObjectCoordinate& GridSettings::positionz() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.positionZ)
  return positionz_ != NULL ? *positionz_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::mutable_positionz() {
  set_has_positionz();
  if (positionz_ == NULL) {
    positionz_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GridSettings.positionZ)
  return positionz_;
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::release_positionz() {
  // @@protoc_insertion_point(field_release:KuplungApp.GridSettings.positionZ)
  clear_has_positionz();
  ::KuplungApp::ObjectCoordinate* temp = positionz_;
  positionz_ = NULL;
  return temp;
}
inline void GridSettings::set_allocated_positionz(::KuplungApp::ObjectCoordinate* positionz) {
  delete positionz_;
  positionz_ = positionz;
  if (positionz) {
    set_has_positionz();
  } else {
    clear_has_positionz();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GridSettings.positionZ)
}

// required .KuplungApp.ObjectCoordinate rotateX = 6;
inline bool GridSettings::has_rotatex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GridSettings::set_has_rotatex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GridSettings::clear_has_rotatex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GridSettings::clear_rotatex() {
  if (rotatex_ != NULL) rotatex_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatex();
}
inline const ::KuplungApp::ObjectCoordinate& GridSettings::rotatex() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.rotateX)
  return rotatex_ != NULL ? *rotatex_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::mutable_rotatex() {
  set_has_rotatex();
  if (rotatex_ == NULL) {
    rotatex_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GridSettings.rotateX)
  return rotatex_;
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::release_rotatex() {
  // @@protoc_insertion_point(field_release:KuplungApp.GridSettings.rotateX)
  clear_has_rotatex();
  ::KuplungApp::ObjectCoordinate* temp = rotatex_;
  rotatex_ = NULL;
  return temp;
}
inline void GridSettings::set_allocated_rotatex(::KuplungApp::ObjectCoordinate* rotatex) {
  delete rotatex_;
  rotatex_ = rotatex;
  if (rotatex) {
    set_has_rotatex();
  } else {
    clear_has_rotatex();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GridSettings.rotateX)
}

// required .KuplungApp.ObjectCoordinate rotateY = 7;
inline bool GridSettings::has_rotatey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GridSettings::set_has_rotatey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GridSettings::clear_has_rotatey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GridSettings::clear_rotatey() {
  if (rotatey_ != NULL) rotatey_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatey();
}
inline const ::KuplungApp::ObjectCoordinate& GridSettings::rotatey() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.rotateY)
  return rotatey_ != NULL ? *rotatey_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::mutable_rotatey() {
  set_has_rotatey();
  if (rotatey_ == NULL) {
    rotatey_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GridSettings.rotateY)
  return rotatey_;
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::release_rotatey() {
  // @@protoc_insertion_point(field_release:KuplungApp.GridSettings.rotateY)
  clear_has_rotatey();
  ::KuplungApp::ObjectCoordinate* temp = rotatey_;
  rotatey_ = NULL;
  return temp;
}
inline void GridSettings::set_allocated_rotatey(::KuplungApp::ObjectCoordinate* rotatey) {
  delete rotatey_;
  rotatey_ = rotatey;
  if (rotatey) {
    set_has_rotatey();
  } else {
    clear_has_rotatey();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GridSettings.rotateY)
}

// required .KuplungApp.ObjectCoordinate rotateZ = 8;
inline bool GridSettings::has_rotatez() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GridSettings::set_has_rotatez() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GridSettings::clear_has_rotatez() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GridSettings::clear_rotatez() {
  if (rotatez_ != NULL) rotatez_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatez();
}
inline const ::KuplungApp::ObjectCoordinate& GridSettings::rotatez() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.rotateZ)
  return rotatez_ != NULL ? *rotatez_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::mutable_rotatez() {
  set_has_rotatez();
  if (rotatez_ == NULL) {
    rotatez_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GridSettings.rotateZ)
  return rotatez_;
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::release_rotatez() {
  // @@protoc_insertion_point(field_release:KuplungApp.GridSettings.rotateZ)
  clear_has_rotatez();
  ::KuplungApp::ObjectCoordinate* temp = rotatez_;
  rotatez_ = NULL;
  return temp;
}
inline void GridSettings::set_allocated_rotatez(::KuplungApp::ObjectCoordinate* rotatez) {
  delete rotatez_;
  rotatez_ = rotatez;
  if (rotatez) {
    set_has_rotatez();
  } else {
    clear_has_rotatez();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GridSettings.rotateZ)
}

// required .KuplungApp.ObjectCoordinate scaleX = 9;
inline bool GridSettings::has_scalex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GridSettings::set_has_scalex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GridSettings::clear_has_scalex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GridSettings::clear_scalex() {
  if (scalex_ != NULL) scalex_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_scalex();
}
inline const ::KuplungApp::ObjectCoordinate& GridSettings::scalex() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.scaleX)
  return scalex_ != NULL ? *scalex_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::mutable_scalex() {
  set_has_scalex();
  if (scalex_ == NULL) {
    scalex_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GridSettings.scaleX)
  return scalex_;
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::release_scalex() {
  // @@protoc_insertion_point(field_release:KuplungApp.GridSettings.scaleX)
  clear_has_scalex();
  ::KuplungApp::ObjectCoordinate* temp = scalex_;
  scalex_ = NULL;
  return temp;
}
inline void GridSettings::set_allocated_scalex(::KuplungApp::ObjectCoordinate* scalex) {
  delete scalex_;
  scalex_ = scalex;
  if (scalex) {
    set_has_scalex();
  } else {
    clear_has_scalex();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GridSettings.scaleX)
}

// required .KuplungApp.ObjectCoordinate scaleY = 10;
inline bool GridSettings::has_scaley() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GridSettings::set_has_scaley() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GridSettings::clear_has_scaley() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GridSettings::clear_scaley() {
  if (scaley_ != NULL) scaley_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_scaley();
}
inline const ::KuplungApp::ObjectCoordinate& GridSettings::scaley() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.scaleY)
  return scaley_ != NULL ? *scaley_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::mutable_scaley() {
  set_has_scaley();
  if (scaley_ == NULL) {
    scaley_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GridSettings.scaleY)
  return scaley_;
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::release_scaley() {
  // @@protoc_insertion_point(field_release:KuplungApp.GridSettings.scaleY)
  clear_has_scaley();
  ::KuplungApp::ObjectCoordinate* temp = scaley_;
  scaley_ = NULL;
  return temp;
}
inline void GridSettings::set_allocated_scaley(::KuplungApp::ObjectCoordinate* scaley) {
  delete scaley_;
  scaley_ = scaley;
  if (scaley) {
    set_has_scaley();
  } else {
    clear_has_scaley();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GridSettings.scaleY)
}

// required .KuplungApp.ObjectCoordinate scaleZ = 11;
inline bool GridSettings::has_scalez() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GridSettings::set_has_scalez() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GridSettings::clear_has_scalez() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GridSettings::clear_scalez() {
  if (scalez_ != NULL) scalez_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_scalez();
}
inline const ::KuplungApp::ObjectCoordinate& GridSettings::scalez() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.scaleZ)
  return scalez_ != NULL ? *scalez_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::mutable_scalez() {
  set_has_scalez();
  if (scalez_ == NULL) {
    scalez_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.GridSettings.scaleZ)
  return scalez_;
}
inline ::KuplungApp::ObjectCoordinate* GridSettings::release_scalez() {
  // @@protoc_insertion_point(field_release:KuplungApp.GridSettings.scaleZ)
  clear_has_scalez();
  ::KuplungApp::ObjectCoordinate* temp = scalez_;
  scalez_ = NULL;
  return temp;
}
inline void GridSettings::set_allocated_scalez(::KuplungApp::ObjectCoordinate* scalez) {
  delete scalez_;
  scalez_ = scalez;
  if (scalez) {
    set_has_scalez();
  } else {
    clear_has_scalez();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.GridSettings.scaleZ)
}

// required float transparency = 12;
inline bool GridSettings::has_transparency() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GridSettings::set_has_transparency() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GridSettings::clear_has_transparency() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GridSettings::clear_transparency() {
  transparency_ = 0;
  clear_has_transparency();
}
inline float GridSettings::transparency() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.transparency)
  return transparency_;
}
inline void GridSettings::set_transparency(float value) {
  set_has_transparency();
  transparency_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GridSettings.transparency)
}

// required int32 showGrid = 13;
inline bool GridSettings::has_showgrid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GridSettings::set_has_showgrid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GridSettings::clear_has_showgrid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GridSettings::clear_showgrid() {
  showgrid_ = 0;
  clear_has_showgrid();
}
inline ::google::protobuf::int32 GridSettings::showgrid() const {
  // @@protoc_insertion_point(field_get:KuplungApp.GridSettings.showGrid)
  return showgrid_;
}
inline void GridSettings::set_showgrid(::google::protobuf::int32 value) {
  set_has_showgrid();
  showgrid_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.GridSettings.showGrid)
}

// -------------------------------------------------------------------

// LightObject

// required string title = 1;
inline bool LightObject::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LightObject::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LightObject::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LightObject::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& LightObject::title() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.title)
  return title_.GetNoArena();
}
inline void LightObject::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.LightObject.title)
}
#if LANG_CXX11
inline void LightObject::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.LightObject.title)
}
#endif
inline void LightObject::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.LightObject.title)
}
inline void LightObject::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.LightObject.title)
}
inline ::std::string* LightObject::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LightObject::release_title() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LightObject::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.title)
}

// required string description = 2;
inline bool LightObject::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LightObject::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LightObject::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LightObject::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& LightObject::description() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.description)
  return description_.GetNoArena();
}
inline void LightObject::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.LightObject.description)
}
#if LANG_CXX11
inline void LightObject::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.LightObject.description)
}
#endif
inline void LightObject::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.LightObject.description)
}
inline void LightObject::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.LightObject.description)
}
inline ::std::string* LightObject::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LightObject::release_description() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LightObject::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.description)
}

// required int32 type = 3;
inline bool LightObject::has_type() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LightObject::set_has_type() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LightObject::clear_has_type() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LightObject::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LightObject::type() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.type)
  return type_;
}
inline void LightObject::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.LightObject.type)
}

// required bool showLampObject = 4;
inline bool LightObject::has_showlampobject() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LightObject::set_has_showlampobject() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LightObject::clear_has_showlampobject() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LightObject::clear_showlampobject() {
  showlampobject_ = false;
  clear_has_showlampobject();
}
inline bool LightObject::showlampobject() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.showLampObject)
  return showlampobject_;
}
inline void LightObject::set_showlampobject(bool value) {
  set_has_showlampobject();
  showlampobject_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.LightObject.showLampObject)
}

// required bool showLampDirection = 5;
inline bool LightObject::has_showlampdirection() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LightObject::set_has_showlampdirection() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LightObject::clear_has_showlampdirection() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LightObject::clear_showlampdirection() {
  showlampdirection_ = false;
  clear_has_showlampdirection();
}
inline bool LightObject::showlampdirection() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.showLampDirection)
  return showlampdirection_;
}
inline void LightObject::set_showlampdirection(bool value) {
  set_has_showlampdirection();
  showlampdirection_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.LightObject.showLampDirection)
}

// required bool showInWire = 6;
inline bool LightObject::has_showinwire() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LightObject::set_has_showinwire() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LightObject::clear_has_showinwire() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LightObject::clear_showinwire() {
  showinwire_ = false;
  clear_has_showinwire();
}
inline bool LightObject::showinwire() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.showInWire)
  return showinwire_;
}
inline void LightObject::set_showinwire(bool value) {
  set_has_showinwire();
  showinwire_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.LightObject.showInWire)
}

// required .KuplungApp.ObjectCoordinate positionX = 7;
inline bool LightObject::has_positionx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LightObject::set_has_positionx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LightObject::clear_has_positionx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LightObject::clear_positionx() {
  if (positionx_ != NULL) positionx_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positionx();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::positionx() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.positionX)
  return positionx_ != NULL ? *positionx_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_positionx() {
  set_has_positionx();
  if (positionx_ == NULL) {
    positionx_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.positionX)
  return positionx_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_positionx() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.positionX)
  clear_has_positionx();
  ::KuplungApp::ObjectCoordinate* temp = positionx_;
  positionx_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_positionx(::KuplungApp::ObjectCoordinate* positionx) {
  delete positionx_;
  positionx_ = positionx;
  if (positionx) {
    set_has_positionx();
  } else {
    clear_has_positionx();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.positionX)
}

// required .KuplungApp.ObjectCoordinate positionY = 8;
inline bool LightObject::has_positiony() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LightObject::set_has_positiony() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LightObject::clear_has_positiony() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LightObject::clear_positiony() {
  if (positiony_ != NULL) positiony_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positiony();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::positiony() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.positionY)
  return positiony_ != NULL ? *positiony_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_positiony() {
  set_has_positiony();
  if (positiony_ == NULL) {
    positiony_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.positionY)
  return positiony_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_positiony() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.positionY)
  clear_has_positiony();
  ::KuplungApp::ObjectCoordinate* temp = positiony_;
  positiony_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_positiony(::KuplungApp::ObjectCoordinate* positiony) {
  delete positiony_;
  positiony_ = positiony;
  if (positiony) {
    set_has_positiony();
  } else {
    clear_has_positiony();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.positionY)
}

// required .KuplungApp.ObjectCoordinate positionZ = 9;
inline bool LightObject::has_positionz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LightObject::set_has_positionz() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LightObject::clear_has_positionz() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LightObject::clear_positionz() {
  if (positionz_ != NULL) positionz_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_positionz();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::positionz() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.positionZ)
  return positionz_ != NULL ? *positionz_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_positionz() {
  set_has_positionz();
  if (positionz_ == NULL) {
    positionz_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.positionZ)
  return positionz_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_positionz() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.positionZ)
  clear_has_positionz();
  ::KuplungApp::ObjectCoordinate* temp = positionz_;
  positionz_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_positionz(::KuplungApp::ObjectCoordinate* positionz) {
  delete positionz_;
  positionz_ = positionz;
  if (positionz) {
    set_has_positionz();
  } else {
    clear_has_positionz();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.positionZ)
}

// required .KuplungApp.ObjectCoordinate directionX = 10;
inline bool LightObject::has_directionx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LightObject::set_has_directionx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LightObject::clear_has_directionx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LightObject::clear_directionx() {
  if (directionx_ != NULL) directionx_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_directionx();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::directionx() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.directionX)
  return directionx_ != NULL ? *directionx_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_directionx() {
  set_has_directionx();
  if (directionx_ == NULL) {
    directionx_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.directionX)
  return directionx_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_directionx() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.directionX)
  clear_has_directionx();
  ::KuplungApp::ObjectCoordinate* temp = directionx_;
  directionx_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_directionx(::KuplungApp::ObjectCoordinate* directionx) {
  delete directionx_;
  directionx_ = directionx;
  if (directionx) {
    set_has_directionx();
  } else {
    clear_has_directionx();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.directionX)
}

// required .KuplungApp.ObjectCoordinate directionY = 11;
inline bool LightObject::has_directiony() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LightObject::set_has_directiony() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LightObject::clear_has_directiony() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LightObject::clear_directiony() {
  if (directiony_ != NULL) directiony_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_directiony();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::directiony() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.directionY)
  return directiony_ != NULL ? *directiony_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_directiony() {
  set_has_directiony();
  if (directiony_ == NULL) {
    directiony_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.directionY)
  return directiony_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_directiony() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.directionY)
  clear_has_directiony();
  ::KuplungApp::ObjectCoordinate* temp = directiony_;
  directiony_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_directiony(::KuplungApp::ObjectCoordinate* directiony) {
  delete directiony_;
  directiony_ = directiony;
  if (directiony) {
    set_has_directiony();
  } else {
    clear_has_directiony();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.directionY)
}

// required .KuplungApp.ObjectCoordinate directionZ = 12;
inline bool LightObject::has_directionz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LightObject::set_has_directionz() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LightObject::clear_has_directionz() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LightObject::clear_directionz() {
  if (directionz_ != NULL) directionz_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_directionz();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::directionz() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.directionZ)
  return directionz_ != NULL ? *directionz_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_directionz() {
  set_has_directionz();
  if (directionz_ == NULL) {
    directionz_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.directionZ)
  return directionz_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_directionz() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.directionZ)
  clear_has_directionz();
  ::KuplungApp::ObjectCoordinate* temp = directionz_;
  directionz_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_directionz(::KuplungApp::ObjectCoordinate* directionz) {
  delete directionz_;
  directionz_ = directionz;
  if (directionz) {
    set_has_directionz();
  } else {
    clear_has_directionz();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.directionZ)
}

// required .KuplungApp.ObjectCoordinate scaleX = 13;
inline bool LightObject::has_scalex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LightObject::set_has_scalex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LightObject::clear_has_scalex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LightObject::clear_scalex() {
  if (scalex_ != NULL) scalex_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_scalex();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::scalex() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.scaleX)
  return scalex_ != NULL ? *scalex_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_scalex() {
  set_has_scalex();
  if (scalex_ == NULL) {
    scalex_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.scaleX)
  return scalex_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_scalex() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.scaleX)
  clear_has_scalex();
  ::KuplungApp::ObjectCoordinate* temp = scalex_;
  scalex_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_scalex(::KuplungApp::ObjectCoordinate* scalex) {
  delete scalex_;
  scalex_ = scalex;
  if (scalex) {
    set_has_scalex();
  } else {
    clear_has_scalex();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.scaleX)
}

// required .KuplungApp.ObjectCoordinate scaleY = 14;
inline bool LightObject::has_scaley() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LightObject::set_has_scaley() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LightObject::clear_has_scaley() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LightObject::clear_scaley() {
  if (scaley_ != NULL) scaley_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_scaley();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::scaley() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.scaleY)
  return scaley_ != NULL ? *scaley_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_scaley() {
  set_has_scaley();
  if (scaley_ == NULL) {
    scaley_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.scaleY)
  return scaley_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_scaley() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.scaleY)
  clear_has_scaley();
  ::KuplungApp::ObjectCoordinate* temp = scaley_;
  scaley_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_scaley(::KuplungApp::ObjectCoordinate* scaley) {
  delete scaley_;
  scaley_ = scaley;
  if (scaley) {
    set_has_scaley();
  } else {
    clear_has_scaley();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.scaleY)
}

// required .KuplungApp.ObjectCoordinate scaleZ = 15;
inline bool LightObject::has_scalez() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LightObject::set_has_scalez() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LightObject::clear_has_scalez() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LightObject::clear_scalez() {
  if (scalez_ != NULL) scalez_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_scalez();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::scalez() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.scaleZ)
  return scalez_ != NULL ? *scalez_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_scalez() {
  set_has_scalez();
  if (scalez_ == NULL) {
    scalez_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.scaleZ)
  return scalez_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_scalez() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.scaleZ)
  clear_has_scalez();
  ::KuplungApp::ObjectCoordinate* temp = scalez_;
  scalez_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_scalez(::KuplungApp::ObjectCoordinate* scalez) {
  delete scalez_;
  scalez_ = scalez;
  if (scalez) {
    set_has_scalez();
  } else {
    clear_has_scalez();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.scaleZ)
}

// required .KuplungApp.ObjectCoordinate rotateX = 16;
inline bool LightObject::has_rotatex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LightObject::set_has_rotatex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LightObject::clear_has_rotatex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LightObject::clear_rotatex() {
  if (rotatex_ != NULL) rotatex_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatex();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::rotatex() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.rotateX)
  return rotatex_ != NULL ? *rotatex_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_rotatex() {
  set_has_rotatex();
  if (rotatex_ == NULL) {
    rotatex_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.rotateX)
  return rotatex_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_rotatex() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.rotateX)
  clear_has_rotatex();
  ::KuplungApp::ObjectCoordinate* temp = rotatex_;
  rotatex_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_rotatex(::KuplungApp::ObjectCoordinate* rotatex) {
  delete rotatex_;
  rotatex_ = rotatex;
  if (rotatex) {
    set_has_rotatex();
  } else {
    clear_has_rotatex();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.rotateX)
}

// required .KuplungApp.ObjectCoordinate rotateY = 17;
inline bool LightObject::has_rotatey() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LightObject::set_has_rotatey() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LightObject::clear_has_rotatey() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LightObject::clear_rotatey() {
  if (rotatey_ != NULL) rotatey_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatey();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::rotatey() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.rotateY)
  return rotatey_ != NULL ? *rotatey_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_rotatey() {
  set_has_rotatey();
  if (rotatey_ == NULL) {
    rotatey_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.rotateY)
  return rotatey_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_rotatey() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.rotateY)
  clear_has_rotatey();
  ::KuplungApp::ObjectCoordinate* temp = rotatey_;
  rotatey_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_rotatey(::KuplungApp::ObjectCoordinate* rotatey) {
  delete rotatey_;
  rotatey_ = rotatey;
  if (rotatey) {
    set_has_rotatey();
  } else {
    clear_has_rotatey();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.rotateY)
}

// required .KuplungApp.ObjectCoordinate rotateZ = 18;
inline bool LightObject::has_rotatez() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LightObject::set_has_rotatez() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LightObject::clear_has_rotatez() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LightObject::clear_rotatez() {
  if (rotatez_ != NULL) rotatez_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatez();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::rotatez() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.rotateZ)
  return rotatez_ != NULL ? *rotatez_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_rotatez() {
  set_has_rotatez();
  if (rotatez_ == NULL) {
    rotatez_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.rotateZ)
  return rotatez_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_rotatez() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.rotateZ)
  clear_has_rotatez();
  ::KuplungApp::ObjectCoordinate* temp = rotatez_;
  rotatez_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_rotatez(::KuplungApp::ObjectCoordinate* rotatez) {
  delete rotatez_;
  rotatez_ = rotatez;
  if (rotatez) {
    set_has_rotatez();
  } else {
    clear_has_rotatez();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.rotateZ)
}

// required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
inline bool LightObject::has_rotatecenterx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LightObject::set_has_rotatecenterx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LightObject::clear_has_rotatecenterx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LightObject::clear_rotatecenterx() {
  if (rotatecenterx_ != NULL) rotatecenterx_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatecenterx();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::rotatecenterx() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.rotateCenterX)
  return rotatecenterx_ != NULL ? *rotatecenterx_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_rotatecenterx() {
  set_has_rotatecenterx();
  if (rotatecenterx_ == NULL) {
    rotatecenterx_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.rotateCenterX)
  return rotatecenterx_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_rotatecenterx() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.rotateCenterX)
  clear_has_rotatecenterx();
  ::KuplungApp::ObjectCoordinate* temp = rotatecenterx_;
  rotatecenterx_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_rotatecenterx(::KuplungApp::ObjectCoordinate* rotatecenterx) {
  delete rotatecenterx_;
  rotatecenterx_ = rotatecenterx;
  if (rotatecenterx) {
    set_has_rotatecenterx();
  } else {
    clear_has_rotatecenterx();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.rotateCenterX)
}

// required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
inline bool LightObject::has_rotatecentery() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LightObject::set_has_rotatecentery() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LightObject::clear_has_rotatecentery() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LightObject::clear_rotatecentery() {
  if (rotatecentery_ != NULL) rotatecentery_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatecentery();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::rotatecentery() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.rotateCenterY)
  return rotatecentery_ != NULL ? *rotatecentery_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_rotatecentery() {
  set_has_rotatecentery();
  if (rotatecentery_ == NULL) {
    rotatecentery_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.rotateCenterY)
  return rotatecentery_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_rotatecentery() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.rotateCenterY)
  clear_has_rotatecentery();
  ::KuplungApp::ObjectCoordinate* temp = rotatecentery_;
  rotatecentery_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_rotatecentery(::KuplungApp::ObjectCoordinate* rotatecentery) {
  delete rotatecentery_;
  rotatecentery_ = rotatecentery;
  if (rotatecentery) {
    set_has_rotatecentery();
  } else {
    clear_has_rotatecentery();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.rotateCenterY)
}

// required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
inline bool LightObject::has_rotatecenterz() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LightObject::set_has_rotatecenterz() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LightObject::clear_has_rotatecenterz() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LightObject::clear_rotatecenterz() {
  if (rotatecenterz_ != NULL) rotatecenterz_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_rotatecenterz();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::rotatecenterz() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.rotateCenterZ)
  return rotatecenterz_ != NULL ? *rotatecenterz_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_rotatecenterz() {
  set_has_rotatecenterz();
  if (rotatecenterz_ == NULL) {
    rotatecenterz_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.rotateCenterZ)
  return rotatecenterz_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_rotatecenterz() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.rotateCenterZ)
  clear_has_rotatecenterz();
  ::KuplungApp::ObjectCoordinate* temp = rotatecenterz_;
  rotatecenterz_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_rotatecenterz(::KuplungApp::ObjectCoordinate* rotatecenterz) {
  delete rotatecenterz_;
  rotatecenterz_ = rotatecenterz;
  if (rotatecenterz) {
    set_has_rotatecenterz();
  } else {
    clear_has_rotatecenterz();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.rotateCenterZ)
}

// required .KuplungApp.MaterialColor ambient = 22;
inline bool LightObject::has_ambient() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LightObject::set_has_ambient() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LightObject::clear_has_ambient() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LightObject::clear_ambient() {
  if (ambient_ != NULL) ambient_->::KuplungApp::MaterialColor::Clear();
  clear_has_ambient();
}
inline const ::KuplungApp::MaterialColor& LightObject::ambient() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.ambient)
  return ambient_ != NULL ? *ambient_
                         : *::KuplungApp::MaterialColor::internal_default_instance();
}
inline ::KuplungApp::MaterialColor* LightObject::mutable_ambient() {
  set_has_ambient();
  if (ambient_ == NULL) {
    ambient_ = new ::KuplungApp::MaterialColor;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.ambient)
  return ambient_;
}
inline ::KuplungApp::MaterialColor* LightObject::release_ambient() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.ambient)
  clear_has_ambient();
  ::KuplungApp::MaterialColor* temp = ambient_;
  ambient_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_ambient(::KuplungApp::MaterialColor* ambient) {
  delete ambient_;
  ambient_ = ambient;
  if (ambient) {
    set_has_ambient();
  } else {
    clear_has_ambient();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.ambient)
}

// required .KuplungApp.MaterialColor diffuse = 23;
inline bool LightObject::has_diffuse() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LightObject::set_has_diffuse() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LightObject::clear_has_diffuse() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LightObject::clear_diffuse() {
  if (diffuse_ != NULL) diffuse_->::KuplungApp::MaterialColor::Clear();
  clear_has_diffuse();
}
inline const ::KuplungApp::MaterialColor& LightObject::diffuse() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.diffuse)
  return diffuse_ != NULL ? *diffuse_
                         : *::KuplungApp::MaterialColor::internal_default_instance();
}
inline ::KuplungApp::MaterialColor* LightObject::mutable_diffuse() {
  set_has_diffuse();
  if (diffuse_ == NULL) {
    diffuse_ = new ::KuplungApp::MaterialColor;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.diffuse)
  return diffuse_;
}
inline ::KuplungApp::MaterialColor* LightObject::release_diffuse() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.diffuse)
  clear_has_diffuse();
  ::KuplungApp::MaterialColor* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_diffuse(::KuplungApp::MaterialColor* diffuse) {
  delete diffuse_;
  diffuse_ = diffuse;
  if (diffuse) {
    set_has_diffuse();
  } else {
    clear_has_diffuse();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.diffuse)
}

// required .KuplungApp.MaterialColor specular = 24;
inline bool LightObject::has_specular() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LightObject::set_has_specular() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LightObject::clear_has_specular() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LightObject::clear_specular() {
  if (specular_ != NULL) specular_->::KuplungApp::MaterialColor::Clear();
  clear_has_specular();
}
inline const ::KuplungApp::MaterialColor& LightObject::specular() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.specular)
  return specular_ != NULL ? *specular_
                         : *::KuplungApp::MaterialColor::internal_default_instance();
}
inline ::KuplungApp::MaterialColor* LightObject::mutable_specular() {
  set_has_specular();
  if (specular_ == NULL) {
    specular_ = new ::KuplungApp::MaterialColor;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.specular)
  return specular_;
}
inline ::KuplungApp::MaterialColor* LightObject::release_specular() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.specular)
  clear_has_specular();
  ::KuplungApp::MaterialColor* temp = specular_;
  specular_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_specular(::KuplungApp::MaterialColor* specular) {
  delete specular_;
  specular_ = specular;
  if (specular) {
    set_has_specular();
  } else {
    clear_has_specular();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.specular)
}

// required .KuplungApp.ObjectCoordinate lCutOff = 25;
inline bool LightObject::has_lcutoff() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LightObject::set_has_lcutoff() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LightObject::clear_has_lcutoff() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LightObject::clear_lcutoff() {
  if (lcutoff_ != NULL) lcutoff_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_lcutoff();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::lcutoff() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.lCutOff)
  return lcutoff_ != NULL ? *lcutoff_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_lcutoff() {
  set_has_lcutoff();
  if (lcutoff_ == NULL) {
    lcutoff_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.lCutOff)
  return lcutoff_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_lcutoff() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.lCutOff)
  clear_has_lcutoff();
  ::KuplungApp::ObjectCoordinate* temp = lcutoff_;
  lcutoff_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_lcutoff(::KuplungApp::ObjectCoordinate* lcutoff) {
  delete lcutoff_;
  lcutoff_ = lcutoff;
  if (lcutoff) {
    set_has_lcutoff();
  } else {
    clear_has_lcutoff();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.lCutOff)
}

// required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
inline bool LightObject::has_loutercutoff() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LightObject::set_has_loutercutoff() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LightObject::clear_has_loutercutoff() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LightObject::clear_loutercutoff() {
  if (loutercutoff_ != NULL) loutercutoff_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_loutercutoff();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::loutercutoff() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.lOuterCutOff)
  return loutercutoff_ != NULL ? *loutercutoff_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_loutercutoff() {
  set_has_loutercutoff();
  if (loutercutoff_ == NULL) {
    loutercutoff_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.lOuterCutOff)
  return loutercutoff_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_loutercutoff() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.lOuterCutOff)
  clear_has_loutercutoff();
  ::KuplungApp::ObjectCoordinate* temp = loutercutoff_;
  loutercutoff_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_loutercutoff(::KuplungApp::ObjectCoordinate* loutercutoff) {
  delete loutercutoff_;
  loutercutoff_ = loutercutoff;
  if (loutercutoff) {
    set_has_loutercutoff();
  } else {
    clear_has_loutercutoff();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.lOuterCutOff)
}

// required .KuplungApp.ObjectCoordinate lConstant = 27;
inline bool LightObject::has_lconstant() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LightObject::set_has_lconstant() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LightObject::clear_has_lconstant() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LightObject::clear_lconstant() {
  if (lconstant_ != NULL) lconstant_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_lconstant();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::lconstant() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.lConstant)
  return lconstant_ != NULL ? *lconstant_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_lconstant() {
  set_has_lconstant();
  if (lconstant_ == NULL) {
    lconstant_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.lConstant)
  return lconstant_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_lconstant() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.lConstant)
  clear_has_lconstant();
  ::KuplungApp::ObjectCoordinate* temp = lconstant_;
  lconstant_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_lconstant(::KuplungApp::ObjectCoordinate* lconstant) {
  delete lconstant_;
  lconstant_ = lconstant;
  if (lconstant) {
    set_has_lconstant();
  } else {
    clear_has_lconstant();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.lConstant)
}

// required .KuplungApp.ObjectCoordinate lLinear = 28;
inline bool LightObject::has_llinear() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LightObject::set_has_llinear() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LightObject::clear_has_llinear() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LightObject::clear_llinear() {
  if (llinear_ != NULL) llinear_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_llinear();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::llinear() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.lLinear)
  return llinear_ != NULL ? *llinear_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_llinear() {
  set_has_llinear();
  if (llinear_ == NULL) {
    llinear_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.lLinear)
  return llinear_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_llinear() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.lLinear)
  clear_has_llinear();
  ::KuplungApp::ObjectCoordinate* temp = llinear_;
  llinear_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_llinear(::KuplungApp::ObjectCoordinate* llinear) {
  delete llinear_;
  llinear_ = llinear;
  if (llinear) {
    set_has_llinear();
  } else {
    clear_has_llinear();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.lLinear)
}

// required .KuplungApp.ObjectCoordinate lQuadratic = 29;
inline bool LightObject::has_lquadratic() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LightObject::set_has_lquadratic() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LightObject::clear_has_lquadratic() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LightObject::clear_lquadratic() {
  if (lquadratic_ != NULL) lquadratic_->::KuplungApp::ObjectCoordinate::Clear();
  clear_has_lquadratic();
}
inline const ::KuplungApp::ObjectCoordinate& LightObject::lquadratic() const {
  // @@protoc_insertion_point(field_get:KuplungApp.LightObject.lQuadratic)
  return lquadratic_ != NULL ? *lquadratic_
                         : *::KuplungApp::ObjectCoordinate::internal_default_instance();
}
inline ::KuplungApp::ObjectCoordinate* LightObject::mutable_lquadratic() {
  set_has_lquadratic();
  if (lquadratic_ == NULL) {
    lquadratic_ = new ::KuplungApp::ObjectCoordinate;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.LightObject.lQuadratic)
  return lquadratic_;
}
inline ::KuplungApp::ObjectCoordinate* LightObject::release_lquadratic() {
  // @@protoc_insertion_point(field_release:KuplungApp.LightObject.lQuadratic)
  clear_has_lquadratic();
  ::KuplungApp::ObjectCoordinate* temp = lquadratic_;
  lquadratic_ = NULL;
  return temp;
}
inline void LightObject::set_allocated_lquadratic(::KuplungApp::ObjectCoordinate* lquadratic) {
  delete lquadratic_;
  lquadratic_ = lquadratic;
  if (lquadratic) {
    set_has_lquadratic();
  } else {
    clear_has_lquadratic();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.LightObject.lQuadratic)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace KuplungApp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KuplungAppSettings_2eproto__INCLUDED
