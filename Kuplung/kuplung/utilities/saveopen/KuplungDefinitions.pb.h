// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungDefinitions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KuplungDefinitions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KuplungDefinitions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KuplungDefinitions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KuplungDefinitions_2eproto;
namespace KuplungApp {
class FBEntity;
class FBEntityDefaultTypeInternal;
extern FBEntityDefaultTypeInternal _FBEntity_default_instance_;
class MaterialColor;
class MaterialColorDefaultTypeInternal;
extern MaterialColorDefaultTypeInternal _MaterialColor_default_instance_;
class Mesh;
class MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
class MeshMaterialTextureImage;
class MeshMaterialTextureImageDefaultTypeInternal;
extern MeshMaterialTextureImageDefaultTypeInternal _MeshMaterialTextureImage_default_instance_;
class MeshModelMaterial;
class MeshModelMaterialDefaultTypeInternal;
extern MeshModelMaterialDefaultTypeInternal _MeshModelMaterial_default_instance_;
class ObjectCoordinate;
class ObjectCoordinateDefaultTypeInternal;
extern ObjectCoordinateDefaultTypeInternal _ObjectCoordinate_default_instance_;
class Vec2;
class Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
class Vec4;
class Vec4DefaultTypeInternal;
extern Vec4DefaultTypeInternal _Vec4_default_instance_;
}  // namespace KuplungApp
PROTOBUF_NAMESPACE_OPEN
template<> ::KuplungApp::FBEntity* Arena::CreateMaybeMessage<::KuplungApp::FBEntity>(Arena*);
template<> ::KuplungApp::MaterialColor* Arena::CreateMaybeMessage<::KuplungApp::MaterialColor>(Arena*);
template<> ::KuplungApp::Mesh* Arena::CreateMaybeMessage<::KuplungApp::Mesh>(Arena*);
template<> ::KuplungApp::MeshMaterialTextureImage* Arena::CreateMaybeMessage<::KuplungApp::MeshMaterialTextureImage>(Arena*);
template<> ::KuplungApp::MeshModelMaterial* Arena::CreateMaybeMessage<::KuplungApp::MeshModelMaterial>(Arena*);
template<> ::KuplungApp::ObjectCoordinate* Arena::CreateMaybeMessage<::KuplungApp::ObjectCoordinate>(Arena*);
template<> ::KuplungApp::Vec2* Arena::CreateMaybeMessage<::KuplungApp::Vec2>(Arena*);
template<> ::KuplungApp::Vec3* Arena::CreateMaybeMessage<::KuplungApp::Vec3>(Arena*);
template<> ::KuplungApp::Vec4* Arena::CreateMaybeMessage<::KuplungApp::Vec4>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KuplungApp {

// ===================================================================

class Vec2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KuplungApp.Vec2) */ {
 public:
  Vec2();
  virtual ~Vec2();

  Vec2(const Vec2& from);
  Vec2(Vec2&& from) noexcept
    : Vec2() {
    *this = ::std::move(from);
  }

  inline Vec2& operator=(const Vec2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2& operator=(Vec2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec2* internal_default_instance() {
    return reinterpret_cast<const Vec2*>(
               &_Vec2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec2& a, Vec2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec2* New() const final {
    return CreateMaybeMessage<Vec2>(nullptr);
  }

  Vec2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec2& from);
  void MergeFrom(const Vec2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KuplungApp.Vec2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KuplungDefinitions_2eproto);
    return ::descriptor_table_KuplungDefinitions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:KuplungApp.Vec2)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_KuplungDefinitions_2eproto;
};
// -------------------------------------------------------------------

class Vec3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KuplungApp.Vec3) */ {
 public:
  Vec3();
  virtual ~Vec3();

  Vec3(const Vec3& from);
  Vec3(Vec3&& from) noexcept
    : Vec3() {
    *this = ::std::move(from);
  }

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec3& operator=(Vec3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3* internal_default_instance() {
    return reinterpret_cast<const Vec3*>(
               &_Vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vec3& a, Vec3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec3* New() const final {
    return CreateMaybeMessage<Vec3>(nullptr);
  }

  Vec3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KuplungApp.Vec3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KuplungDefinitions_2eproto);
    return ::descriptor_table_KuplungDefinitions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:KuplungApp.Vec3)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_KuplungDefinitions_2eproto;
};
// -------------------------------------------------------------------

class Vec4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KuplungApp.Vec4) */ {
 public:
  Vec4();
  virtual ~Vec4();

  Vec4(const Vec4& from);
  Vec4(Vec4&& from) noexcept
    : Vec4() {
    *this = ::std::move(from);
  }

  inline Vec4& operator=(const Vec4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec4& operator=(Vec4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec4* internal_default_instance() {
    return reinterpret_cast<const Vec4*>(
               &_Vec4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vec4& a, Vec4& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec4* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec4* New() const final {
    return CreateMaybeMessage<Vec4>(nullptr);
  }

  Vec4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec4& from);
  void MergeFrom(const Vec4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KuplungApp.Vec4";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KuplungDefinitions_2eproto);
    return ::descriptor_table_KuplungDefinitions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // required float x = 1;
  bool has_x() const;
  void clear_x();
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  float z() const;
  void set_z(float value);

  // required float w = 4;
  bool has_w() const;
  void clear_w();
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:KuplungApp.Vec4)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float w_;
  friend struct ::TableStruct_KuplungDefinitions_2eproto;
};
// -------------------------------------------------------------------

class ObjectCoordinate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KuplungApp.ObjectCoordinate) */ {
 public:
  ObjectCoordinate();
  virtual ~ObjectCoordinate();

  ObjectCoordinate(const ObjectCoordinate& from);
  ObjectCoordinate(ObjectCoordinate&& from) noexcept
    : ObjectCoordinate() {
    *this = ::std::move(from);
  }

  inline ObjectCoordinate& operator=(const ObjectCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectCoordinate& operator=(ObjectCoordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectCoordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectCoordinate* internal_default_instance() {
    return reinterpret_cast<const ObjectCoordinate*>(
               &_ObjectCoordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObjectCoordinate& a, ObjectCoordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectCoordinate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectCoordinate* New() const final {
    return CreateMaybeMessage<ObjectCoordinate>(nullptr);
  }

  ObjectCoordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectCoordinate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectCoordinate& from);
  void MergeFrom(const ObjectCoordinate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectCoordinate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KuplungApp.ObjectCoordinate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KuplungDefinitions_2eproto);
    return ::descriptor_table_KuplungDefinitions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimateFieldNumber = 1,
    kPointFieldNumber = 2,
  };
  // required bool animate = 1;
  bool has_animate() const;
  void clear_animate();
  bool animate() const;
  void set_animate(bool value);

  // required float point = 2;
  bool has_point() const;
  void clear_point();
  float point() const;
  void set_point(float value);

  // @@protoc_insertion_point(class_scope:KuplungApp.ObjectCoordinate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool animate_;
  float point_;
  friend struct ::TableStruct_KuplungDefinitions_2eproto;
};
// -------------------------------------------------------------------

class FBEntity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KuplungApp.FBEntity) */ {
 public:
  FBEntity();
  virtual ~FBEntity();

  FBEntity(const FBEntity& from);
  FBEntity(FBEntity&& from) noexcept
    : FBEntity() {
    *this = ::std::move(from);
  }

  inline FBEntity& operator=(const FBEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline FBEntity& operator=(FBEntity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FBEntity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FBEntity* internal_default_instance() {
    return reinterpret_cast<const FBEntity*>(
               &_FBEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FBEntity& a, FBEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(FBEntity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FBEntity* New() const final {
    return CreateMaybeMessage<FBEntity>(nullptr);
  }

  FBEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FBEntity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FBEntity& from);
  void MergeFrom(const FBEntity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FBEntity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KuplungApp.FBEntity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KuplungDefinitions_2eproto);
    return ::descriptor_table_KuplungDefinitions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kTitleFieldNumber = 3,
    kExtensionFieldNumber = 4,
    kModifiedDateFieldNumber = 5,
    kSizeFieldNumber = 6,
    kIsFileFieldNumber = 1,
  };
  // required string path = 2;
  bool has_path() const;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // required string title = 3;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // required string extension = 4;
  bool has_extension() const;
  void clear_extension();
  const std::string& extension() const;
  void set_extension(const std::string& value);
  void set_extension(std::string&& value);
  void set_extension(const char* value);
  void set_extension(const char* value, size_t size);
  std::string* mutable_extension();
  std::string* release_extension();
  void set_allocated_extension(std::string* extension);

  // required string modifiedDate = 5;
  bool has_modifieddate() const;
  void clear_modifieddate();
  const std::string& modifieddate() const;
  void set_modifieddate(const std::string& value);
  void set_modifieddate(std::string&& value);
  void set_modifieddate(const char* value);
  void set_modifieddate(const char* value, size_t size);
  std::string* mutable_modifieddate();
  std::string* release_modifieddate();
  void set_allocated_modifieddate(std::string* modifieddate);

  // required string size = 6;
  bool has_size() const;
  void clear_size();
  const std::string& size() const;
  void set_size(const std::string& value);
  void set_size(std::string&& value);
  void set_size(const char* value);
  void set_size(const char* value, size_t size);
  std::string* mutable_size();
  std::string* release_size();
  void set_allocated_size(std::string* size);

  // required bool isFile = 1;
  bool has_isfile() const;
  void clear_isfile();
  bool isfile() const;
  void set_isfile(bool value);

  // @@protoc_insertion_point(class_scope:KuplungApp.FBEntity)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifieddate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
  bool isfile_;
  friend struct ::TableStruct_KuplungDefinitions_2eproto;
};
// -------------------------------------------------------------------

class MaterialColor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KuplungApp.MaterialColor) */ {
 public:
  MaterialColor();
  virtual ~MaterialColor();

  MaterialColor(const MaterialColor& from);
  MaterialColor(MaterialColor&& from) noexcept
    : MaterialColor() {
    *this = ::std::move(from);
  }

  inline MaterialColor& operator=(const MaterialColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaterialColor& operator=(MaterialColor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaterialColor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaterialColor* internal_default_instance() {
    return reinterpret_cast<const MaterialColor*>(
               &_MaterialColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MaterialColor& a, MaterialColor& b) {
    a.Swap(&b);
  }
  inline void Swap(MaterialColor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaterialColor* New() const final {
    return CreateMaybeMessage<MaterialColor>(nullptr);
  }

  MaterialColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaterialColor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaterialColor& from);
  void MergeFrom(const MaterialColor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaterialColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KuplungApp.MaterialColor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KuplungDefinitions_2eproto);
    return ::descriptor_table_KuplungDefinitions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 4,
    kColorPickerOpenFieldNumber = 1,
    kAnimateFieldNumber = 2,
    kStrengthFieldNumber = 3,
  };
  // required .KuplungApp.Vec3 color = 4;
  bool has_color() const;
  void clear_color();
  const ::KuplungApp::Vec3& color() const;
  ::KuplungApp::Vec3* release_color();
  ::KuplungApp::Vec3* mutable_color();
  void set_allocated_color(::KuplungApp::Vec3* color);

  // required bool colorPickerOpen = 1;
  bool has_colorpickeropen() const;
  void clear_colorpickeropen();
  bool colorpickeropen() const;
  void set_colorpickeropen(bool value);

  // required bool animate = 2;
  bool has_animate() const;
  void clear_animate();
  bool animate() const;
  void set_animate(bool value);

  // required float strength = 3;
  bool has_strength() const;
  void clear_strength();
  float strength() const;
  void set_strength(float value);

  // @@protoc_insertion_point(class_scope:KuplungApp.MaterialColor)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::KuplungApp::Vec3* color_;
  bool colorpickeropen_;
  bool animate_;
  float strength_;
  friend struct ::TableStruct_KuplungDefinitions_2eproto;
};
// -------------------------------------------------------------------

class MeshMaterialTextureImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KuplungApp.MeshMaterialTextureImage) */ {
 public:
  MeshMaterialTextureImage();
  virtual ~MeshMaterialTextureImage();

  MeshMaterialTextureImage(const MeshMaterialTextureImage& from);
  MeshMaterialTextureImage(MeshMaterialTextureImage&& from) noexcept
    : MeshMaterialTextureImage() {
    *this = ::std::move(from);
  }

  inline MeshMaterialTextureImage& operator=(const MeshMaterialTextureImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshMaterialTextureImage& operator=(MeshMaterialTextureImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshMaterialTextureImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshMaterialTextureImage* internal_default_instance() {
    return reinterpret_cast<const MeshMaterialTextureImage*>(
               &_MeshMaterialTextureImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MeshMaterialTextureImage& a, MeshMaterialTextureImage& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshMaterialTextureImage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshMaterialTextureImage* New() const final {
    return CreateMaybeMessage<MeshMaterialTextureImage>(nullptr);
  }

  MeshMaterialTextureImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshMaterialTextureImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshMaterialTextureImage& from);
  void MergeFrom(const MeshMaterialTextureImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshMaterialTextureImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KuplungApp.MeshMaterialTextureImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KuplungDefinitions_2eproto);
    return ::descriptor_table_KuplungDefinitions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 6,
    kFilenameFieldNumber = 1,
    kImageFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kUseTextureFieldNumber = 5,
  };
  // repeated string Commands = 6;
  int commands_size() const;
  void clear_commands();
  const std::string& commands(int index) const;
  std::string* mutable_commands(int index);
  void set_commands(int index, const std::string& value);
  void set_commands(int index, std::string&& value);
  void set_commands(int index, const char* value);
  void set_commands(int index, const char* value, size_t size);
  std::string* add_commands();
  void add_commands(const std::string& value);
  void add_commands(std::string&& value);
  void add_commands(const char* value);
  void add_commands(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& commands() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_commands();

  // required string Filename = 1;
  bool has_filename() const;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);

  // required string Image = 2;
  bool has_image() const;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);

  // required int32 Width = 3;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 Height = 4;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required bool UseTexture = 5;
  bool has_usetexture() const;
  void clear_usetexture();
  bool usetexture() const;
  void set_usetexture(bool value);

  // @@protoc_insertion_point(class_scope:KuplungApp.MeshMaterialTextureImage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  bool usetexture_;
  friend struct ::TableStruct_KuplungDefinitions_2eproto;
};
// -------------------------------------------------------------------

class MeshModelMaterial :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KuplungApp.MeshModelMaterial) */ {
 public:
  MeshModelMaterial();
  virtual ~MeshModelMaterial();

  MeshModelMaterial(const MeshModelMaterial& from);
  MeshModelMaterial(MeshModelMaterial&& from) noexcept
    : MeshModelMaterial() {
    *this = ::std::move(from);
  }

  inline MeshModelMaterial& operator=(const MeshModelMaterial& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshModelMaterial& operator=(MeshModelMaterial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshModelMaterial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshModelMaterial* internal_default_instance() {
    return reinterpret_cast<const MeshModelMaterial*>(
               &_MeshModelMaterial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MeshModelMaterial& a, MeshModelMaterial& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshModelMaterial* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshModelMaterial* New() const final {
    return CreateMaybeMessage<MeshModelMaterial>(nullptr);
  }

  MeshModelMaterial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshModelMaterial>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshModelMaterial& from);
  void MergeFrom(const MeshModelMaterial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshModelMaterial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KuplungApp.MeshModelMaterial";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KuplungDefinitions_2eproto);
    return ::descriptor_table_KuplungDefinitions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialTitleFieldNumber = 2,
    kAmbientColorFieldNumber = 3,
    kDiffuseColorFieldNumber = 4,
    kSpecularColorFieldNumber = 5,
    kEmissionColorFieldNumber = 6,
    kTextureAmbientFieldNumber = 11,
    kTextureDiffuseFieldNumber = 12,
    kTextureSpecularFieldNumber = 13,
    kTextureSpecularExpFieldNumber = 14,
    kTextureDissolveFieldNumber = 15,
    kTextureBumpFieldNumber = 16,
    kTextureDisplacementFieldNumber = 17,
    kMaterialIDFieldNumber = 1,
    kSpecularExpFieldNumber = 7,
    kTransparencyFieldNumber = 8,
    kIlluminationModeFieldNumber = 9,
    kOpticalDensityFieldNumber = 10,
  };
  // required string MaterialTitle = 2;
  bool has_materialtitle() const;
  void clear_materialtitle();
  const std::string& materialtitle() const;
  void set_materialtitle(const std::string& value);
  void set_materialtitle(std::string&& value);
  void set_materialtitle(const char* value);
  void set_materialtitle(const char* value, size_t size);
  std::string* mutable_materialtitle();
  std::string* release_materialtitle();
  void set_allocated_materialtitle(std::string* materialtitle);

  // required .KuplungApp.Vec3 AmbientColor = 3;
  bool has_ambientcolor() const;
  void clear_ambientcolor();
  const ::KuplungApp::Vec3& ambientcolor() const;
  ::KuplungApp::Vec3* release_ambientcolor();
  ::KuplungApp::Vec3* mutable_ambientcolor();
  void set_allocated_ambientcolor(::KuplungApp::Vec3* ambientcolor);

  // required .KuplungApp.Vec3 DiffuseColor = 4;
  bool has_diffusecolor() const;
  void clear_diffusecolor();
  const ::KuplungApp::Vec3& diffusecolor() const;
  ::KuplungApp::Vec3* release_diffusecolor();
  ::KuplungApp::Vec3* mutable_diffusecolor();
  void set_allocated_diffusecolor(::KuplungApp::Vec3* diffusecolor);

  // required .KuplungApp.Vec3 SpecularColor = 5;
  bool has_specularcolor() const;
  void clear_specularcolor();
  const ::KuplungApp::Vec3& specularcolor() const;
  ::KuplungApp::Vec3* release_specularcolor();
  ::KuplungApp::Vec3* mutable_specularcolor();
  void set_allocated_specularcolor(::KuplungApp::Vec3* specularcolor);

  // required .KuplungApp.Vec3 EmissionColor = 6;
  bool has_emissioncolor() const;
  void clear_emissioncolor();
  const ::KuplungApp::Vec3& emissioncolor() const;
  ::KuplungApp::Vec3* release_emissioncolor();
  ::KuplungApp::Vec3* mutable_emissioncolor();
  void set_allocated_emissioncolor(::KuplungApp::Vec3* emissioncolor);

  // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
  bool has_textureambient() const;
  void clear_textureambient();
  const ::KuplungApp::MeshMaterialTextureImage& textureambient() const;
  ::KuplungApp::MeshMaterialTextureImage* release_textureambient();
  ::KuplungApp::MeshMaterialTextureImage* mutable_textureambient();
  void set_allocated_textureambient(::KuplungApp::MeshMaterialTextureImage* textureambient);

  // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
  bool has_texturediffuse() const;
  void clear_texturediffuse();
  const ::KuplungApp::MeshMaterialTextureImage& texturediffuse() const;
  ::KuplungApp::MeshMaterialTextureImage* release_texturediffuse();
  ::KuplungApp::MeshMaterialTextureImage* mutable_texturediffuse();
  void set_allocated_texturediffuse(::KuplungApp::MeshMaterialTextureImage* texturediffuse);

  // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
  bool has_texturespecular() const;
  void clear_texturespecular();
  const ::KuplungApp::MeshMaterialTextureImage& texturespecular() const;
  ::KuplungApp::MeshMaterialTextureImage* release_texturespecular();
  ::KuplungApp::MeshMaterialTextureImage* mutable_texturespecular();
  void set_allocated_texturespecular(::KuplungApp::MeshMaterialTextureImage* texturespecular);

  // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
  bool has_texturespecularexp() const;
  void clear_texturespecularexp();
  const ::KuplungApp::MeshMaterialTextureImage& texturespecularexp() const;
  ::KuplungApp::MeshMaterialTextureImage* release_texturespecularexp();
  ::KuplungApp::MeshMaterialTextureImage* mutable_texturespecularexp();
  void set_allocated_texturespecularexp(::KuplungApp::MeshMaterialTextureImage* texturespecularexp);

  // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
  bool has_texturedissolve() const;
  void clear_texturedissolve();
  const ::KuplungApp::MeshMaterialTextureImage& texturedissolve() const;
  ::KuplungApp::MeshMaterialTextureImage* release_texturedissolve();
  ::KuplungApp::MeshMaterialTextureImage* mutable_texturedissolve();
  void set_allocated_texturedissolve(::KuplungApp::MeshMaterialTextureImage* texturedissolve);

  // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
  bool has_texturebump() const;
  void clear_texturebump();
  const ::KuplungApp::MeshMaterialTextureImage& texturebump() const;
  ::KuplungApp::MeshMaterialTextureImage* release_texturebump();
  ::KuplungApp::MeshMaterialTextureImage* mutable_texturebump();
  void set_allocated_texturebump(::KuplungApp::MeshMaterialTextureImage* texturebump);

  // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
  bool has_texturedisplacement() const;
  void clear_texturedisplacement();
  const ::KuplungApp::MeshMaterialTextureImage& texturedisplacement() const;
  ::KuplungApp::MeshMaterialTextureImage* release_texturedisplacement();
  ::KuplungApp::MeshMaterialTextureImage* mutable_texturedisplacement();
  void set_allocated_texturedisplacement(::KuplungApp::MeshMaterialTextureImage* texturedisplacement);

  // required int32 MaterialID = 1;
  bool has_materialid() const;
  void clear_materialid();
  ::PROTOBUF_NAMESPACE_ID::int32 materialid() const;
  void set_materialid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required float SpecularExp = 7;
  bool has_specularexp() const;
  void clear_specularexp();
  float specularexp() const;
  void set_specularexp(float value);

  // required float Transparency = 8;
  bool has_transparency() const;
  void clear_transparency();
  float transparency() const;
  void set_transparency(float value);

  // required fixed32 IlluminationMode = 9;
  bool has_illuminationmode() const;
  void clear_illuminationmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 illuminationmode() const;
  void set_illuminationmode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required float OpticalDensity = 10;
  bool has_opticaldensity() const;
  void clear_opticaldensity();
  float opticaldensity() const;
  void set_opticaldensity(float value);

  // @@protoc_insertion_point(class_scope:KuplungApp.MeshModelMaterial)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr materialtitle_;
  ::KuplungApp::Vec3* ambientcolor_;
  ::KuplungApp::Vec3* diffusecolor_;
  ::KuplungApp::Vec3* specularcolor_;
  ::KuplungApp::Vec3* emissioncolor_;
  ::KuplungApp::MeshMaterialTextureImage* textureambient_;
  ::KuplungApp::MeshMaterialTextureImage* texturediffuse_;
  ::KuplungApp::MeshMaterialTextureImage* texturespecular_;
  ::KuplungApp::MeshMaterialTextureImage* texturespecularexp_;
  ::KuplungApp::MeshMaterialTextureImage* texturedissolve_;
  ::KuplungApp::MeshMaterialTextureImage* texturebump_;
  ::KuplungApp::MeshMaterialTextureImage* texturedisplacement_;
  ::PROTOBUF_NAMESPACE_ID::int32 materialid_;
  float specularexp_;
  float transparency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 illuminationmode_;
  float opticaldensity_;
  friend struct ::TableStruct_KuplungDefinitions_2eproto;
};
// -------------------------------------------------------------------

class Mesh :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KuplungApp.Mesh) */ {
 public:
  Mesh();
  virtual ~Mesh();

  Mesh(const Mesh& from);
  Mesh(Mesh&& from) noexcept
    : Mesh() {
    *this = ::std::move(from);
  }

  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh& operator=(Mesh&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mesh& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mesh* internal_default_instance() {
    return reinterpret_cast<const Mesh*>(
               &_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Mesh& a, Mesh& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mesh* New() const final {
    return CreateMaybeMessage<Mesh>(nullptr);
  }

  Mesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mesh>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mesh& from);
  void MergeFrom(const Mesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KuplungApp.Mesh";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KuplungDefinitions_2eproto);
    return ::descriptor_table_KuplungDefinitions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 10,
    kTextureCoordinatesFieldNumber = 11,
    kNormalsFieldNumber = 12,
    kIndicesFieldNumber = 13,
    kModelTitleFieldNumber = 3,
    kMaterialTitleFieldNumber = 4,
    kFileFieldNumber = 2,
    kModelMaterialFieldNumber = 9,
    kIDFieldNumber = 1,
    kCountVerticesFieldNumber = 5,
    kCountTextureCoordinatesFieldNumber = 6,
    kCountNormalsFieldNumber = 7,
    kCountIndicesFieldNumber = 8,
  };
  // repeated .KuplungApp.Vec3 vertices = 10;
  int vertices_size() const;
  void clear_vertices();
  ::KuplungApp::Vec3* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec3 >*
      mutable_vertices();
  const ::KuplungApp::Vec3& vertices(int index) const;
  ::KuplungApp::Vec3* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec3 >&
      vertices() const;

  // repeated .KuplungApp.Vec2 texture_coordinates = 11;
  int texture_coordinates_size() const;
  void clear_texture_coordinates();
  ::KuplungApp::Vec2* mutable_texture_coordinates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec2 >*
      mutable_texture_coordinates();
  const ::KuplungApp::Vec2& texture_coordinates(int index) const;
  ::KuplungApp::Vec2* add_texture_coordinates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec2 >&
      texture_coordinates() const;

  // repeated .KuplungApp.Vec3 normals = 12;
  int normals_size() const;
  void clear_normals();
  ::KuplungApp::Vec3* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec3 >*
      mutable_normals();
  const ::KuplungApp::Vec3& normals(int index) const;
  ::KuplungApp::Vec3* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec3 >&
      normals() const;

  // repeated fixed32 indices = 13;
  int indices_size() const;
  void clear_indices();
  ::PROTOBUF_NAMESPACE_ID::uint32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_indices();

  // required string ModelTitle = 3;
  bool has_modeltitle() const;
  void clear_modeltitle();
  const std::string& modeltitle() const;
  void set_modeltitle(const std::string& value);
  void set_modeltitle(std::string&& value);
  void set_modeltitle(const char* value);
  void set_modeltitle(const char* value, size_t size);
  std::string* mutable_modeltitle();
  std::string* release_modeltitle();
  void set_allocated_modeltitle(std::string* modeltitle);

  // required string MaterialTitle = 4;
  bool has_materialtitle() const;
  void clear_materialtitle();
  const std::string& materialtitle() const;
  void set_materialtitle(const std::string& value);
  void set_materialtitle(std::string&& value);
  void set_materialtitle(const char* value);
  void set_materialtitle(const char* value, size_t size);
  std::string* mutable_materialtitle();
  std::string* release_materialtitle();
  void set_allocated_materialtitle(std::string* materialtitle);

  // required .KuplungApp.FBEntity File = 2;
  bool has_file() const;
  void clear_file();
  const ::KuplungApp::FBEntity& file() const;
  ::KuplungApp::FBEntity* release_file();
  ::KuplungApp::FBEntity* mutable_file();
  void set_allocated_file(::KuplungApp::FBEntity* file);

  // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
  bool has_modelmaterial() const;
  void clear_modelmaterial();
  const ::KuplungApp::MeshModelMaterial& modelmaterial() const;
  ::KuplungApp::MeshModelMaterial* release_modelmaterial();
  ::KuplungApp::MeshModelMaterial* mutable_modelmaterial();
  void set_allocated_modelmaterial(::KuplungApp::MeshModelMaterial* modelmaterial);

  // required int32 ID = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 countVertices = 5;
  bool has_countvertices() const;
  void clear_countvertices();
  ::PROTOBUF_NAMESPACE_ID::int32 countvertices() const;
  void set_countvertices(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 countTextureCoordinates = 6;
  bool has_counttexturecoordinates() const;
  void clear_counttexturecoordinates();
  ::PROTOBUF_NAMESPACE_ID::int32 counttexturecoordinates() const;
  void set_counttexturecoordinates(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 countNormals = 7;
  bool has_countnormals() const;
  void clear_countnormals();
  ::PROTOBUF_NAMESPACE_ID::int32 countnormals() const;
  void set_countnormals(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 countIndices = 8;
  bool has_countindices() const;
  void clear_countindices();
  ::PROTOBUF_NAMESPACE_ID::int32 countindices() const;
  void set_countindices(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:KuplungApp.Mesh)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec3 > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec2 > texture_coordinates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec3 > normals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > indices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modeltitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr materialtitle_;
  ::KuplungApp::FBEntity* file_;
  ::KuplungApp::MeshModelMaterial* modelmaterial_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 countvertices_;
  ::PROTOBUF_NAMESPACE_ID::int32 counttexturecoordinates_;
  ::PROTOBUF_NAMESPACE_ID::int32 countnormals_;
  ::PROTOBUF_NAMESPACE_ID::int32 countindices_;
  friend struct ::TableStruct_KuplungDefinitions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec2

// required float x = 1;
inline bool Vec2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec2::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Vec2::x() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec2.x)
  return x_;
}
inline void Vec2::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec2.x)
}

// required float y = 2;
inline bool Vec2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec2::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Vec2::y() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec2.y)
  return y_;
}
inline void Vec2::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec2.y)
}

// -------------------------------------------------------------------

// Vec3

// required float x = 1;
inline bool Vec3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec3::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Vec3::x() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec3.x)
  return x_;
}
inline void Vec3::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec3.x)
}

// required float y = 2;
inline bool Vec3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec3::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Vec3::y() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec3.y)
  return y_;
}
inline void Vec3::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec3.y)
}

// required float z = 3;
inline bool Vec3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec3::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Vec3::z() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec3.z)
  return z_;
}
inline void Vec3::set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec3.z)
}

// -------------------------------------------------------------------

// Vec4

// required float x = 1;
inline bool Vec4::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec4::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Vec4::x() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec4.x)
  return x_;
}
inline void Vec4::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec4.x)
}

// required float y = 2;
inline bool Vec4::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec4::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Vec4::y() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec4.y)
  return y_;
}
inline void Vec4::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec4.y)
}

// required float z = 3;
inline bool Vec4::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec4::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Vec4::z() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec4.z)
  return z_;
}
inline void Vec4::set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec4.z)
}

// required float w = 4;
inline bool Vec4::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vec4::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Vec4::w() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec4.w)
  return w_;
}
inline void Vec4::set_w(float value) {
  _has_bits_[0] |= 0x00000008u;
  w_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec4.w)
}

// -------------------------------------------------------------------

// ObjectCoordinate

// required bool animate = 1;
inline bool ObjectCoordinate::has_animate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectCoordinate::clear_animate() {
  animate_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ObjectCoordinate::animate() const {
  // @@protoc_insertion_point(field_get:KuplungApp.ObjectCoordinate.animate)
  return animate_;
}
inline void ObjectCoordinate::set_animate(bool value) {
  _has_bits_[0] |= 0x00000001u;
  animate_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.ObjectCoordinate.animate)
}

// required float point = 2;
inline bool ObjectCoordinate::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectCoordinate::clear_point() {
  point_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ObjectCoordinate::point() const {
  // @@protoc_insertion_point(field_get:KuplungApp.ObjectCoordinate.point)
  return point_;
}
inline void ObjectCoordinate::set_point(float value) {
  _has_bits_[0] |= 0x00000002u;
  point_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.ObjectCoordinate.point)
}

// -------------------------------------------------------------------

// FBEntity

// required bool isFile = 1;
inline bool FBEntity::has_isfile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FBEntity::clear_isfile() {
  isfile_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool FBEntity::isfile() const {
  // @@protoc_insertion_point(field_get:KuplungApp.FBEntity.isFile)
  return isfile_;
}
inline void FBEntity::set_isfile(bool value) {
  _has_bits_[0] |= 0x00000020u;
  isfile_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.FBEntity.isFile)
}

// required string path = 2;
inline bool FBEntity::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FBEntity::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FBEntity::path() const {
  // @@protoc_insertion_point(field_get:KuplungApp.FBEntity.path)
  return path_.GetNoArena();
}
inline void FBEntity::set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.FBEntity.path)
}
inline void FBEntity::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.FBEntity.path)
}
inline void FBEntity::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.FBEntity.path)
}
inline void FBEntity::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.FBEntity.path)
}
inline std::string* FBEntity::mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:KuplungApp.FBEntity.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FBEntity::release_path() {
  // @@protoc_insertion_point(field_release:KuplungApp.FBEntity.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FBEntity::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.FBEntity.path)
}

// required string title = 3;
inline bool FBEntity::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FBEntity::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FBEntity::title() const {
  // @@protoc_insertion_point(field_get:KuplungApp.FBEntity.title)
  return title_.GetNoArena();
}
inline void FBEntity::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.FBEntity.title)
}
inline void FBEntity::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.FBEntity.title)
}
inline void FBEntity::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.FBEntity.title)
}
inline void FBEntity::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.FBEntity.title)
}
inline std::string* FBEntity::mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:KuplungApp.FBEntity.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FBEntity::release_title() {
  // @@protoc_insertion_point(field_release:KuplungApp.FBEntity.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FBEntity::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.FBEntity.title)
}

// required string extension = 4;
inline bool FBEntity::has_extension() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FBEntity::clear_extension() {
  extension_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FBEntity::extension() const {
  // @@protoc_insertion_point(field_get:KuplungApp.FBEntity.extension)
  return extension_.GetNoArena();
}
inline void FBEntity::set_extension(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.FBEntity.extension)
}
inline void FBEntity::set_extension(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  extension_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.FBEntity.extension)
}
inline void FBEntity::set_extension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.FBEntity.extension)
}
inline void FBEntity::set_extension(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.FBEntity.extension)
}
inline std::string* FBEntity::mutable_extension() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:KuplungApp.FBEntity.extension)
  return extension_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FBEntity::release_extension() {
  // @@protoc_insertion_point(field_release:KuplungApp.FBEntity.extension)
  if (!has_extension()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return extension_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FBEntity::set_allocated_extension(std::string* extension) {
  if (extension != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  extension_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.FBEntity.extension)
}

// required string modifiedDate = 5;
inline bool FBEntity::has_modifieddate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FBEntity::clear_modifieddate() {
  modifieddate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FBEntity::modifieddate() const {
  // @@protoc_insertion_point(field_get:KuplungApp.FBEntity.modifiedDate)
  return modifieddate_.GetNoArena();
}
inline void FBEntity::set_modifieddate(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  modifieddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.FBEntity.modifiedDate)
}
inline void FBEntity::set_modifieddate(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  modifieddate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.FBEntity.modifiedDate)
}
inline void FBEntity::set_modifieddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  modifieddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.FBEntity.modifiedDate)
}
inline void FBEntity::set_modifieddate(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  modifieddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.FBEntity.modifiedDate)
}
inline std::string* FBEntity::mutable_modifieddate() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:KuplungApp.FBEntity.modifiedDate)
  return modifieddate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FBEntity::release_modifieddate() {
  // @@protoc_insertion_point(field_release:KuplungApp.FBEntity.modifiedDate)
  if (!has_modifieddate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return modifieddate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FBEntity::set_allocated_modifieddate(std::string* modifieddate) {
  if (modifieddate != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  modifieddate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modifieddate);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.FBEntity.modifiedDate)
}

// required string size = 6;
inline bool FBEntity::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FBEntity::clear_size() {
  size_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& FBEntity::size() const {
  // @@protoc_insertion_point(field_get:KuplungApp.FBEntity.size)
  return size_.GetNoArena();
}
inline void FBEntity::set_size(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.FBEntity.size)
}
inline void FBEntity::set_size(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  size_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.FBEntity.size)
}
inline void FBEntity::set_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.FBEntity.size)
}
inline void FBEntity::set_size(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.FBEntity.size)
}
inline std::string* FBEntity::mutable_size() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:KuplungApp.FBEntity.size)
  return size_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FBEntity::release_size() {
  // @@protoc_insertion_point(field_release:KuplungApp.FBEntity.size)
  if (!has_size()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return size_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FBEntity::set_allocated_size(std::string* size) {
  if (size != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  size_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), size);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.FBEntity.size)
}

// -------------------------------------------------------------------

// MaterialColor

// required bool colorPickerOpen = 1;
inline bool MaterialColor::has_colorpickeropen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaterialColor::clear_colorpickeropen() {
  colorpickeropen_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MaterialColor::colorpickeropen() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MaterialColor.colorPickerOpen)
  return colorpickeropen_;
}
inline void MaterialColor::set_colorpickeropen(bool value) {
  _has_bits_[0] |= 0x00000002u;
  colorpickeropen_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MaterialColor.colorPickerOpen)
}

// required bool animate = 2;
inline bool MaterialColor::has_animate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaterialColor::clear_animate() {
  animate_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MaterialColor::animate() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MaterialColor.animate)
  return animate_;
}
inline void MaterialColor::set_animate(bool value) {
  _has_bits_[0] |= 0x00000004u;
  animate_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MaterialColor.animate)
}

// required float strength = 3;
inline bool MaterialColor::has_strength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaterialColor::clear_strength() {
  strength_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MaterialColor::strength() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MaterialColor.strength)
  return strength_;
}
inline void MaterialColor::set_strength(float value) {
  _has_bits_[0] |= 0x00000008u;
  strength_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MaterialColor.strength)
}

// required .KuplungApp.Vec3 color = 4;
inline bool MaterialColor::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaterialColor::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::KuplungApp::Vec3& MaterialColor::color() const {
  const ::KuplungApp::Vec3* p = color_;
  // @@protoc_insertion_point(field_get:KuplungApp.MaterialColor.color)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::Vec3*>(
      &::KuplungApp::_Vec3_default_instance_);
}
inline ::KuplungApp::Vec3* MaterialColor::release_color() {
  // @@protoc_insertion_point(field_release:KuplungApp.MaterialColor.color)
  _has_bits_[0] &= ~0x00000001u;
  ::KuplungApp::Vec3* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::KuplungApp::Vec3* MaterialColor::mutable_color() {
  _has_bits_[0] |= 0x00000001u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::Vec3>(GetArenaNoVirtual());
    color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MaterialColor.color)
  return color_;
}
inline void MaterialColor::set_allocated_color(::KuplungApp::Vec3* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MaterialColor.color)
}

// -------------------------------------------------------------------

// MeshMaterialTextureImage

// required string Filename = 1;
inline bool MeshMaterialTextureImage::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeshMaterialTextureImage::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MeshMaterialTextureImage::filename() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshMaterialTextureImage.Filename)
  return filename_.GetNoArena();
}
inline void MeshMaterialTextureImage::set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.MeshMaterialTextureImage.Filename)
}
inline void MeshMaterialTextureImage::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.MeshMaterialTextureImage.Filename)
}
inline void MeshMaterialTextureImage::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.MeshMaterialTextureImage.Filename)
}
inline void MeshMaterialTextureImage::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.MeshMaterialTextureImage.Filename)
}
inline std::string* MeshMaterialTextureImage::mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshMaterialTextureImage.Filename)
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MeshMaterialTextureImage::release_filename() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshMaterialTextureImage.Filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MeshMaterialTextureImage::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshMaterialTextureImage.Filename)
}

// required string Image = 2;
inline bool MeshMaterialTextureImage::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeshMaterialTextureImage::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MeshMaterialTextureImage::image() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshMaterialTextureImage.Image)
  return image_.GetNoArena();
}
inline void MeshMaterialTextureImage::set_image(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.MeshMaterialTextureImage.Image)
}
inline void MeshMaterialTextureImage::set_image(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.MeshMaterialTextureImage.Image)
}
inline void MeshMaterialTextureImage::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.MeshMaterialTextureImage.Image)
}
inline void MeshMaterialTextureImage::set_image(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.MeshMaterialTextureImage.Image)
}
inline std::string* MeshMaterialTextureImage::mutable_image() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshMaterialTextureImage.Image)
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MeshMaterialTextureImage::release_image() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshMaterialTextureImage.Image)
  if (!has_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return image_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MeshMaterialTextureImage::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshMaterialTextureImage.Image)
}

// required int32 Width = 3;
inline bool MeshMaterialTextureImage::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeshMaterialTextureImage::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshMaterialTextureImage::width() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshMaterialTextureImage.Width)
  return width_;
}
inline void MeshMaterialTextureImage::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshMaterialTextureImage.Width)
}

// required int32 Height = 4;
inline bool MeshMaterialTextureImage::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeshMaterialTextureImage::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshMaterialTextureImage::height() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshMaterialTextureImage.Height)
  return height_;
}
inline void MeshMaterialTextureImage::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshMaterialTextureImage.Height)
}

// required bool UseTexture = 5;
inline bool MeshMaterialTextureImage::has_usetexture() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MeshMaterialTextureImage::clear_usetexture() {
  usetexture_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool MeshMaterialTextureImage::usetexture() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshMaterialTextureImage.UseTexture)
  return usetexture_;
}
inline void MeshMaterialTextureImage::set_usetexture(bool value) {
  _has_bits_[0] |= 0x00000010u;
  usetexture_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshMaterialTextureImage.UseTexture)
}

// repeated string Commands = 6;
inline int MeshMaterialTextureImage::commands_size() const {
  return commands_.size();
}
inline void MeshMaterialTextureImage::clear_commands() {
  commands_.Clear();
}
inline const std::string& MeshMaterialTextureImage::commands(int index) const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshMaterialTextureImage.Commands)
  return commands_.Get(index);
}
inline std::string* MeshMaterialTextureImage::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshMaterialTextureImage.Commands)
  return commands_.Mutable(index);
}
inline void MeshMaterialTextureImage::set_commands(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KuplungApp.MeshMaterialTextureImage.Commands)
  commands_.Mutable(index)->assign(value);
}
inline void MeshMaterialTextureImage::set_commands(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KuplungApp.MeshMaterialTextureImage.Commands)
  commands_.Mutable(index)->assign(std::move(value));
}
inline void MeshMaterialTextureImage::set_commands(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  commands_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KuplungApp.MeshMaterialTextureImage.Commands)
}
inline void MeshMaterialTextureImage::set_commands(int index, const char* value, size_t size) {
  commands_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.MeshMaterialTextureImage.Commands)
}
inline std::string* MeshMaterialTextureImage::add_commands() {
  // @@protoc_insertion_point(field_add_mutable:KuplungApp.MeshMaterialTextureImage.Commands)
  return commands_.Add();
}
inline void MeshMaterialTextureImage::add_commands(const std::string& value) {
  commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KuplungApp.MeshMaterialTextureImage.Commands)
}
inline void MeshMaterialTextureImage::add_commands(std::string&& value) {
  commands_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KuplungApp.MeshMaterialTextureImage.Commands)
}
inline void MeshMaterialTextureImage::add_commands(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KuplungApp.MeshMaterialTextureImage.Commands)
}
inline void MeshMaterialTextureImage::add_commands(const char* value, size_t size) {
  commands_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KuplungApp.MeshMaterialTextureImage.Commands)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MeshMaterialTextureImage::commands() const {
  // @@protoc_insertion_point(field_list:KuplungApp.MeshMaterialTextureImage.Commands)
  return commands_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MeshMaterialTextureImage::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:KuplungApp.MeshMaterialTextureImage.Commands)
  return &commands_;
}

// -------------------------------------------------------------------

// MeshModelMaterial

// required int32 MaterialID = 1;
inline bool MeshModelMaterial::has_materialid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MeshModelMaterial::clear_materialid() {
  materialid_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshModelMaterial::materialid() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.MaterialID)
  return materialid_;
}
inline void MeshModelMaterial::set_materialid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  materialid_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModelMaterial.MaterialID)
}

// required string MaterialTitle = 2;
inline bool MeshModelMaterial::has_materialtitle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeshModelMaterial::clear_materialtitle() {
  materialtitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MeshModelMaterial::materialtitle() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.MaterialTitle)
  return materialtitle_.GetNoArena();
}
inline void MeshModelMaterial::set_materialtitle(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  materialtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModelMaterial.MaterialTitle)
}
inline void MeshModelMaterial::set_materialtitle(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  materialtitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.MeshModelMaterial.MaterialTitle)
}
inline void MeshModelMaterial::set_materialtitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  materialtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.MeshModelMaterial.MaterialTitle)
}
inline void MeshModelMaterial::set_materialtitle(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  materialtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.MeshModelMaterial.MaterialTitle)
}
inline std::string* MeshModelMaterial::mutable_materialtitle() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.MaterialTitle)
  return materialtitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MeshModelMaterial::release_materialtitle() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.MaterialTitle)
  if (!has_materialtitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return materialtitle_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MeshModelMaterial::set_allocated_materialtitle(std::string* materialtitle) {
  if (materialtitle != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  materialtitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), materialtitle);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.MaterialTitle)
}

// required .KuplungApp.Vec3 AmbientColor = 3;
inline bool MeshModelMaterial::has_ambientcolor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeshModelMaterial::clear_ambientcolor() {
  if (ambientcolor_ != nullptr) ambientcolor_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::KuplungApp::Vec3& MeshModelMaterial::ambientcolor() const {
  const ::KuplungApp::Vec3* p = ambientcolor_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.AmbientColor)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::Vec3*>(
      &::KuplungApp::_Vec3_default_instance_);
}
inline ::KuplungApp::Vec3* MeshModelMaterial::release_ambientcolor() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.AmbientColor)
  _has_bits_[0] &= ~0x00000002u;
  ::KuplungApp::Vec3* temp = ambientcolor_;
  ambientcolor_ = nullptr;
  return temp;
}
inline ::KuplungApp::Vec3* MeshModelMaterial::mutable_ambientcolor() {
  _has_bits_[0] |= 0x00000002u;
  if (ambientcolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::Vec3>(GetArenaNoVirtual());
    ambientcolor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.AmbientColor)
  return ambientcolor_;
}
inline void MeshModelMaterial::set_allocated_ambientcolor(::KuplungApp::Vec3* ambientcolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ambientcolor_;
  }
  if (ambientcolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ambientcolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ambientcolor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ambientcolor_ = ambientcolor;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.AmbientColor)
}

// required .KuplungApp.Vec3 DiffuseColor = 4;
inline bool MeshModelMaterial::has_diffusecolor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeshModelMaterial::clear_diffusecolor() {
  if (diffusecolor_ != nullptr) diffusecolor_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KuplungApp::Vec3& MeshModelMaterial::diffusecolor() const {
  const ::KuplungApp::Vec3* p = diffusecolor_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.DiffuseColor)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::Vec3*>(
      &::KuplungApp::_Vec3_default_instance_);
}
inline ::KuplungApp::Vec3* MeshModelMaterial::release_diffusecolor() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.DiffuseColor)
  _has_bits_[0] &= ~0x00000004u;
  ::KuplungApp::Vec3* temp = diffusecolor_;
  diffusecolor_ = nullptr;
  return temp;
}
inline ::KuplungApp::Vec3* MeshModelMaterial::mutable_diffusecolor() {
  _has_bits_[0] |= 0x00000004u;
  if (diffusecolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::Vec3>(GetArenaNoVirtual());
    diffusecolor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.DiffuseColor)
  return diffusecolor_;
}
inline void MeshModelMaterial::set_allocated_diffusecolor(::KuplungApp::Vec3* diffusecolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete diffusecolor_;
  }
  if (diffusecolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diffusecolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffusecolor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  diffusecolor_ = diffusecolor;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.DiffuseColor)
}

// required .KuplungApp.Vec3 SpecularColor = 5;
inline bool MeshModelMaterial::has_specularcolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeshModelMaterial::clear_specularcolor() {
  if (specularcolor_ != nullptr) specularcolor_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KuplungApp::Vec3& MeshModelMaterial::specularcolor() const {
  const ::KuplungApp::Vec3* p = specularcolor_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.SpecularColor)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::Vec3*>(
      &::KuplungApp::_Vec3_default_instance_);
}
inline ::KuplungApp::Vec3* MeshModelMaterial::release_specularcolor() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.SpecularColor)
  _has_bits_[0] &= ~0x00000008u;
  ::KuplungApp::Vec3* temp = specularcolor_;
  specularcolor_ = nullptr;
  return temp;
}
inline ::KuplungApp::Vec3* MeshModelMaterial::mutable_specularcolor() {
  _has_bits_[0] |= 0x00000008u;
  if (specularcolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::Vec3>(GetArenaNoVirtual());
    specularcolor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.SpecularColor)
  return specularcolor_;
}
inline void MeshModelMaterial::set_allocated_specularcolor(::KuplungApp::Vec3* specularcolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete specularcolor_;
  }
  if (specularcolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      specularcolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specularcolor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  specularcolor_ = specularcolor;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.SpecularColor)
}

// required .KuplungApp.Vec3 EmissionColor = 6;
inline bool MeshModelMaterial::has_emissioncolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MeshModelMaterial::clear_emissioncolor() {
  if (emissioncolor_ != nullptr) emissioncolor_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::KuplungApp::Vec3& MeshModelMaterial::emissioncolor() const {
  const ::KuplungApp::Vec3* p = emissioncolor_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.EmissionColor)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::Vec3*>(
      &::KuplungApp::_Vec3_default_instance_);
}
inline ::KuplungApp::Vec3* MeshModelMaterial::release_emissioncolor() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.EmissionColor)
  _has_bits_[0] &= ~0x00000010u;
  ::KuplungApp::Vec3* temp = emissioncolor_;
  emissioncolor_ = nullptr;
  return temp;
}
inline ::KuplungApp::Vec3* MeshModelMaterial::mutable_emissioncolor() {
  _has_bits_[0] |= 0x00000010u;
  if (emissioncolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::Vec3>(GetArenaNoVirtual());
    emissioncolor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.EmissionColor)
  return emissioncolor_;
}
inline void MeshModelMaterial::set_allocated_emissioncolor(::KuplungApp::Vec3* emissioncolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete emissioncolor_;
  }
  if (emissioncolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emissioncolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emissioncolor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  emissioncolor_ = emissioncolor;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.EmissionColor)
}

// required float SpecularExp = 7;
inline bool MeshModelMaterial::has_specularexp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MeshModelMaterial::clear_specularexp() {
  specularexp_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float MeshModelMaterial::specularexp() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.SpecularExp)
  return specularexp_;
}
inline void MeshModelMaterial::set_specularexp(float value) {
  _has_bits_[0] |= 0x00002000u;
  specularexp_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModelMaterial.SpecularExp)
}

// required float Transparency = 8;
inline bool MeshModelMaterial::has_transparency() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MeshModelMaterial::clear_transparency() {
  transparency_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float MeshModelMaterial::transparency() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.Transparency)
  return transparency_;
}
inline void MeshModelMaterial::set_transparency(float value) {
  _has_bits_[0] |= 0x00004000u;
  transparency_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModelMaterial.Transparency)
}

// required fixed32 IlluminationMode = 9;
inline bool MeshModelMaterial::has_illuminationmode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MeshModelMaterial::clear_illuminationmode() {
  illuminationmode_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MeshModelMaterial::illuminationmode() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.IlluminationMode)
  return illuminationmode_;
}
inline void MeshModelMaterial::set_illuminationmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  illuminationmode_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModelMaterial.IlluminationMode)
}

// required float OpticalDensity = 10;
inline bool MeshModelMaterial::has_opticaldensity() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MeshModelMaterial::clear_opticaldensity() {
  opticaldensity_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float MeshModelMaterial::opticaldensity() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.OpticalDensity)
  return opticaldensity_;
}
inline void MeshModelMaterial::set_opticaldensity(float value) {
  _has_bits_[0] |= 0x00010000u;
  opticaldensity_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MeshModelMaterial.OpticalDensity)
}

// required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
inline bool MeshModelMaterial::has_textureambient() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MeshModelMaterial::clear_textureambient() {
  if (textureambient_ != nullptr) textureambient_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::KuplungApp::MeshMaterialTextureImage& MeshModelMaterial::textureambient() const {
  const ::KuplungApp::MeshMaterialTextureImage* p = textureambient_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.TextureAmbient)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::MeshMaterialTextureImage*>(
      &::KuplungApp::_MeshMaterialTextureImage_default_instance_);
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::release_textureambient() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.TextureAmbient)
  _has_bits_[0] &= ~0x00000020u;
  ::KuplungApp::MeshMaterialTextureImage* temp = textureambient_;
  textureambient_ = nullptr;
  return temp;
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::mutable_textureambient() {
  _has_bits_[0] |= 0x00000020u;
  if (textureambient_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::MeshMaterialTextureImage>(GetArenaNoVirtual());
    textureambient_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.TextureAmbient)
  return textureambient_;
}
inline void MeshModelMaterial::set_allocated_textureambient(::KuplungApp::MeshMaterialTextureImage* textureambient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete textureambient_;
  }
  if (textureambient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      textureambient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, textureambient, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  textureambient_ = textureambient;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.TextureAmbient)
}

// required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
inline bool MeshModelMaterial::has_texturediffuse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MeshModelMaterial::clear_texturediffuse() {
  if (texturediffuse_ != nullptr) texturediffuse_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::KuplungApp::MeshMaterialTextureImage& MeshModelMaterial::texturediffuse() const {
  const ::KuplungApp::MeshMaterialTextureImage* p = texturediffuse_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.TextureDiffuse)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::MeshMaterialTextureImage*>(
      &::KuplungApp::_MeshMaterialTextureImage_default_instance_);
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::release_texturediffuse() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.TextureDiffuse)
  _has_bits_[0] &= ~0x00000040u;
  ::KuplungApp::MeshMaterialTextureImage* temp = texturediffuse_;
  texturediffuse_ = nullptr;
  return temp;
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::mutable_texturediffuse() {
  _has_bits_[0] |= 0x00000040u;
  if (texturediffuse_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::MeshMaterialTextureImage>(GetArenaNoVirtual());
    texturediffuse_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.TextureDiffuse)
  return texturediffuse_;
}
inline void MeshModelMaterial::set_allocated_texturediffuse(::KuplungApp::MeshMaterialTextureImage* texturediffuse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete texturediffuse_;
  }
  if (texturediffuse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      texturediffuse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texturediffuse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  texturediffuse_ = texturediffuse;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.TextureDiffuse)
}

// required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
inline bool MeshModelMaterial::has_texturespecular() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MeshModelMaterial::clear_texturespecular() {
  if (texturespecular_ != nullptr) texturespecular_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::KuplungApp::MeshMaterialTextureImage& MeshModelMaterial::texturespecular() const {
  const ::KuplungApp::MeshMaterialTextureImage* p = texturespecular_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.TextureSpecular)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::MeshMaterialTextureImage*>(
      &::KuplungApp::_MeshMaterialTextureImage_default_instance_);
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::release_texturespecular() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.TextureSpecular)
  _has_bits_[0] &= ~0x00000080u;
  ::KuplungApp::MeshMaterialTextureImage* temp = texturespecular_;
  texturespecular_ = nullptr;
  return temp;
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::mutable_texturespecular() {
  _has_bits_[0] |= 0x00000080u;
  if (texturespecular_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::MeshMaterialTextureImage>(GetArenaNoVirtual());
    texturespecular_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.TextureSpecular)
  return texturespecular_;
}
inline void MeshModelMaterial::set_allocated_texturespecular(::KuplungApp::MeshMaterialTextureImage* texturespecular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete texturespecular_;
  }
  if (texturespecular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      texturespecular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texturespecular, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  texturespecular_ = texturespecular;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.TextureSpecular)
}

// required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
inline bool MeshModelMaterial::has_texturespecularexp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MeshModelMaterial::clear_texturespecularexp() {
  if (texturespecularexp_ != nullptr) texturespecularexp_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::KuplungApp::MeshMaterialTextureImage& MeshModelMaterial::texturespecularexp() const {
  const ::KuplungApp::MeshMaterialTextureImage* p = texturespecularexp_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.TextureSpecularExp)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::MeshMaterialTextureImage*>(
      &::KuplungApp::_MeshMaterialTextureImage_default_instance_);
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::release_texturespecularexp() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.TextureSpecularExp)
  _has_bits_[0] &= ~0x00000100u;
  ::KuplungApp::MeshMaterialTextureImage* temp = texturespecularexp_;
  texturespecularexp_ = nullptr;
  return temp;
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::mutable_texturespecularexp() {
  _has_bits_[0] |= 0x00000100u;
  if (texturespecularexp_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::MeshMaterialTextureImage>(GetArenaNoVirtual());
    texturespecularexp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.TextureSpecularExp)
  return texturespecularexp_;
}
inline void MeshModelMaterial::set_allocated_texturespecularexp(::KuplungApp::MeshMaterialTextureImage* texturespecularexp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete texturespecularexp_;
  }
  if (texturespecularexp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      texturespecularexp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texturespecularexp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  texturespecularexp_ = texturespecularexp;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.TextureSpecularExp)
}

// required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
inline bool MeshModelMaterial::has_texturedissolve() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MeshModelMaterial::clear_texturedissolve() {
  if (texturedissolve_ != nullptr) texturedissolve_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::KuplungApp::MeshMaterialTextureImage& MeshModelMaterial::texturedissolve() const {
  const ::KuplungApp::MeshMaterialTextureImage* p = texturedissolve_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.TextureDissolve)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::MeshMaterialTextureImage*>(
      &::KuplungApp::_MeshMaterialTextureImage_default_instance_);
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::release_texturedissolve() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.TextureDissolve)
  _has_bits_[0] &= ~0x00000200u;
  ::KuplungApp::MeshMaterialTextureImage* temp = texturedissolve_;
  texturedissolve_ = nullptr;
  return temp;
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::mutable_texturedissolve() {
  _has_bits_[0] |= 0x00000200u;
  if (texturedissolve_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::MeshMaterialTextureImage>(GetArenaNoVirtual());
    texturedissolve_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.TextureDissolve)
  return texturedissolve_;
}
inline void MeshModelMaterial::set_allocated_texturedissolve(::KuplungApp::MeshMaterialTextureImage* texturedissolve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete texturedissolve_;
  }
  if (texturedissolve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      texturedissolve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texturedissolve, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  texturedissolve_ = texturedissolve;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.TextureDissolve)
}

// required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
inline bool MeshModelMaterial::has_texturebump() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MeshModelMaterial::clear_texturebump() {
  if (texturebump_ != nullptr) texturebump_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::KuplungApp::MeshMaterialTextureImage& MeshModelMaterial::texturebump() const {
  const ::KuplungApp::MeshMaterialTextureImage* p = texturebump_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.TextureBump)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::MeshMaterialTextureImage*>(
      &::KuplungApp::_MeshMaterialTextureImage_default_instance_);
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::release_texturebump() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.TextureBump)
  _has_bits_[0] &= ~0x00000400u;
  ::KuplungApp::MeshMaterialTextureImage* temp = texturebump_;
  texturebump_ = nullptr;
  return temp;
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::mutable_texturebump() {
  _has_bits_[0] |= 0x00000400u;
  if (texturebump_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::MeshMaterialTextureImage>(GetArenaNoVirtual());
    texturebump_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.TextureBump)
  return texturebump_;
}
inline void MeshModelMaterial::set_allocated_texturebump(::KuplungApp::MeshMaterialTextureImage* texturebump) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete texturebump_;
  }
  if (texturebump) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      texturebump = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texturebump, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  texturebump_ = texturebump;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.TextureBump)
}

// required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
inline bool MeshModelMaterial::has_texturedisplacement() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MeshModelMaterial::clear_texturedisplacement() {
  if (texturedisplacement_ != nullptr) texturedisplacement_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::KuplungApp::MeshMaterialTextureImage& MeshModelMaterial::texturedisplacement() const {
  const ::KuplungApp::MeshMaterialTextureImage* p = texturedisplacement_;
  // @@protoc_insertion_point(field_get:KuplungApp.MeshModelMaterial.TextureDisplacement)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::MeshMaterialTextureImage*>(
      &::KuplungApp::_MeshMaterialTextureImage_default_instance_);
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::release_texturedisplacement() {
  // @@protoc_insertion_point(field_release:KuplungApp.MeshModelMaterial.TextureDisplacement)
  _has_bits_[0] &= ~0x00000800u;
  ::KuplungApp::MeshMaterialTextureImage* temp = texturedisplacement_;
  texturedisplacement_ = nullptr;
  return temp;
}
inline ::KuplungApp::MeshMaterialTextureImage* MeshModelMaterial::mutable_texturedisplacement() {
  _has_bits_[0] |= 0x00000800u;
  if (texturedisplacement_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::MeshMaterialTextureImage>(GetArenaNoVirtual());
    texturedisplacement_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.MeshModelMaterial.TextureDisplacement)
  return texturedisplacement_;
}
inline void MeshModelMaterial::set_allocated_texturedisplacement(::KuplungApp::MeshMaterialTextureImage* texturedisplacement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete texturedisplacement_;
  }
  if (texturedisplacement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      texturedisplacement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texturedisplacement, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  texturedisplacement_ = texturedisplacement;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MeshModelMaterial.TextureDisplacement)
}

// -------------------------------------------------------------------

// Mesh

// required int32 ID = 1;
inline bool Mesh::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mesh::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh::id() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.ID)
  return id_;
}
inline void Mesh::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Mesh.ID)
}

// required .KuplungApp.FBEntity File = 2;
inline bool Mesh::has_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mesh::clear_file() {
  if (file_ != nullptr) file_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::KuplungApp::FBEntity& Mesh::file() const {
  const ::KuplungApp::FBEntity* p = file_;
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.File)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::FBEntity*>(
      &::KuplungApp::_FBEntity_default_instance_);
}
inline ::KuplungApp::FBEntity* Mesh::release_file() {
  // @@protoc_insertion_point(field_release:KuplungApp.Mesh.File)
  _has_bits_[0] &= ~0x00000004u;
  ::KuplungApp::FBEntity* temp = file_;
  file_ = nullptr;
  return temp;
}
inline ::KuplungApp::FBEntity* Mesh::mutable_file() {
  _has_bits_[0] |= 0x00000004u;
  if (file_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::FBEntity>(GetArenaNoVirtual());
    file_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.Mesh.File)
  return file_;
}
inline void Mesh::set_allocated_file(::KuplungApp::FBEntity* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  file_ = file;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.Mesh.File)
}

// required string ModelTitle = 3;
inline bool Mesh::has_modeltitle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mesh::clear_modeltitle() {
  modeltitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Mesh::modeltitle() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.ModelTitle)
  return modeltitle_.GetNoArena();
}
inline void Mesh::set_modeltitle(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  modeltitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.Mesh.ModelTitle)
}
inline void Mesh::set_modeltitle(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  modeltitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.Mesh.ModelTitle)
}
inline void Mesh::set_modeltitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  modeltitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.Mesh.ModelTitle)
}
inline void Mesh::set_modeltitle(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  modeltitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.Mesh.ModelTitle)
}
inline std::string* Mesh::mutable_modeltitle() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:KuplungApp.Mesh.ModelTitle)
  return modeltitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Mesh::release_modeltitle() {
  // @@protoc_insertion_point(field_release:KuplungApp.Mesh.ModelTitle)
  if (!has_modeltitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return modeltitle_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_modeltitle(std::string* modeltitle) {
  if (modeltitle != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modeltitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modeltitle);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.Mesh.ModelTitle)
}

// required string MaterialTitle = 4;
inline bool Mesh::has_materialtitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mesh::clear_materialtitle() {
  materialtitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Mesh::materialtitle() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.MaterialTitle)
  return materialtitle_.GetNoArena();
}
inline void Mesh::set_materialtitle(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  materialtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KuplungApp.Mesh.MaterialTitle)
}
inline void Mesh::set_materialtitle(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  materialtitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KuplungApp.Mesh.MaterialTitle)
}
inline void Mesh::set_materialtitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  materialtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KuplungApp.Mesh.MaterialTitle)
}
inline void Mesh::set_materialtitle(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  materialtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KuplungApp.Mesh.MaterialTitle)
}
inline std::string* Mesh::mutable_materialtitle() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:KuplungApp.Mesh.MaterialTitle)
  return materialtitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Mesh::release_materialtitle() {
  // @@protoc_insertion_point(field_release:KuplungApp.Mesh.MaterialTitle)
  if (!has_materialtitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return materialtitle_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_materialtitle(std::string* materialtitle) {
  if (materialtitle != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  materialtitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), materialtitle);
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.Mesh.MaterialTitle)
}

// required int32 countVertices = 5;
inline bool Mesh::has_countvertices() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mesh::clear_countvertices() {
  countvertices_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh::countvertices() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.countVertices)
  return countvertices_;
}
inline void Mesh::set_countvertices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  countvertices_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Mesh.countVertices)
}

// required int32 countTextureCoordinates = 6;
inline bool Mesh::has_counttexturecoordinates() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mesh::clear_counttexturecoordinates() {
  counttexturecoordinates_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh::counttexturecoordinates() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.countTextureCoordinates)
  return counttexturecoordinates_;
}
inline void Mesh::set_counttexturecoordinates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  counttexturecoordinates_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Mesh.countTextureCoordinates)
}

// required int32 countNormals = 7;
inline bool Mesh::has_countnormals() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Mesh::clear_countnormals() {
  countnormals_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh::countnormals() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.countNormals)
  return countnormals_;
}
inline void Mesh::set_countnormals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  countnormals_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Mesh.countNormals)
}

// required int32 countIndices = 8;
inline bool Mesh::has_countindices() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Mesh::clear_countindices() {
  countindices_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh::countindices() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.countIndices)
  return countindices_;
}
inline void Mesh::set_countindices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  countindices_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Mesh.countIndices)
}

// required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
inline bool Mesh::has_modelmaterial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mesh::clear_modelmaterial() {
  if (modelmaterial_ != nullptr) modelmaterial_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::KuplungApp::MeshModelMaterial& Mesh::modelmaterial() const {
  const ::KuplungApp::MeshModelMaterial* p = modelmaterial_;
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.ModelMaterial)
  return p != nullptr ? *p : *reinterpret_cast<const ::KuplungApp::MeshModelMaterial*>(
      &::KuplungApp::_MeshModelMaterial_default_instance_);
}
inline ::KuplungApp::MeshModelMaterial* Mesh::release_modelmaterial() {
  // @@protoc_insertion_point(field_release:KuplungApp.Mesh.ModelMaterial)
  _has_bits_[0] &= ~0x00000008u;
  ::KuplungApp::MeshModelMaterial* temp = modelmaterial_;
  modelmaterial_ = nullptr;
  return temp;
}
inline ::KuplungApp::MeshModelMaterial* Mesh::mutable_modelmaterial() {
  _has_bits_[0] |= 0x00000008u;
  if (modelmaterial_ == nullptr) {
    auto* p = CreateMaybeMessage<::KuplungApp::MeshModelMaterial>(GetArenaNoVirtual());
    modelmaterial_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KuplungApp.Mesh.ModelMaterial)
  return modelmaterial_;
}
inline void Mesh::set_allocated_modelmaterial(::KuplungApp::MeshModelMaterial* modelmaterial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete modelmaterial_;
  }
  if (modelmaterial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      modelmaterial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modelmaterial, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  modelmaterial_ = modelmaterial;
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.Mesh.ModelMaterial)
}

// repeated .KuplungApp.Vec3 vertices = 10;
inline int Mesh::vertices_size() const {
  return vertices_.size();
}
inline void Mesh::clear_vertices() {
  vertices_.Clear();
}
inline ::KuplungApp::Vec3* Mesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:KuplungApp.Mesh.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec3 >*
Mesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:KuplungApp.Mesh.vertices)
  return &vertices_;
}
inline const ::KuplungApp::Vec3& Mesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.vertices)
  return vertices_.Get(index);
}
inline ::KuplungApp::Vec3* Mesh::add_vertices() {
  // @@protoc_insertion_point(field_add:KuplungApp.Mesh.vertices)
  return vertices_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec3 >&
Mesh::vertices() const {
  // @@protoc_insertion_point(field_list:KuplungApp.Mesh.vertices)
  return vertices_;
}

// repeated .KuplungApp.Vec2 texture_coordinates = 11;
inline int Mesh::texture_coordinates_size() const {
  return texture_coordinates_.size();
}
inline void Mesh::clear_texture_coordinates() {
  texture_coordinates_.Clear();
}
inline ::KuplungApp::Vec2* Mesh::mutable_texture_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:KuplungApp.Mesh.texture_coordinates)
  return texture_coordinates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec2 >*
Mesh::mutable_texture_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:KuplungApp.Mesh.texture_coordinates)
  return &texture_coordinates_;
}
inline const ::KuplungApp::Vec2& Mesh::texture_coordinates(int index) const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.texture_coordinates)
  return texture_coordinates_.Get(index);
}
inline ::KuplungApp::Vec2* Mesh::add_texture_coordinates() {
  // @@protoc_insertion_point(field_add:KuplungApp.Mesh.texture_coordinates)
  return texture_coordinates_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec2 >&
Mesh::texture_coordinates() const {
  // @@protoc_insertion_point(field_list:KuplungApp.Mesh.texture_coordinates)
  return texture_coordinates_;
}

// repeated .KuplungApp.Vec3 normals = 12;
inline int Mesh::normals_size() const {
  return normals_.size();
}
inline void Mesh::clear_normals() {
  normals_.Clear();
}
inline ::KuplungApp::Vec3* Mesh::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:KuplungApp.Mesh.normals)
  return normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec3 >*
Mesh::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:KuplungApp.Mesh.normals)
  return &normals_;
}
inline const ::KuplungApp::Vec3& Mesh::normals(int index) const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.normals)
  return normals_.Get(index);
}
inline ::KuplungApp::Vec3* Mesh::add_normals() {
  // @@protoc_insertion_point(field_add:KuplungApp.Mesh.normals)
  return normals_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KuplungApp::Vec3 >&
Mesh::normals() const {
  // @@protoc_insertion_point(field_list:KuplungApp.Mesh.normals)
  return normals_;
}

// repeated fixed32 indices = 13;
inline int Mesh::indices_size() const {
  return indices_.size();
}
inline void Mesh::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Mesh::indices(int index) const {
  // @@protoc_insertion_point(field_get:KuplungApp.Mesh.indices)
  return indices_.Get(index);
}
inline void Mesh::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:KuplungApp.Mesh.indices)
}
inline void Mesh::add_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  indices_.Add(value);
  // @@protoc_insertion_point(field_add:KuplungApp.Mesh.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Mesh::indices() const {
  // @@protoc_insertion_point(field_list:KuplungApp.Mesh.indices)
  return indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Mesh::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:KuplungApp.Mesh.indices)
  return &indices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KuplungApp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KuplungDefinitions_2eproto
