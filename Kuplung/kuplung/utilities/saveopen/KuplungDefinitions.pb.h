// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungDefinitions.proto

#ifndef PROTOBUF_KuplungDefinitions_2eproto__INCLUDED
#define PROTOBUF_KuplungDefinitions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace KuplungApp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_KuplungDefinitions_2eproto();
void protobuf_AssignDesc_KuplungDefinitions_2eproto();
void protobuf_ShutdownFile_KuplungDefinitions_2eproto();

class Vec2;
class Vec3;
class Vec4;
class ObjectCoordinate;
class MaterialColor;

// ===================================================================

class Vec2 : public ::google::protobuf::Message {
 public:
  Vec2();
  virtual ~Vec2();

  Vec2(const Vec2& from);

  inline Vec2& operator=(const Vec2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec2& default_instance();

  void Swap(Vec2* other);

  // implements Message ----------------------------------------------

  Vec2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec2& from);
  void MergeFrom(const Vec2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:KuplungApp.Vec2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_KuplungDefinitions_2eproto();
  friend void protobuf_AssignDesc_KuplungDefinitions_2eproto();
  friend void protobuf_ShutdownFile_KuplungDefinitions_2eproto();

  void InitAsDefaultInstance();
  static Vec2* default_instance_;
};
// -------------------------------------------------------------------

class Vec3 : public ::google::protobuf::Message {
 public:
  Vec3();
  virtual ~Vec3();

  Vec3(const Vec3& from);

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3& default_instance();

  void Swap(Vec3* other);

  // implements Message ----------------------------------------------

  Vec3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:KuplungApp.Vec3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_KuplungDefinitions_2eproto();
  friend void protobuf_AssignDesc_KuplungDefinitions_2eproto();
  friend void protobuf_ShutdownFile_KuplungDefinitions_2eproto();

  void InitAsDefaultInstance();
  static Vec3* default_instance_;
};
// -------------------------------------------------------------------

class Vec4 : public ::google::protobuf::Message {
 public:
  Vec4();
  virtual ~Vec4();

  Vec4(const Vec4& from);

  inline Vec4& operator=(const Vec4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec4& default_instance();

  void Swap(Vec4* other);

  // implements Message ----------------------------------------------

  Vec4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec4& from);
  void MergeFrom(const Vec4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // required float w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline float w() const;
  inline void set_w(float value);

  // @@protoc_insertion_point(class_scope:KuplungApp.Vec4)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  float w_;
  friend void  protobuf_AddDesc_KuplungDefinitions_2eproto();
  friend void protobuf_AssignDesc_KuplungDefinitions_2eproto();
  friend void protobuf_ShutdownFile_KuplungDefinitions_2eproto();

  void InitAsDefaultInstance();
  static Vec4* default_instance_;
};
// -------------------------------------------------------------------

class ObjectCoordinate : public ::google::protobuf::Message {
 public:
  ObjectCoordinate();
  virtual ~ObjectCoordinate();

  ObjectCoordinate(const ObjectCoordinate& from);

  inline ObjectCoordinate& operator=(const ObjectCoordinate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectCoordinate& default_instance();

  void Swap(ObjectCoordinate* other);

  // implements Message ----------------------------------------------

  ObjectCoordinate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectCoordinate& from);
  void MergeFrom(const ObjectCoordinate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool animate = 1;
  inline bool has_animate() const;
  inline void clear_animate();
  static const int kAnimateFieldNumber = 1;
  inline bool animate() const;
  inline void set_animate(bool value);

  // required float point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline float point() const;
  inline void set_point(float value);

  // @@protoc_insertion_point(class_scope:KuplungApp.ObjectCoordinate)
 private:
  inline void set_has_animate();
  inline void clear_has_animate();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool animate_;
  float point_;
  friend void  protobuf_AddDesc_KuplungDefinitions_2eproto();
  friend void protobuf_AssignDesc_KuplungDefinitions_2eproto();
  friend void protobuf_ShutdownFile_KuplungDefinitions_2eproto();

  void InitAsDefaultInstance();
  static ObjectCoordinate* default_instance_;
};
// -------------------------------------------------------------------

class MaterialColor : public ::google::protobuf::Message {
 public:
  MaterialColor();
  virtual ~MaterialColor();

  MaterialColor(const MaterialColor& from);

  inline MaterialColor& operator=(const MaterialColor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaterialColor& default_instance();

  void Swap(MaterialColor* other);

  // implements Message ----------------------------------------------

  MaterialColor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaterialColor& from);
  void MergeFrom(const MaterialColor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool colorPickerOpen = 1;
  inline bool has_colorpickeropen() const;
  inline void clear_colorpickeropen();
  static const int kColorPickerOpenFieldNumber = 1;
  inline bool colorpickeropen() const;
  inline void set_colorpickeropen(bool value);

  // required bool animate = 2;
  inline bool has_animate() const;
  inline void clear_animate();
  static const int kAnimateFieldNumber = 2;
  inline bool animate() const;
  inline void set_animate(bool value);

  // required float strength = 3;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 3;
  inline float strength() const;
  inline void set_strength(float value);

  // required .KuplungApp.Vec3 color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline const ::KuplungApp::Vec3& color() const;
  inline ::KuplungApp::Vec3* mutable_color();
  inline ::KuplungApp::Vec3* release_color();
  inline void set_allocated_color(::KuplungApp::Vec3* color);

  // @@protoc_insertion_point(class_scope:KuplungApp.MaterialColor)
 private:
  inline void set_has_colorpickeropen();
  inline void clear_has_colorpickeropen();
  inline void set_has_animate();
  inline void clear_has_animate();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool colorpickeropen_;
  bool animate_;
  float strength_;
  ::KuplungApp::Vec3* color_;
  friend void  protobuf_AddDesc_KuplungDefinitions_2eproto();
  friend void protobuf_AssignDesc_KuplungDefinitions_2eproto();
  friend void protobuf_ShutdownFile_KuplungDefinitions_2eproto();

  void InitAsDefaultInstance();
  static MaterialColor* default_instance_;
};
// ===================================================================


// ===================================================================

// Vec2

// required float x = 1;
inline bool Vec2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vec2::x() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec2.x)
  return x_;
}
inline void Vec2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec2.x)
}

// required float y = 2;
inline bool Vec2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vec2::y() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec2.y)
  return y_;
}
inline void Vec2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec2.y)
}

// -------------------------------------------------------------------

// Vec3

// required float x = 1;
inline bool Vec3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vec3::x() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec3.x)
  return x_;
}
inline void Vec3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec3.x)
}

// required float y = 2;
inline bool Vec3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vec3::y() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec3.y)
  return y_;
}
inline void Vec3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec3.y)
}

// required float z = 3;
inline bool Vec3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vec3::z() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec3.z)
  return z_;
}
inline void Vec3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec3.z)
}

// -------------------------------------------------------------------

// Vec4

// required float x = 1;
inline bool Vec4::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec4::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec4::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec4::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vec4::x() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec4.x)
  return x_;
}
inline void Vec4::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec4.x)
}

// required float y = 2;
inline bool Vec4::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec4::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec4::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec4::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vec4::y() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec4.y)
  return y_;
}
inline void Vec4::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec4.y)
}

// required float z = 3;
inline bool Vec4::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec4::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec4::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec4::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vec4::z() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec4.z)
  return z_;
}
inline void Vec4::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec4.z)
}

// required float w = 4;
inline bool Vec4::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vec4::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vec4::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vec4::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float Vec4::w() const {
  // @@protoc_insertion_point(field_get:KuplungApp.Vec4.w)
  return w_;
}
inline void Vec4::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.Vec4.w)
}

// -------------------------------------------------------------------

// ObjectCoordinate

// required bool animate = 1;
inline bool ObjectCoordinate::has_animate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectCoordinate::set_has_animate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectCoordinate::clear_has_animate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectCoordinate::clear_animate() {
  animate_ = false;
  clear_has_animate();
}
inline bool ObjectCoordinate::animate() const {
  // @@protoc_insertion_point(field_get:KuplungApp.ObjectCoordinate.animate)
  return animate_;
}
inline void ObjectCoordinate::set_animate(bool value) {
  set_has_animate();
  animate_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.ObjectCoordinate.animate)
}

// required float point = 2;
inline bool ObjectCoordinate::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectCoordinate::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectCoordinate::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectCoordinate::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline float ObjectCoordinate::point() const {
  // @@protoc_insertion_point(field_get:KuplungApp.ObjectCoordinate.point)
  return point_;
}
inline void ObjectCoordinate::set_point(float value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.ObjectCoordinate.point)
}

// -------------------------------------------------------------------

// MaterialColor

// required bool colorPickerOpen = 1;
inline bool MaterialColor::has_colorpickeropen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaterialColor::set_has_colorpickeropen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaterialColor::clear_has_colorpickeropen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaterialColor::clear_colorpickeropen() {
  colorpickeropen_ = false;
  clear_has_colorpickeropen();
}
inline bool MaterialColor::colorpickeropen() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MaterialColor.colorPickerOpen)
  return colorpickeropen_;
}
inline void MaterialColor::set_colorpickeropen(bool value) {
  set_has_colorpickeropen();
  colorpickeropen_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MaterialColor.colorPickerOpen)
}

// required bool animate = 2;
inline bool MaterialColor::has_animate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaterialColor::set_has_animate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaterialColor::clear_has_animate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaterialColor::clear_animate() {
  animate_ = false;
  clear_has_animate();
}
inline bool MaterialColor::animate() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MaterialColor.animate)
  return animate_;
}
inline void MaterialColor::set_animate(bool value) {
  set_has_animate();
  animate_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MaterialColor.animate)
}

// required float strength = 3;
inline bool MaterialColor::has_strength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaterialColor::set_has_strength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaterialColor::clear_has_strength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaterialColor::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline float MaterialColor::strength() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MaterialColor.strength)
  return strength_;
}
inline void MaterialColor::set_strength(float value) {
  set_has_strength();
  strength_ = value;
  // @@protoc_insertion_point(field_set:KuplungApp.MaterialColor.strength)
}

// required .KuplungApp.Vec3 color = 4;
inline bool MaterialColor::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaterialColor::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaterialColor::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaterialColor::clear_color() {
  if (color_ != NULL) color_->::KuplungApp::Vec3::Clear();
  clear_has_color();
}
inline const ::KuplungApp::Vec3& MaterialColor::color() const {
  // @@protoc_insertion_point(field_get:KuplungApp.MaterialColor.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::KuplungApp::Vec3* MaterialColor::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::KuplungApp::Vec3;
  // @@protoc_insertion_point(field_mutable:KuplungApp.MaterialColor.color)
  return color_;
}
inline ::KuplungApp::Vec3* MaterialColor::release_color() {
  clear_has_color();
  ::KuplungApp::Vec3* temp = color_;
  color_ = NULL;
  return temp;
}
inline void MaterialColor::set_allocated_color(::KuplungApp::Vec3* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
  // @@protoc_insertion_point(field_set_allocated:KuplungApp.MaterialColor.color)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KuplungApp

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KuplungDefinitions_2eproto__INCLUDED
