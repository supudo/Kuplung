// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungAppScene.proto

#include "KuplungAppScene.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MaterialColor_KuplungDefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Mesh_KuplungDefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungAppScene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MeshModel_KuplungAppScene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectCoordinate_KuplungDefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_KuplungDefinitions_2eproto;
namespace KuplungApp {
class SceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene> _instance;
} _Scene_default_instance_;
class MeshModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshModel> _instance;
} _MeshModel_default_instance_;
}  // namespace KuplungApp
static void InitDefaultsscc_info_MeshModel_KuplungAppScene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_MeshModel_default_instance_;
    new (ptr) ::KuplungApp::MeshModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::MeshModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MeshModel_KuplungAppScene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MeshModel_KuplungAppScene_2eproto}, {
      &scc_info_ObjectCoordinate_KuplungDefinitions_2eproto.base,
      &scc_info_Vec3_KuplungDefinitions_2eproto.base,
      &scc_info_MaterialColor_KuplungDefinitions_2eproto.base,
      &scc_info_Mesh_KuplungDefinitions_2eproto.base,}};

static void InitDefaultsscc_info_Scene_KuplungAppScene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_Scene_default_instance_;
    new (ptr) ::KuplungApp::Scene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::Scene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_KuplungAppScene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scene_KuplungAppScene_2eproto}, {
      &scc_info_MeshModel_KuplungAppScene_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_KuplungAppScene_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_KuplungAppScene_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_KuplungAppScene_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_KuplungAppScene_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Scene, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Scene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Scene, models_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, modelid_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, settings_deferredrender_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_celshading_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_wireframe_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_usetessellation_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_usecullface_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_alpha_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_tessellationsubdivision_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, positionx_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, positiony_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, positionz_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, scalex_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, scaley_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, scalez_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, rotatex_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, rotatey_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, rotatez_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, displacex_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, displacey_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, displacez_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_materialrefraction_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_materialspecularexp_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_modelviewskin_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, solidlightskin_materialcolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, solidlightskin_ambient_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, solidlightskin_diffuse_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, solidlightskin_specular_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, solidlightskin_ambient_strength_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, solidlightskin_diffuse_strength_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, solidlightskin_specular_strength_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_lightposition_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_lightdirection_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_lightambient_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_lightdiffuse_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_lightspecular_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_lightstrengthambient_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_lightstrengthdiffuse_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_lightstrengthspecular_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, materialilluminationmodel_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, displacementheightscale_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, showmaterialeditor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, materialambient_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, materialdiffuse_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, materialspecular_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, materialemission_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_parallaxmapping_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, effect_gblur_mode_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, effect_gblur_radius_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, effect_gblur_width_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, effect_bloom_dobloom_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, effect_bloom_weighta_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, effect_bloom_weightb_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, effect_bloom_weightc_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, effect_bloom_weightd_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, effect_bloom_vignette_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, effect_bloom_vignetteatt_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, setting_lightingpass_drawmode_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModel, meshobject_),
  31,
  32,
  33,
  34,
  35,
  42,
  36,
  37,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  38,
  14,
  15,
  16,
  17,
  39,
  40,
  41,
  18,
  19,
  20,
  21,
  22,
  46,
  47,
  48,
  49,
  23,
  43,
  24,
  25,
  26,
  27,
  44,
  50,
  28,
  29,
  45,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  30,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::KuplungApp::Scene)},
  { 7, 70, sizeof(::KuplungApp::MeshModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_Scene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_MeshModel_default_instance_),
};

const char descriptor_table_protodef_KuplungAppScene_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025KuplungAppScene.proto\022\nKuplungApp\032\030Kup"
  "lungDefinitions.proto\".\n\005Scene\022%\n\006models"
  "\030\001 \003(\0132\025.KuplungApp.MeshModel\"\252\023\n\tMeshMo"
  "del\022\017\n\007ModelID\030\001 \002(\005\022\037\n\027Settings_Deferre"
  "dRender\030\002 \002(\010\022\032\n\022Setting_CelShading\030\003 \002("
  "\010\022\031\n\021Setting_Wireframe\030\004 \002(\010\022\037\n\027Setting_"
  "UseTessellation\030\005 \002(\010\022\033\n\023Setting_UseCull"
  "Face\030\006 \002(\010\022\025\n\rSetting_Alpha\030\007 \002(\002\022\'\n\037Set"
  "ting_TessellationSubdivision\030\010 \002(\005\022/\n\tpo"
  "sitionX\030\t \002(\0132\034.KuplungApp.ObjectCoordin"
  "ate\022/\n\tpositionY\030\n \002(\0132\034.KuplungApp.Obje"
  "ctCoordinate\022/\n\tpositionZ\030\013 \002(\0132\034.Kuplun"
  "gApp.ObjectCoordinate\022,\n\006scaleX\030\014 \002(\0132\034."
  "KuplungApp.ObjectCoordinate\022,\n\006scaleY\030\r "
  "\002(\0132\034.KuplungApp.ObjectCoordinate\022,\n\006sca"
  "leZ\030\016 \002(\0132\034.KuplungApp.ObjectCoordinate\022"
  "-\n\007rotateX\030\017 \002(\0132\034.KuplungApp.ObjectCoor"
  "dinate\022-\n\007rotateY\030\020 \002(\0132\034.KuplungApp.Obj"
  "ectCoordinate\022-\n\007rotateZ\030\021 \002(\0132\034.Kuplung"
  "App.ObjectCoordinate\022/\n\tdisplaceX\030\022 \002(\0132"
  "\034.KuplungApp.ObjectCoordinate\022/\n\tdisplac"
  "eY\030\023 \002(\0132\034.KuplungApp.ObjectCoordinate\022/"
  "\n\tdisplaceZ\030\024 \002(\0132\034.KuplungApp.ObjectCoo"
  "rdinate\022@\n\032Setting_MaterialRefraction\030\025 "
  "\002(\0132\034.KuplungApp.ObjectCoordinate\022A\n\033Set"
  "ting_MaterialSpecularExp\030\026 \002(\0132\034.Kuplung"
  "App.ObjectCoordinate\022\035\n\025Setting_ModelVie"
  "wSkin\030\027 \002(\005\0226\n\034solidLightSkin_MaterialCo"
  "lor\030\030 \002(\0132\020.KuplungApp.Vec3\0220\n\026solidLigh"
  "tSkin_Ambient\030\031 \002(\0132\020.KuplungApp.Vec3\0220\n"
  "\026solidLightSkin_Diffuse\030\032 \002(\0132\020.KuplungA"
  "pp.Vec3\0221\n\027solidLightSkin_Specular\030\033 \002(\013"
  "2\020.KuplungApp.Vec3\022\'\n\037solidLightSkin_Amb"
  "ient_Strength\030\034 \002(\002\022\'\n\037solidLightSkin_Di"
  "ffuse_Strength\030\035 \002(\002\022(\n solidLightSkin_S"
  "pecular_Strength\030\036 \002(\002\022/\n\025Setting_LightP"
  "osition\030\037 \002(\0132\020.KuplungApp.Vec3\0220\n\026Setti"
  "ng_LightDirection\030  \002(\0132\020.KuplungApp.Vec"
  "3\022.\n\024Setting_LightAmbient\030! \002(\0132\020.Kuplun"
  "gApp.Vec3\022.\n\024Setting_LightDiffuse\030\" \002(\0132"
  "\020.KuplungApp.Vec3\022/\n\025Setting_LightSpecul"
  "ar\030# \002(\0132\020.KuplungApp.Vec3\022$\n\034Setting_Li"
  "ghtStrengthAmbient\030$ \002(\002\022$\n\034Setting_Ligh"
  "tStrengthDiffuse\030% \002(\002\022%\n\035Setting_LightS"
  "trengthSpecular\030& \002(\002\022!\n\031materialIllumin"
  "ationModel\030\' \002(\005\022=\n\027displacementHeightSc"
  "ale\030( \002(\0132\034.KuplungApp.ObjectCoordinate\022"
  "\032\n\022showMaterialEditor\030) \002(\010\0222\n\017materialA"
  "mbient\030* \002(\0132\031.KuplungApp.MaterialColor\022"
  "2\n\017materialDiffuse\030+ \002(\0132\031.KuplungApp.Ma"
  "terialColor\0223\n\020materialSpecular\030, \002(\0132\031."
  "KuplungApp.MaterialColor\0223\n\020materialEmis"
  "sion\030- \002(\0132\031.KuplungApp.MaterialColor\022\037\n"
  "\027Setting_ParallaxMapping\030. \002(\010\022\031\n\021Effect"
  "_GBlur_Mode\030/ \002(\005\0229\n\023Effect_GBlur_Radius"
  "\0300 \002(\0132\034.KuplungApp.ObjectCoordinate\0228\n\022"
  "Effect_GBlur_Width\0301 \002(\0132\034.KuplungApp.Ob"
  "jectCoordinate\022\034\n\024Effect_Bloom_doBloom\0302"
  " \002(\010\022\034\n\024Effect_Bloom_WeightA\0303 \002(\002\022\034\n\024Ef"
  "fect_Bloom_WeightB\0304 \002(\002\022\034\n\024Effect_Bloom"
  "_WeightC\0305 \002(\002\022\034\n\024Effect_Bloom_WeightD\0306"
  " \002(\002\022\035\n\025Effect_Bloom_Vignette\0307 \002(\002\022 \n\030E"
  "ffect_Bloom_VignetteAtt\0308 \002(\002\022%\n\035Setting"
  "_LightingPass_DrawMode\0309 \002(\005\022$\n\nmeshObje"
  "ct\030: \002(\0132\020.KuplungApp.Mesh"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_KuplungAppScene_2eproto_deps[1] = {
  &::descriptor_table_KuplungDefinitions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_KuplungAppScene_2eproto_sccs[2] = {
  &scc_info_MeshModel_KuplungAppScene_2eproto.base,
  &scc_info_Scene_KuplungAppScene_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_KuplungAppScene_2eproto_once;
static bool descriptor_table_KuplungAppScene_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KuplungAppScene_2eproto = {
  &descriptor_table_KuplungAppScene_2eproto_initialized, descriptor_table_protodef_KuplungAppScene_2eproto, "KuplungAppScene.proto", 2586,
  &descriptor_table_KuplungAppScene_2eproto_once, descriptor_table_KuplungAppScene_2eproto_sccs, descriptor_table_KuplungAppScene_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_KuplungAppScene_2eproto::offsets,
  file_level_metadata_KuplungAppScene_2eproto, 2, file_level_enum_descriptors_KuplungAppScene_2eproto, file_level_service_descriptors_KuplungAppScene_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_KuplungAppScene_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_KuplungAppScene_2eproto), true);
namespace KuplungApp {

// ===================================================================

void Scene::InitAsDefaultInstance() {
}
class Scene::_Internal {
 public:
  using HasBits = decltype(std::declval<Scene>()._has_bits_);
};

Scene::Scene()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.Scene)
}
Scene::Scene(const Scene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      models_(from.models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Scene)
}

void Scene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_KuplungAppScene_2eproto.base);
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:KuplungApp.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
}

void Scene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scene& Scene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_KuplungAppScene_2eproto.base);
  return *internal_default_instance();
}


void Scene::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Scene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .KuplungApp.MeshModel models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Scene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KuplungApp.MeshModel models = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_models(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Scene)
  return target;
}

size_t Scene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Scene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KuplungApp.MeshModel models = 1;
  total_size += 1UL * this->_internal_models_size();
  for (const auto& msg : this->models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.Scene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.Scene)
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
}

void Scene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(models_)) return false;
  return true;
}

void Scene::InternalSwap(Scene* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  models_.InternalSwap(&other->models_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshModel::InitAsDefaultInstance() {
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->positionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->positiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->positionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->scalex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->scaley_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->scalez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->rotatex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->rotatey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->rotatez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->displacex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->displacey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->displacez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->setting_materialrefraction_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->setting_materialspecularexp_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->solidlightskin_materialcolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->solidlightskin_ambient_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->solidlightskin_diffuse_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->solidlightskin_specular_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->setting_lightposition_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->setting_lightdirection_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->setting_lightambient_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->setting_lightdiffuse_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->setting_lightspecular_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->displacementheightscale_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->materialambient_ = const_cast< ::KuplungApp::MaterialColor*>(
      ::KuplungApp::MaterialColor::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->materialdiffuse_ = const_cast< ::KuplungApp::MaterialColor*>(
      ::KuplungApp::MaterialColor::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->materialspecular_ = const_cast< ::KuplungApp::MaterialColor*>(
      ::KuplungApp::MaterialColor::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->materialemission_ = const_cast< ::KuplungApp::MaterialColor*>(
      ::KuplungApp::MaterialColor::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->effect_gblur_radius_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->effect_gblur_width_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_MeshModel_default_instance_._instance.get_mutable()->meshobject_ = const_cast< ::KuplungApp::Mesh*>(
      ::KuplungApp::Mesh::internal_default_instance());
}
class MeshModel::_Internal {
 public:
  using HasBits = decltype(std::declval<MeshModel>()._has_bits_);
  static void set_has_modelid(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_settings_deferredrender(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_setting_celshading(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_setting_wireframe(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_setting_usetessellation(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_setting_usecullface(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_setting_alpha(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_setting_tessellationsubdivision(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::KuplungApp::ObjectCoordinate& positionx(const MeshModel* msg);
  static void set_has_positionx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KuplungApp::ObjectCoordinate& positiony(const MeshModel* msg);
  static void set_has_positiony(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KuplungApp::ObjectCoordinate& positionz(const MeshModel* msg);
  static void set_has_positionz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KuplungApp::ObjectCoordinate& scalex(const MeshModel* msg);
  static void set_has_scalex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KuplungApp::ObjectCoordinate& scaley(const MeshModel* msg);
  static void set_has_scaley(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KuplungApp::ObjectCoordinate& scalez(const MeshModel* msg);
  static void set_has_scalez(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatex(const MeshModel* msg);
  static void set_has_rotatex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatey(const MeshModel* msg);
  static void set_has_rotatey(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatez(const MeshModel* msg);
  static void set_has_rotatez(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KuplungApp::ObjectCoordinate& displacex(const MeshModel* msg);
  static void set_has_displacex(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::KuplungApp::ObjectCoordinate& displacey(const MeshModel* msg);
  static void set_has_displacey(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::KuplungApp::ObjectCoordinate& displacez(const MeshModel* msg);
  static void set_has_displacez(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::KuplungApp::ObjectCoordinate& setting_materialrefraction(const MeshModel* msg);
  static void set_has_setting_materialrefraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::KuplungApp::ObjectCoordinate& setting_materialspecularexp(const MeshModel* msg);
  static void set_has_setting_materialspecularexp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_setting_modelviewskin(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::KuplungApp::Vec3& solidlightskin_materialcolor(const MeshModel* msg);
  static void set_has_solidlightskin_materialcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::KuplungApp::Vec3& solidlightskin_ambient(const MeshModel* msg);
  static void set_has_solidlightskin_ambient(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::KuplungApp::Vec3& solidlightskin_diffuse(const MeshModel* msg);
  static void set_has_solidlightskin_diffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::KuplungApp::Vec3& solidlightskin_specular(const MeshModel* msg);
  static void set_has_solidlightskin_specular(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_solidlightskin_ambient_strength(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_solidlightskin_diffuse_strength(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_solidlightskin_specular_strength(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::KuplungApp::Vec3& setting_lightposition(const MeshModel* msg);
  static void set_has_setting_lightposition(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::KuplungApp::Vec3& setting_lightdirection(const MeshModel* msg);
  static void set_has_setting_lightdirection(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::KuplungApp::Vec3& setting_lightambient(const MeshModel* msg);
  static void set_has_setting_lightambient(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::KuplungApp::Vec3& setting_lightdiffuse(const MeshModel* msg);
  static void set_has_setting_lightdiffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::KuplungApp::Vec3& setting_lightspecular(const MeshModel* msg);
  static void set_has_setting_lightspecular(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_setting_lightstrengthambient(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_setting_lightstrengthdiffuse(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_setting_lightstrengthspecular(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_materialilluminationmodel(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::KuplungApp::ObjectCoordinate& displacementheightscale(const MeshModel* msg);
  static void set_has_displacementheightscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_showmaterialeditor(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::KuplungApp::MaterialColor& materialambient(const MeshModel* msg);
  static void set_has_materialambient(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::KuplungApp::MaterialColor& materialdiffuse(const MeshModel* msg);
  static void set_has_materialdiffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::KuplungApp::MaterialColor& materialspecular(const MeshModel* msg);
  static void set_has_materialspecular(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::KuplungApp::MaterialColor& materialemission(const MeshModel* msg);
  static void set_has_materialemission(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_setting_parallaxmapping(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_effect_gblur_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::KuplungApp::ObjectCoordinate& effect_gblur_radius(const MeshModel* msg);
  static void set_has_effect_gblur_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::KuplungApp::ObjectCoordinate& effect_gblur_width(const MeshModel* msg);
  static void set_has_effect_gblur_width(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_effect_bloom_dobloom(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_effect_bloom_weighta(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_effect_bloom_weightb(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_effect_bloom_weightc(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_effect_bloom_weightd(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_effect_bloom_vignette(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_effect_bloom_vignetteatt(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_setting_lightingpass_drawmode(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::KuplungApp::Mesh& meshobject(const MeshModel* msg);
  static void set_has_meshobject(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::positionx(const MeshModel* msg) {
  return *msg->positionx_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::positiony(const MeshModel* msg) {
  return *msg->positiony_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::positionz(const MeshModel* msg) {
  return *msg->positionz_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::scalex(const MeshModel* msg) {
  return *msg->scalex_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::scaley(const MeshModel* msg) {
  return *msg->scaley_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::scalez(const MeshModel* msg) {
  return *msg->scalez_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::rotatex(const MeshModel* msg) {
  return *msg->rotatex_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::rotatey(const MeshModel* msg) {
  return *msg->rotatey_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::rotatez(const MeshModel* msg) {
  return *msg->rotatez_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::displacex(const MeshModel* msg) {
  return *msg->displacex_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::displacey(const MeshModel* msg) {
  return *msg->displacey_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::displacez(const MeshModel* msg) {
  return *msg->displacez_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::setting_materialrefraction(const MeshModel* msg) {
  return *msg->setting_materialrefraction_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::setting_materialspecularexp(const MeshModel* msg) {
  return *msg->setting_materialspecularexp_;
}
const ::KuplungApp::Vec3&
MeshModel::_Internal::solidlightskin_materialcolor(const MeshModel* msg) {
  return *msg->solidlightskin_materialcolor_;
}
const ::KuplungApp::Vec3&
MeshModel::_Internal::solidlightskin_ambient(const MeshModel* msg) {
  return *msg->solidlightskin_ambient_;
}
const ::KuplungApp::Vec3&
MeshModel::_Internal::solidlightskin_diffuse(const MeshModel* msg) {
  return *msg->solidlightskin_diffuse_;
}
const ::KuplungApp::Vec3&
MeshModel::_Internal::solidlightskin_specular(const MeshModel* msg) {
  return *msg->solidlightskin_specular_;
}
const ::KuplungApp::Vec3&
MeshModel::_Internal::setting_lightposition(const MeshModel* msg) {
  return *msg->setting_lightposition_;
}
const ::KuplungApp::Vec3&
MeshModel::_Internal::setting_lightdirection(const MeshModel* msg) {
  return *msg->setting_lightdirection_;
}
const ::KuplungApp::Vec3&
MeshModel::_Internal::setting_lightambient(const MeshModel* msg) {
  return *msg->setting_lightambient_;
}
const ::KuplungApp::Vec3&
MeshModel::_Internal::setting_lightdiffuse(const MeshModel* msg) {
  return *msg->setting_lightdiffuse_;
}
const ::KuplungApp::Vec3&
MeshModel::_Internal::setting_lightspecular(const MeshModel* msg) {
  return *msg->setting_lightspecular_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::displacementheightscale(const MeshModel* msg) {
  return *msg->displacementheightscale_;
}
const ::KuplungApp::MaterialColor&
MeshModel::_Internal::materialambient(const MeshModel* msg) {
  return *msg->materialambient_;
}
const ::KuplungApp::MaterialColor&
MeshModel::_Internal::materialdiffuse(const MeshModel* msg) {
  return *msg->materialdiffuse_;
}
const ::KuplungApp::MaterialColor&
MeshModel::_Internal::materialspecular(const MeshModel* msg) {
  return *msg->materialspecular_;
}
const ::KuplungApp::MaterialColor&
MeshModel::_Internal::materialemission(const MeshModel* msg) {
  return *msg->materialemission_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::effect_gblur_radius(const MeshModel* msg) {
  return *msg->effect_gblur_radius_;
}
const ::KuplungApp::ObjectCoordinate&
MeshModel::_Internal::effect_gblur_width(const MeshModel* msg) {
  return *msg->effect_gblur_width_;
}
const ::KuplungApp::Mesh&
MeshModel::_Internal::meshobject(const MeshModel* msg) {
  return *msg->meshobject_;
}
void MeshModel::clear_positionx() {
  if (positionx_ != nullptr) positionx_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MeshModel::clear_positiony() {
  if (positiony_ != nullptr) positiony_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MeshModel::clear_positionz() {
  if (positionz_ != nullptr) positionz_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void MeshModel::clear_scalex() {
  if (scalex_ != nullptr) scalex_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void MeshModel::clear_scaley() {
  if (scaley_ != nullptr) scaley_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void MeshModel::clear_scalez() {
  if (scalez_ != nullptr) scalez_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void MeshModel::clear_rotatex() {
  if (rotatex_ != nullptr) rotatex_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void MeshModel::clear_rotatey() {
  if (rotatey_ != nullptr) rotatey_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void MeshModel::clear_rotatez() {
  if (rotatez_ != nullptr) rotatez_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void MeshModel::clear_displacex() {
  if (displacex_ != nullptr) displacex_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void MeshModel::clear_displacey() {
  if (displacey_ != nullptr) displacey_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void MeshModel::clear_displacez() {
  if (displacez_ != nullptr) displacez_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void MeshModel::clear_setting_materialrefraction() {
  if (setting_materialrefraction_ != nullptr) setting_materialrefraction_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void MeshModel::clear_setting_materialspecularexp() {
  if (setting_materialspecularexp_ != nullptr) setting_materialspecularexp_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void MeshModel::clear_solidlightskin_materialcolor() {
  if (solidlightskin_materialcolor_ != nullptr) solidlightskin_materialcolor_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void MeshModel::clear_solidlightskin_ambient() {
  if (solidlightskin_ambient_ != nullptr) solidlightskin_ambient_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void MeshModel::clear_solidlightskin_diffuse() {
  if (solidlightskin_diffuse_ != nullptr) solidlightskin_diffuse_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void MeshModel::clear_solidlightskin_specular() {
  if (solidlightskin_specular_ != nullptr) solidlightskin_specular_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void MeshModel::clear_setting_lightposition() {
  if (setting_lightposition_ != nullptr) setting_lightposition_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void MeshModel::clear_setting_lightdirection() {
  if (setting_lightdirection_ != nullptr) setting_lightdirection_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void MeshModel::clear_setting_lightambient() {
  if (setting_lightambient_ != nullptr) setting_lightambient_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void MeshModel::clear_setting_lightdiffuse() {
  if (setting_lightdiffuse_ != nullptr) setting_lightdiffuse_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void MeshModel::clear_setting_lightspecular() {
  if (setting_lightspecular_ != nullptr) setting_lightspecular_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void MeshModel::clear_displacementheightscale() {
  if (displacementheightscale_ != nullptr) displacementheightscale_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void MeshModel::clear_materialambient() {
  if (materialambient_ != nullptr) materialambient_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void MeshModel::clear_materialdiffuse() {
  if (materialdiffuse_ != nullptr) materialdiffuse_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void MeshModel::clear_materialspecular() {
  if (materialspecular_ != nullptr) materialspecular_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void MeshModel::clear_materialemission() {
  if (materialemission_ != nullptr) materialemission_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void MeshModel::clear_effect_gblur_radius() {
  if (effect_gblur_radius_ != nullptr) effect_gblur_radius_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
void MeshModel::clear_effect_gblur_width() {
  if (effect_gblur_width_ != nullptr) effect_gblur_width_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
void MeshModel::clear_meshobject() {
  if (meshobject_ != nullptr) meshobject_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
MeshModel::MeshModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.MeshModel)
}
MeshModel::MeshModel(const MeshModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_positionx()) {
    positionx_ = new ::KuplungApp::ObjectCoordinate(*from.positionx_);
  } else {
    positionx_ = nullptr;
  }
  if (from._internal_has_positiony()) {
    positiony_ = new ::KuplungApp::ObjectCoordinate(*from.positiony_);
  } else {
    positiony_ = nullptr;
  }
  if (from._internal_has_positionz()) {
    positionz_ = new ::KuplungApp::ObjectCoordinate(*from.positionz_);
  } else {
    positionz_ = nullptr;
  }
  if (from._internal_has_scalex()) {
    scalex_ = new ::KuplungApp::ObjectCoordinate(*from.scalex_);
  } else {
    scalex_ = nullptr;
  }
  if (from._internal_has_scaley()) {
    scaley_ = new ::KuplungApp::ObjectCoordinate(*from.scaley_);
  } else {
    scaley_ = nullptr;
  }
  if (from._internal_has_scalez()) {
    scalez_ = new ::KuplungApp::ObjectCoordinate(*from.scalez_);
  } else {
    scalez_ = nullptr;
  }
  if (from._internal_has_rotatex()) {
    rotatex_ = new ::KuplungApp::ObjectCoordinate(*from.rotatex_);
  } else {
    rotatex_ = nullptr;
  }
  if (from._internal_has_rotatey()) {
    rotatey_ = new ::KuplungApp::ObjectCoordinate(*from.rotatey_);
  } else {
    rotatey_ = nullptr;
  }
  if (from._internal_has_rotatez()) {
    rotatez_ = new ::KuplungApp::ObjectCoordinate(*from.rotatez_);
  } else {
    rotatez_ = nullptr;
  }
  if (from._internal_has_displacex()) {
    displacex_ = new ::KuplungApp::ObjectCoordinate(*from.displacex_);
  } else {
    displacex_ = nullptr;
  }
  if (from._internal_has_displacey()) {
    displacey_ = new ::KuplungApp::ObjectCoordinate(*from.displacey_);
  } else {
    displacey_ = nullptr;
  }
  if (from._internal_has_displacez()) {
    displacez_ = new ::KuplungApp::ObjectCoordinate(*from.displacez_);
  } else {
    displacez_ = nullptr;
  }
  if (from._internal_has_setting_materialrefraction()) {
    setting_materialrefraction_ = new ::KuplungApp::ObjectCoordinate(*from.setting_materialrefraction_);
  } else {
    setting_materialrefraction_ = nullptr;
  }
  if (from._internal_has_setting_materialspecularexp()) {
    setting_materialspecularexp_ = new ::KuplungApp::ObjectCoordinate(*from.setting_materialspecularexp_);
  } else {
    setting_materialspecularexp_ = nullptr;
  }
  if (from._internal_has_solidlightskin_materialcolor()) {
    solidlightskin_materialcolor_ = new ::KuplungApp::Vec3(*from.solidlightskin_materialcolor_);
  } else {
    solidlightskin_materialcolor_ = nullptr;
  }
  if (from._internal_has_solidlightskin_ambient()) {
    solidlightskin_ambient_ = new ::KuplungApp::Vec3(*from.solidlightskin_ambient_);
  } else {
    solidlightskin_ambient_ = nullptr;
  }
  if (from._internal_has_solidlightskin_diffuse()) {
    solidlightskin_diffuse_ = new ::KuplungApp::Vec3(*from.solidlightskin_diffuse_);
  } else {
    solidlightskin_diffuse_ = nullptr;
  }
  if (from._internal_has_solidlightskin_specular()) {
    solidlightskin_specular_ = new ::KuplungApp::Vec3(*from.solidlightskin_specular_);
  } else {
    solidlightskin_specular_ = nullptr;
  }
  if (from._internal_has_setting_lightposition()) {
    setting_lightposition_ = new ::KuplungApp::Vec3(*from.setting_lightposition_);
  } else {
    setting_lightposition_ = nullptr;
  }
  if (from._internal_has_setting_lightdirection()) {
    setting_lightdirection_ = new ::KuplungApp::Vec3(*from.setting_lightdirection_);
  } else {
    setting_lightdirection_ = nullptr;
  }
  if (from._internal_has_setting_lightambient()) {
    setting_lightambient_ = new ::KuplungApp::Vec3(*from.setting_lightambient_);
  } else {
    setting_lightambient_ = nullptr;
  }
  if (from._internal_has_setting_lightdiffuse()) {
    setting_lightdiffuse_ = new ::KuplungApp::Vec3(*from.setting_lightdiffuse_);
  } else {
    setting_lightdiffuse_ = nullptr;
  }
  if (from._internal_has_setting_lightspecular()) {
    setting_lightspecular_ = new ::KuplungApp::Vec3(*from.setting_lightspecular_);
  } else {
    setting_lightspecular_ = nullptr;
  }
  if (from._internal_has_displacementheightscale()) {
    displacementheightscale_ = new ::KuplungApp::ObjectCoordinate(*from.displacementheightscale_);
  } else {
    displacementheightscale_ = nullptr;
  }
  if (from._internal_has_materialambient()) {
    materialambient_ = new ::KuplungApp::MaterialColor(*from.materialambient_);
  } else {
    materialambient_ = nullptr;
  }
  if (from._internal_has_materialdiffuse()) {
    materialdiffuse_ = new ::KuplungApp::MaterialColor(*from.materialdiffuse_);
  } else {
    materialdiffuse_ = nullptr;
  }
  if (from._internal_has_materialspecular()) {
    materialspecular_ = new ::KuplungApp::MaterialColor(*from.materialspecular_);
  } else {
    materialspecular_ = nullptr;
  }
  if (from._internal_has_materialemission()) {
    materialemission_ = new ::KuplungApp::MaterialColor(*from.materialemission_);
  } else {
    materialemission_ = nullptr;
  }
  if (from._internal_has_effect_gblur_radius()) {
    effect_gblur_radius_ = new ::KuplungApp::ObjectCoordinate(*from.effect_gblur_radius_);
  } else {
    effect_gblur_radius_ = nullptr;
  }
  if (from._internal_has_effect_gblur_width()) {
    effect_gblur_width_ = new ::KuplungApp::ObjectCoordinate(*from.effect_gblur_width_);
  } else {
    effect_gblur_width_ = nullptr;
  }
  if (from._internal_has_meshobject()) {
    meshobject_ = new ::KuplungApp::Mesh(*from.meshobject_);
  } else {
    meshobject_ = nullptr;
  }
  ::memcpy(&modelid_, &from.modelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&setting_lightingpass_drawmode_) -
    reinterpret_cast<char*>(&modelid_)) + sizeof(setting_lightingpass_drawmode_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.MeshModel)
}

void MeshModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshModel_KuplungAppScene_2eproto.base);
  ::memset(&positionx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_lightingpass_drawmode_) -
      reinterpret_cast<char*>(&positionx_)) + sizeof(setting_lightingpass_drawmode_));
}

MeshModel::~MeshModel() {
  // @@protoc_insertion_point(destructor:KuplungApp.MeshModel)
  SharedDtor();
}

void MeshModel::SharedDtor() {
  if (this != internal_default_instance()) delete positionx_;
  if (this != internal_default_instance()) delete positiony_;
  if (this != internal_default_instance()) delete positionz_;
  if (this != internal_default_instance()) delete scalex_;
  if (this != internal_default_instance()) delete scaley_;
  if (this != internal_default_instance()) delete scalez_;
  if (this != internal_default_instance()) delete rotatex_;
  if (this != internal_default_instance()) delete rotatey_;
  if (this != internal_default_instance()) delete rotatez_;
  if (this != internal_default_instance()) delete displacex_;
  if (this != internal_default_instance()) delete displacey_;
  if (this != internal_default_instance()) delete displacez_;
  if (this != internal_default_instance()) delete setting_materialrefraction_;
  if (this != internal_default_instance()) delete setting_materialspecularexp_;
  if (this != internal_default_instance()) delete solidlightskin_materialcolor_;
  if (this != internal_default_instance()) delete solidlightskin_ambient_;
  if (this != internal_default_instance()) delete solidlightskin_diffuse_;
  if (this != internal_default_instance()) delete solidlightskin_specular_;
  if (this != internal_default_instance()) delete setting_lightposition_;
  if (this != internal_default_instance()) delete setting_lightdirection_;
  if (this != internal_default_instance()) delete setting_lightambient_;
  if (this != internal_default_instance()) delete setting_lightdiffuse_;
  if (this != internal_default_instance()) delete setting_lightspecular_;
  if (this != internal_default_instance()) delete displacementheightscale_;
  if (this != internal_default_instance()) delete materialambient_;
  if (this != internal_default_instance()) delete materialdiffuse_;
  if (this != internal_default_instance()) delete materialspecular_;
  if (this != internal_default_instance()) delete materialemission_;
  if (this != internal_default_instance()) delete effect_gblur_radius_;
  if (this != internal_default_instance()) delete effect_gblur_width_;
  if (this != internal_default_instance()) delete meshobject_;
}

void MeshModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshModel& MeshModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshModel_KuplungAppScene_2eproto.base);
  return *internal_default_instance();
}


void MeshModel::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.MeshModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(positionx_ != nullptr);
      positionx_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(positiony_ != nullptr);
      positiony_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(positionz_ != nullptr);
      positionz_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(scalex_ != nullptr);
      scalex_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(scaley_ != nullptr);
      scaley_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(scalez_ != nullptr);
      scalez_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(rotatex_ != nullptr);
      rotatex_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(rotatey_ != nullptr);
      rotatey_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(rotatez_ != nullptr);
      rotatez_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(displacex_ != nullptr);
      displacex_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(displacey_ != nullptr);
      displacey_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(displacez_ != nullptr);
      displacez_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(setting_materialrefraction_ != nullptr);
      setting_materialrefraction_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(setting_materialspecularexp_ != nullptr);
      setting_materialspecularexp_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(solidlightskin_materialcolor_ != nullptr);
      solidlightskin_materialcolor_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(solidlightskin_ambient_ != nullptr);
      solidlightskin_ambient_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(solidlightskin_diffuse_ != nullptr);
      solidlightskin_diffuse_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(solidlightskin_specular_ != nullptr);
      solidlightskin_specular_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(setting_lightposition_ != nullptr);
      setting_lightposition_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(setting_lightdirection_ != nullptr);
      setting_lightdirection_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(setting_lightambient_ != nullptr);
      setting_lightambient_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(setting_lightdiffuse_ != nullptr);
      setting_lightdiffuse_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(setting_lightspecular_ != nullptr);
      setting_lightspecular_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(displacementheightscale_ != nullptr);
      displacementheightscale_->Clear();
    }
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(materialambient_ != nullptr);
      materialambient_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(materialdiffuse_ != nullptr);
      materialdiffuse_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(materialspecular_ != nullptr);
      materialspecular_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(materialemission_ != nullptr);
      materialemission_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(effect_gblur_radius_ != nullptr);
      effect_gblur_radius_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(effect_gblur_width_ != nullptr);
      effect_gblur_width_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(meshobject_ != nullptr);
      meshobject_->Clear();
    }
  }
  modelid_ = 0;
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&settings_deferredrender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solidlightskin_ambient_strength_) -
        reinterpret_cast<char*>(&settings_deferredrender_)) + sizeof(solidlightskin_ambient_strength_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&solidlightskin_diffuse_strength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_lightstrengthdiffuse_) -
        reinterpret_cast<char*>(&solidlightskin_diffuse_strength_)) + sizeof(setting_lightstrengthdiffuse_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&setting_lightstrengthspecular_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effect_bloom_vignette_) -
        reinterpret_cast<char*>(&setting_lightstrengthspecular_)) + sizeof(effect_bloom_vignette_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&effect_bloom_vignetteatt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_lightingpass_drawmode_) -
        reinterpret_cast<char*>(&effect_bloom_vignetteatt_)) + sizeof(setting_lightingpass_drawmode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MeshModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 ModelID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_modelid(&_has_bits_);
          modelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Settings_DeferredRender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_settings_deferredrender(&_has_bits_);
          settings_deferredrender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_CelShading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_setting_celshading(&_has_bits_);
          setting_celshading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_Wireframe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_setting_wireframe(&_has_bits_);
          setting_wireframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_UseTessellation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_setting_usetessellation(&_has_bits_);
          setting_usetessellation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_UseCullFace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_setting_usecullface(&_has_bits_);
          setting_usecullface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float Setting_Alpha = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_setting_alpha(&_has_bits_);
          setting_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 Setting_TessellationSubdivision = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_setting_tessellationsubdivision(&_has_bits_);
          setting_tessellationsubdivision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionX = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionY = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiony(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionZ = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate scaleX = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate scaleY = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaley(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate scaleZ = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalez(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateX = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateY = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateZ = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatez(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate displaceX = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_displacex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate displaceY = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_displacey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate displaceZ = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_displacez(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate Setting_MaterialRefraction = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting_materialrefraction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate Setting_MaterialSpecularExp = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting_materialspecularexp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Setting_ModelViewSkin = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_setting_modelviewskin(&_has_bits_);
          setting_modelviewskin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 solidLightSkin_MaterialColor = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_solidlightskin_materialcolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 solidLightSkin_Ambient = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_solidlightskin_ambient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 solidLightSkin_Diffuse = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_solidlightskin_diffuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 solidLightSkin_Specular = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_solidlightskin_specular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float solidLightSkin_Ambient_Strength = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_solidlightskin_ambient_strength(&_has_bits_);
          solidlightskin_ambient_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float solidLightSkin_Diffuse_Strength = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_solidlightskin_diffuse_strength(&_has_bits_);
          solidlightskin_diffuse_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float solidLightSkin_Specular_Strength = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_solidlightskin_specular_strength(&_has_bits_);
          solidlightskin_specular_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 Setting_LightPosition = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting_lightposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 Setting_LightDirection = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting_lightdirection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 Setting_LightAmbient = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting_lightambient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 Setting_LightDiffuse = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting_lightdiffuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 Setting_LightSpecular = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting_lightspecular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float Setting_LightStrengthAmbient = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_setting_lightstrengthambient(&_has_bits_);
          setting_lightstrengthambient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Setting_LightStrengthDiffuse = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_setting_lightstrengthdiffuse(&_has_bits_);
          setting_lightstrengthdiffuse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Setting_LightStrengthSpecular = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_setting_lightstrengthspecular(&_has_bits_);
          setting_lightstrengthspecular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 materialIlluminationModel = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_materialilluminationmodel(&_has_bits_);
          materialilluminationmodel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate displacementHeightScale = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_displacementheightscale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool showMaterialEditor = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_showmaterialeditor(&_has_bits_);
          showmaterialeditor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MaterialColor materialAmbient = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_materialambient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MaterialColor materialDiffuse = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_materialdiffuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MaterialColor materialSpecular = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_materialspecular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MaterialColor materialEmission = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_materialemission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_ParallaxMapping = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_setting_parallaxmapping(&_has_bits_);
          setting_parallaxmapping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Effect_GBlur_Mode = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_effect_gblur_mode(&_has_bits_);
          effect_gblur_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate Effect_GBlur_Radius = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_gblur_radius(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate Effect_GBlur_Width = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_gblur_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Effect_Bloom_doBloom = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_effect_bloom_dobloom(&_has_bits_);
          effect_bloom_dobloom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float Effect_Bloom_WeightA = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_effect_bloom_weighta(&_has_bits_);
          effect_bloom_weighta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Effect_Bloom_WeightB = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_effect_bloom_weightb(&_has_bits_);
          effect_bloom_weightb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Effect_Bloom_WeightC = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_effect_bloom_weightc(&_has_bits_);
          effect_bloom_weightc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Effect_Bloom_WeightD = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_effect_bloom_weightd(&_has_bits_);
          effect_bloom_weightd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Effect_Bloom_Vignette = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_effect_bloom_vignette(&_has_bits_);
          effect_bloom_vignette_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Effect_Bloom_VignetteAtt = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_effect_bloom_vignetteatt(&_has_bits_);
          effect_bloom_vignetteatt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 Setting_LightingPass_DrawMode = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_setting_lightingpass_drawmode(&_has_bits_);
          setting_lightingpass_drawmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Mesh meshObject = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_meshobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.MeshModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ModelID = 1;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modelid(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required bool Settings_DeferredRender = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_settings_deferredrender(), target);
  }

  // required bool Setting_CelShading = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_setting_celshading(), target);
  }

  // required bool Setting_Wireframe = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_setting_wireframe(), target);
  }

  // required bool Setting_UseTessellation = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_setting_usetessellation(), target);
  }

  // required bool Setting_UseCullFace = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_setting_usecullface(), target);
  }

  // required float Setting_Alpha = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_setting_alpha(), target);
  }

  // required int32 Setting_TessellationSubdivision = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_setting_tessellationsubdivision(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.ObjectCoordinate positionX = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::positionx(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::positiony(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::positionz(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::scalex(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::scaley(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::scalez(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::rotatex(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::rotatey(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 17;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::rotatez(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate displaceX = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::displacex(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate displaceY = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::displacey(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate displaceZ = 20;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::displacez(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate Setting_MaterialRefraction = 21;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::setting_materialrefraction(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate Setting_MaterialSpecularExp = 22;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::setting_materialspecularexp(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 Setting_ModelViewSkin = 23;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_setting_modelviewskin(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.Vec3 solidLightSkin_MaterialColor = 24;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::solidlightskin_materialcolor(this), target, stream);
  }

  // required .KuplungApp.Vec3 solidLightSkin_Ambient = 25;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::solidlightskin_ambient(this), target, stream);
  }

  // required .KuplungApp.Vec3 solidLightSkin_Diffuse = 26;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::solidlightskin_diffuse(this), target, stream);
  }

  // required .KuplungApp.Vec3 solidLightSkin_Specular = 27;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::solidlightskin_specular(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // required float solidLightSkin_Ambient_Strength = 28;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_solidlightskin_ambient_strength(), target);
  }

  // required float solidLightSkin_Diffuse_Strength = 29;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_solidlightskin_diffuse_strength(), target);
  }

  // required float solidLightSkin_Specular_Strength = 30;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_solidlightskin_specular_strength(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.Vec3 Setting_LightPosition = 31;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::setting_lightposition(this), target, stream);
  }

  // required .KuplungApp.Vec3 Setting_LightDirection = 32;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::setting_lightdirection(this), target, stream);
  }

  // required .KuplungApp.Vec3 Setting_LightAmbient = 33;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::setting_lightambient(this), target, stream);
  }

  // required .KuplungApp.Vec3 Setting_LightDiffuse = 34;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::setting_lightdiffuse(this), target, stream);
  }

  // required .KuplungApp.Vec3 Setting_LightSpecular = 35;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::setting_lightspecular(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // required float Setting_LightStrengthAmbient = 36;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_setting_lightstrengthambient(), target);
  }

  // required float Setting_LightStrengthDiffuse = 37;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(37, this->_internal_setting_lightstrengthdiffuse(), target);
  }

  // required float Setting_LightStrengthSpecular = 38;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_setting_lightstrengthspecular(), target);
  }

  // required int32 materialIlluminationModel = 39;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_materialilluminationmodel(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.ObjectCoordinate displacementHeightScale = 40;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::displacementheightscale(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // required bool showMaterialEditor = 41;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_showmaterialeditor(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.MaterialColor materialAmbient = 42;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::materialambient(this), target, stream);
  }

  // required .KuplungApp.MaterialColor materialDiffuse = 43;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::materialdiffuse(this), target, stream);
  }

  // required .KuplungApp.MaterialColor materialSpecular = 44;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::materialspecular(this), target, stream);
  }

  // required .KuplungApp.MaterialColor materialEmission = 45;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::materialemission(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // required bool Setting_ParallaxMapping = 46;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_setting_parallaxmapping(), target);
  }

  // required int32 Effect_GBlur_Mode = 47;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_effect_gblur_mode(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.ObjectCoordinate Effect_GBlur_Radius = 48;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::effect_gblur_radius(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate Effect_GBlur_Width = 49;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::effect_gblur_width(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // required bool Effect_Bloom_doBloom = 50;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_effect_bloom_dobloom(), target);
  }

  // required float Effect_Bloom_WeightA = 51;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(51, this->_internal_effect_bloom_weighta(), target);
  }

  // required float Effect_Bloom_WeightB = 52;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(52, this->_internal_effect_bloom_weightb(), target);
  }

  // required float Effect_Bloom_WeightC = 53;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(53, this->_internal_effect_bloom_weightc(), target);
  }

  // required float Effect_Bloom_WeightD = 54;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(54, this->_internal_effect_bloom_weightd(), target);
  }

  // required float Effect_Bloom_Vignette = 55;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(55, this->_internal_effect_bloom_vignette(), target);
  }

  // required float Effect_Bloom_VignetteAtt = 56;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(56, this->_internal_effect_bloom_vignetteatt(), target);
  }

  // required int32 Setting_LightingPass_DrawMode = 57;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(57, this->_internal_setting_lightingpass_drawmode(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.Mesh meshObject = 58;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        58, _Internal::meshobject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.MeshModel)
  return target;
}

size_t MeshModel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.MeshModel)
  size_t total_size = 0;

  if (_internal_has_positionx()) {
    // required .KuplungApp.ObjectCoordinate positionX = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionx_);
  }

  if (_internal_has_positiony()) {
    // required .KuplungApp.ObjectCoordinate positionY = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiony_);
  }

  if (_internal_has_positionz()) {
    // required .KuplungApp.ObjectCoordinate positionZ = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionz_);
  }

  if (_internal_has_scalex()) {
    // required .KuplungApp.ObjectCoordinate scaleX = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalex_);
  }

  if (_internal_has_scaley()) {
    // required .KuplungApp.ObjectCoordinate scaleY = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaley_);
  }

  if (_internal_has_scalez()) {
    // required .KuplungApp.ObjectCoordinate scaleZ = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalez_);
  }

  if (_internal_has_rotatex()) {
    // required .KuplungApp.ObjectCoordinate rotateX = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatex_);
  }

  if (_internal_has_rotatey()) {
    // required .KuplungApp.ObjectCoordinate rotateY = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatey_);
  }

  if (_internal_has_rotatez()) {
    // required .KuplungApp.ObjectCoordinate rotateZ = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatez_);
  }

  if (_internal_has_displacex()) {
    // required .KuplungApp.ObjectCoordinate displaceX = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *displacex_);
  }

  if (_internal_has_displacey()) {
    // required .KuplungApp.ObjectCoordinate displaceY = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *displacey_);
  }

  if (_internal_has_displacez()) {
    // required .KuplungApp.ObjectCoordinate displaceZ = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *displacez_);
  }

  if (_internal_has_setting_materialrefraction()) {
    // required .KuplungApp.ObjectCoordinate Setting_MaterialRefraction = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_materialrefraction_);
  }

  if (_internal_has_setting_materialspecularexp()) {
    // required .KuplungApp.ObjectCoordinate Setting_MaterialSpecularExp = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_materialspecularexp_);
  }

  if (_internal_has_solidlightskin_materialcolor()) {
    // required .KuplungApp.Vec3 solidLightSkin_MaterialColor = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlightskin_materialcolor_);
  }

  if (_internal_has_solidlightskin_ambient()) {
    // required .KuplungApp.Vec3 solidLightSkin_Ambient = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlightskin_ambient_);
  }

  if (_internal_has_solidlightskin_diffuse()) {
    // required .KuplungApp.Vec3 solidLightSkin_Diffuse = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlightskin_diffuse_);
  }

  if (_internal_has_solidlightskin_specular()) {
    // required .KuplungApp.Vec3 solidLightSkin_Specular = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlightskin_specular_);
  }

  if (_internal_has_setting_lightposition()) {
    // required .KuplungApp.Vec3 Setting_LightPosition = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_lightposition_);
  }

  if (_internal_has_setting_lightdirection()) {
    // required .KuplungApp.Vec3 Setting_LightDirection = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_lightdirection_);
  }

  if (_internal_has_setting_lightambient()) {
    // required .KuplungApp.Vec3 Setting_LightAmbient = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_lightambient_);
  }

  if (_internal_has_setting_lightdiffuse()) {
    // required .KuplungApp.Vec3 Setting_LightDiffuse = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_lightdiffuse_);
  }

  if (_internal_has_setting_lightspecular()) {
    // required .KuplungApp.Vec3 Setting_LightSpecular = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_lightspecular_);
  }

  if (_internal_has_displacementheightscale()) {
    // required .KuplungApp.ObjectCoordinate displacementHeightScale = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *displacementheightscale_);
  }

  if (_internal_has_materialambient()) {
    // required .KuplungApp.MaterialColor materialAmbient = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *materialambient_);
  }

  if (_internal_has_materialdiffuse()) {
    // required .KuplungApp.MaterialColor materialDiffuse = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *materialdiffuse_);
  }

  if (_internal_has_materialspecular()) {
    // required .KuplungApp.MaterialColor materialSpecular = 44;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *materialspecular_);
  }

  if (_internal_has_materialemission()) {
    // required .KuplungApp.MaterialColor materialEmission = 45;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *materialemission_);
  }

  if (_internal_has_effect_gblur_radius()) {
    // required .KuplungApp.ObjectCoordinate Effect_GBlur_Radius = 48;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effect_gblur_radius_);
  }

  if (_internal_has_effect_gblur_width()) {
    // required .KuplungApp.ObjectCoordinate Effect_GBlur_Width = 49;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effect_gblur_width_);
  }

  if (_internal_has_meshobject()) {
    // required .KuplungApp.Mesh meshObject = 58;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meshobject_);
  }

  if (_internal_has_modelid()) {
    // required int32 ModelID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modelid());
  }

  if (_internal_has_settings_deferredrender()) {
    // required bool Settings_DeferredRender = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_setting_celshading()) {
    // required bool Setting_CelShading = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_setting_wireframe()) {
    // required bool Setting_Wireframe = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_setting_usetessellation()) {
    // required bool Setting_UseTessellation = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_setting_alpha()) {
    // required float Setting_Alpha = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_setting_tessellationsubdivision()) {
    // required int32 Setting_TessellationSubdivision = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_tessellationsubdivision());
  }

  if (_internal_has_setting_modelviewskin()) {
    // required int32 Setting_ModelViewSkin = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_modelviewskin());
  }

  if (_internal_has_solidlightskin_ambient_strength()) {
    // required float solidLightSkin_Ambient_Strength = 28;
    total_size += 2 + 4;
  }

  if (_internal_has_solidlightskin_diffuse_strength()) {
    // required float solidLightSkin_Diffuse_Strength = 29;
    total_size += 2 + 4;
  }

  if (_internal_has_solidlightskin_specular_strength()) {
    // required float solidLightSkin_Specular_Strength = 30;
    total_size += 2 + 4;
  }

  if (_internal_has_setting_usecullface()) {
    // required bool Setting_UseCullFace = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_showmaterialeditor()) {
    // required bool showMaterialEditor = 41;
    total_size += 2 + 1;
  }

  if (_internal_has_setting_parallaxmapping()) {
    // required bool Setting_ParallaxMapping = 46;
    total_size += 2 + 1;
  }

  if (_internal_has_effect_bloom_dobloom()) {
    // required bool Effect_Bloom_doBloom = 50;
    total_size += 2 + 1;
  }

  if (_internal_has_setting_lightstrengthambient()) {
    // required float Setting_LightStrengthAmbient = 36;
    total_size += 2 + 4;
  }

  if (_internal_has_setting_lightstrengthdiffuse()) {
    // required float Setting_LightStrengthDiffuse = 37;
    total_size += 2 + 4;
  }

  if (_internal_has_setting_lightstrengthspecular()) {
    // required float Setting_LightStrengthSpecular = 38;
    total_size += 2 + 4;
  }

  if (_internal_has_materialilluminationmodel()) {
    // required int32 materialIlluminationModel = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_materialilluminationmodel());
  }

  if (_internal_has_effect_gblur_mode()) {
    // required int32 Effect_GBlur_Mode = 47;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effect_gblur_mode());
  }

  if (_internal_has_effect_bloom_weighta()) {
    // required float Effect_Bloom_WeightA = 51;
    total_size += 2 + 4;
  }

  if (_internal_has_effect_bloom_weightb()) {
    // required float Effect_Bloom_WeightB = 52;
    total_size += 2 + 4;
  }

  if (_internal_has_effect_bloom_weightc()) {
    // required float Effect_Bloom_WeightC = 53;
    total_size += 2 + 4;
  }

  if (_internal_has_effect_bloom_weightd()) {
    // required float Effect_Bloom_WeightD = 54;
    total_size += 2 + 4;
  }

  if (_internal_has_effect_bloom_vignette()) {
    // required float Effect_Bloom_Vignette = 55;
    total_size += 2 + 4;
  }

  if (_internal_has_effect_bloom_vignetteatt()) {
    // required float Effect_Bloom_VignetteAtt = 56;
    total_size += 2 + 4;
  }

  if (_internal_has_setting_lightingpass_drawmode()) {
    // required int32 Setting_LightingPass_DrawMode = 57;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_lightingpass_drawmode());
  }

  return total_size;
}
size_t MeshModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.MeshModel)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_has_bits_[1] & 0x03ffffff) ^ 0x03ffffff)) == 0) {  // All required fields are present.
    // required .KuplungApp.ObjectCoordinate positionX = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionx_);

    // required .KuplungApp.ObjectCoordinate positionY = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiony_);

    // required .KuplungApp.ObjectCoordinate positionZ = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionz_);

    // required .KuplungApp.ObjectCoordinate scaleX = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalex_);

    // required .KuplungApp.ObjectCoordinate scaleY = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaley_);

    // required .KuplungApp.ObjectCoordinate scaleZ = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalez_);

    // required .KuplungApp.ObjectCoordinate rotateX = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatex_);

    // required .KuplungApp.ObjectCoordinate rotateY = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatey_);

    // required .KuplungApp.ObjectCoordinate rotateZ = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatez_);

    // required .KuplungApp.ObjectCoordinate displaceX = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *displacex_);

    // required .KuplungApp.ObjectCoordinate displaceY = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *displacey_);

    // required .KuplungApp.ObjectCoordinate displaceZ = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *displacez_);

    // required .KuplungApp.ObjectCoordinate Setting_MaterialRefraction = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_materialrefraction_);

    // required .KuplungApp.ObjectCoordinate Setting_MaterialSpecularExp = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_materialspecularexp_);

    // required .KuplungApp.Vec3 solidLightSkin_MaterialColor = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlightskin_materialcolor_);

    // required .KuplungApp.Vec3 solidLightSkin_Ambient = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlightskin_ambient_);

    // required .KuplungApp.Vec3 solidLightSkin_Diffuse = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlightskin_diffuse_);

    // required .KuplungApp.Vec3 solidLightSkin_Specular = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlightskin_specular_);

    // required .KuplungApp.Vec3 Setting_LightPosition = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_lightposition_);

    // required .KuplungApp.Vec3 Setting_LightDirection = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_lightdirection_);

    // required .KuplungApp.Vec3 Setting_LightAmbient = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_lightambient_);

    // required .KuplungApp.Vec3 Setting_LightDiffuse = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_lightdiffuse_);

    // required .KuplungApp.Vec3 Setting_LightSpecular = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_lightspecular_);

    // required .KuplungApp.ObjectCoordinate displacementHeightScale = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *displacementheightscale_);

    // required .KuplungApp.MaterialColor materialAmbient = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *materialambient_);

    // required .KuplungApp.MaterialColor materialDiffuse = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *materialdiffuse_);

    // required .KuplungApp.MaterialColor materialSpecular = 44;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *materialspecular_);

    // required .KuplungApp.MaterialColor materialEmission = 45;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *materialemission_);

    // required .KuplungApp.ObjectCoordinate Effect_GBlur_Radius = 48;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effect_gblur_radius_);

    // required .KuplungApp.ObjectCoordinate Effect_GBlur_Width = 49;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effect_gblur_width_);

    // required .KuplungApp.Mesh meshObject = 58;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meshobject_);

    // required int32 ModelID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modelid());

    // required bool Settings_DeferredRender = 2;
    total_size += 1 + 1;

    // required bool Setting_CelShading = 3;
    total_size += 1 + 1;

    // required bool Setting_Wireframe = 4;
    total_size += 1 + 1;

    // required bool Setting_UseTessellation = 5;
    total_size += 1 + 1;

    // required float Setting_Alpha = 7;
    total_size += 1 + 4;

    // required int32 Setting_TessellationSubdivision = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_tessellationsubdivision());

    // required int32 Setting_ModelViewSkin = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_modelviewskin());

    // required float solidLightSkin_Ambient_Strength = 28;
    total_size += 2 + 4;

    // required float solidLightSkin_Diffuse_Strength = 29;
    total_size += 2 + 4;

    // required float solidLightSkin_Specular_Strength = 30;
    total_size += 2 + 4;

    // required bool Setting_UseCullFace = 6;
    total_size += 1 + 1;

    // required bool showMaterialEditor = 41;
    total_size += 2 + 1;

    // required bool Setting_ParallaxMapping = 46;
    total_size += 2 + 1;

    // required bool Effect_Bloom_doBloom = 50;
    total_size += 2 + 1;

    // required float Setting_LightStrengthAmbient = 36;
    total_size += 2 + 4;

    // required float Setting_LightStrengthDiffuse = 37;
    total_size += 2 + 4;

    // required float Setting_LightStrengthSpecular = 38;
    total_size += 2 + 4;

    // required int32 materialIlluminationModel = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_materialilluminationmodel());

    // required int32 Effect_GBlur_Mode = 47;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effect_gblur_mode());

    // required float Effect_Bloom_WeightA = 51;
    total_size += 2 + 4;

    // required float Effect_Bloom_WeightB = 52;
    total_size += 2 + 4;

    // required float Effect_Bloom_WeightC = 53;
    total_size += 2 + 4;

    // required float Effect_Bloom_WeightD = 54;
    total_size += 2 + 4;

    // required float Effect_Bloom_Vignette = 55;
    total_size += 2 + 4;

    // required float Effect_Bloom_VignetteAtt = 56;
    total_size += 2 + 4;

    // required int32 Setting_LightingPass_DrawMode = 57;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_lightingpass_drawmode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.MeshModel)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.MeshModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.MeshModel)
    MergeFrom(*source);
  }
}

void MeshModel::MergeFrom(const MeshModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.MeshModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_positionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positionx());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_positiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positiony());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_positionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positionz());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_scalex()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_scalex());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_scaley()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_scaley());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_scalez()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_scalez());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_rotatex()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatex());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_rotatey()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatey());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_rotatez()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatez());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_displacex()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_displacex());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_displacey()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_displacey());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_displacez()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_displacez());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_setting_materialrefraction()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_setting_materialrefraction());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_setting_materialspecularexp()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_setting_materialspecularexp());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_solidlightskin_materialcolor()->::KuplungApp::Vec3::MergeFrom(from._internal_solidlightskin_materialcolor());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_solidlightskin_ambient()->::KuplungApp::Vec3::MergeFrom(from._internal_solidlightskin_ambient());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_solidlightskin_diffuse()->::KuplungApp::Vec3::MergeFrom(from._internal_solidlightskin_diffuse());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_solidlightskin_specular()->::KuplungApp::Vec3::MergeFrom(from._internal_solidlightskin_specular());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_setting_lightposition()->::KuplungApp::Vec3::MergeFrom(from._internal_setting_lightposition());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_setting_lightdirection()->::KuplungApp::Vec3::MergeFrom(from._internal_setting_lightdirection());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_setting_lightambient()->::KuplungApp::Vec3::MergeFrom(from._internal_setting_lightambient());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_setting_lightdiffuse()->::KuplungApp::Vec3::MergeFrom(from._internal_setting_lightdiffuse());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_setting_lightspecular()->::KuplungApp::Vec3::MergeFrom(from._internal_setting_lightspecular());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_displacementheightscale()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_displacementheightscale());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_materialambient()->::KuplungApp::MaterialColor::MergeFrom(from._internal_materialambient());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_materialdiffuse()->::KuplungApp::MaterialColor::MergeFrom(from._internal_materialdiffuse());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_materialspecular()->::KuplungApp::MaterialColor::MergeFrom(from._internal_materialspecular());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_materialemission()->::KuplungApp::MaterialColor::MergeFrom(from._internal_materialemission());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_effect_gblur_radius()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_effect_gblur_radius());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_effect_gblur_width()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_effect_gblur_width());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_meshobject()->::KuplungApp::Mesh::MergeFrom(from._internal_meshobject());
    }
    if (cached_has_bits & 0x80000000u) {
      modelid_ = from.modelid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      settings_deferredrender_ = from.settings_deferredrender_;
    }
    if (cached_has_bits & 0x00000002u) {
      setting_celshading_ = from.setting_celshading_;
    }
    if (cached_has_bits & 0x00000004u) {
      setting_wireframe_ = from.setting_wireframe_;
    }
    if (cached_has_bits & 0x00000008u) {
      setting_usetessellation_ = from.setting_usetessellation_;
    }
    if (cached_has_bits & 0x00000010u) {
      setting_alpha_ = from.setting_alpha_;
    }
    if (cached_has_bits & 0x00000020u) {
      setting_tessellationsubdivision_ = from.setting_tessellationsubdivision_;
    }
    if (cached_has_bits & 0x00000040u) {
      setting_modelviewskin_ = from.setting_modelviewskin_;
    }
    if (cached_has_bits & 0x00000080u) {
      solidlightskin_ambient_strength_ = from.solidlightskin_ambient_strength_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      solidlightskin_diffuse_strength_ = from.solidlightskin_diffuse_strength_;
    }
    if (cached_has_bits & 0x00000200u) {
      solidlightskin_specular_strength_ = from.solidlightskin_specular_strength_;
    }
    if (cached_has_bits & 0x00000400u) {
      setting_usecullface_ = from.setting_usecullface_;
    }
    if (cached_has_bits & 0x00000800u) {
      showmaterialeditor_ = from.showmaterialeditor_;
    }
    if (cached_has_bits & 0x00001000u) {
      setting_parallaxmapping_ = from.setting_parallaxmapping_;
    }
    if (cached_has_bits & 0x00002000u) {
      effect_bloom_dobloom_ = from.effect_bloom_dobloom_;
    }
    if (cached_has_bits & 0x00004000u) {
      setting_lightstrengthambient_ = from.setting_lightstrengthambient_;
    }
    if (cached_has_bits & 0x00008000u) {
      setting_lightstrengthdiffuse_ = from.setting_lightstrengthdiffuse_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      setting_lightstrengthspecular_ = from.setting_lightstrengthspecular_;
    }
    if (cached_has_bits & 0x00020000u) {
      materialilluminationmodel_ = from.materialilluminationmodel_;
    }
    if (cached_has_bits & 0x00040000u) {
      effect_gblur_mode_ = from.effect_gblur_mode_;
    }
    if (cached_has_bits & 0x00080000u) {
      effect_bloom_weighta_ = from.effect_bloom_weighta_;
    }
    if (cached_has_bits & 0x00100000u) {
      effect_bloom_weightb_ = from.effect_bloom_weightb_;
    }
    if (cached_has_bits & 0x00200000u) {
      effect_bloom_weightc_ = from.effect_bloom_weightc_;
    }
    if (cached_has_bits & 0x00400000u) {
      effect_bloom_weightd_ = from.effect_bloom_weightd_;
    }
    if (cached_has_bits & 0x00800000u) {
      effect_bloom_vignette_ = from.effect_bloom_vignette_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      effect_bloom_vignetteatt_ = from.effect_bloom_vignetteatt_;
    }
    if (cached_has_bits & 0x02000000u) {
      setting_lightingpass_drawmode_ = from.setting_lightingpass_drawmode_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void MeshModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.MeshModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshModel::CopyFrom(const MeshModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.MeshModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshModel::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x03ffffff) != 0x03ffffff) return false;
  if (_internal_has_positionx()) {
    if (!positionx_->IsInitialized()) return false;
  }
  if (_internal_has_positiony()) {
    if (!positiony_->IsInitialized()) return false;
  }
  if (_internal_has_positionz()) {
    if (!positionz_->IsInitialized()) return false;
  }
  if (_internal_has_scalex()) {
    if (!scalex_->IsInitialized()) return false;
  }
  if (_internal_has_scaley()) {
    if (!scaley_->IsInitialized()) return false;
  }
  if (_internal_has_scalez()) {
    if (!scalez_->IsInitialized()) return false;
  }
  if (_internal_has_rotatex()) {
    if (!rotatex_->IsInitialized()) return false;
  }
  if (_internal_has_rotatey()) {
    if (!rotatey_->IsInitialized()) return false;
  }
  if (_internal_has_rotatez()) {
    if (!rotatez_->IsInitialized()) return false;
  }
  if (_internal_has_displacex()) {
    if (!displacex_->IsInitialized()) return false;
  }
  if (_internal_has_displacey()) {
    if (!displacey_->IsInitialized()) return false;
  }
  if (_internal_has_displacez()) {
    if (!displacez_->IsInitialized()) return false;
  }
  if (_internal_has_setting_materialrefraction()) {
    if (!setting_materialrefraction_->IsInitialized()) return false;
  }
  if (_internal_has_setting_materialspecularexp()) {
    if (!setting_materialspecularexp_->IsInitialized()) return false;
  }
  if (_internal_has_solidlightskin_materialcolor()) {
    if (!solidlightskin_materialcolor_->IsInitialized()) return false;
  }
  if (_internal_has_solidlightskin_ambient()) {
    if (!solidlightskin_ambient_->IsInitialized()) return false;
  }
  if (_internal_has_solidlightskin_diffuse()) {
    if (!solidlightskin_diffuse_->IsInitialized()) return false;
  }
  if (_internal_has_solidlightskin_specular()) {
    if (!solidlightskin_specular_->IsInitialized()) return false;
  }
  if (_internal_has_setting_lightposition()) {
    if (!setting_lightposition_->IsInitialized()) return false;
  }
  if (_internal_has_setting_lightdirection()) {
    if (!setting_lightdirection_->IsInitialized()) return false;
  }
  if (_internal_has_setting_lightambient()) {
    if (!setting_lightambient_->IsInitialized()) return false;
  }
  if (_internal_has_setting_lightdiffuse()) {
    if (!setting_lightdiffuse_->IsInitialized()) return false;
  }
  if (_internal_has_setting_lightspecular()) {
    if (!setting_lightspecular_->IsInitialized()) return false;
  }
  if (_internal_has_displacementheightscale()) {
    if (!displacementheightscale_->IsInitialized()) return false;
  }
  if (_internal_has_materialambient()) {
    if (!materialambient_->IsInitialized()) return false;
  }
  if (_internal_has_materialdiffuse()) {
    if (!materialdiffuse_->IsInitialized()) return false;
  }
  if (_internal_has_materialspecular()) {
    if (!materialspecular_->IsInitialized()) return false;
  }
  if (_internal_has_materialemission()) {
    if (!materialemission_->IsInitialized()) return false;
  }
  if (_internal_has_effect_gblur_radius()) {
    if (!effect_gblur_radius_->IsInitialized()) return false;
  }
  if (_internal_has_effect_gblur_width()) {
    if (!effect_gblur_width_->IsInitialized()) return false;
  }
  if (_internal_has_meshobject()) {
    if (!meshobject_->IsInitialized()) return false;
  }
  return true;
}

void MeshModel::InternalSwap(MeshModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(positionx_, other->positionx_);
  swap(positiony_, other->positiony_);
  swap(positionz_, other->positionz_);
  swap(scalex_, other->scalex_);
  swap(scaley_, other->scaley_);
  swap(scalez_, other->scalez_);
  swap(rotatex_, other->rotatex_);
  swap(rotatey_, other->rotatey_);
  swap(rotatez_, other->rotatez_);
  swap(displacex_, other->displacex_);
  swap(displacey_, other->displacey_);
  swap(displacez_, other->displacez_);
  swap(setting_materialrefraction_, other->setting_materialrefraction_);
  swap(setting_materialspecularexp_, other->setting_materialspecularexp_);
  swap(solidlightskin_materialcolor_, other->solidlightskin_materialcolor_);
  swap(solidlightskin_ambient_, other->solidlightskin_ambient_);
  swap(solidlightskin_diffuse_, other->solidlightskin_diffuse_);
  swap(solidlightskin_specular_, other->solidlightskin_specular_);
  swap(setting_lightposition_, other->setting_lightposition_);
  swap(setting_lightdirection_, other->setting_lightdirection_);
  swap(setting_lightambient_, other->setting_lightambient_);
  swap(setting_lightdiffuse_, other->setting_lightdiffuse_);
  swap(setting_lightspecular_, other->setting_lightspecular_);
  swap(displacementheightscale_, other->displacementheightscale_);
  swap(materialambient_, other->materialambient_);
  swap(materialdiffuse_, other->materialdiffuse_);
  swap(materialspecular_, other->materialspecular_);
  swap(materialemission_, other->materialemission_);
  swap(effect_gblur_radius_, other->effect_gblur_radius_);
  swap(effect_gblur_width_, other->effect_gblur_width_);
  swap(meshobject_, other->meshobject_);
  swap(modelid_, other->modelid_);
  swap(settings_deferredrender_, other->settings_deferredrender_);
  swap(setting_celshading_, other->setting_celshading_);
  swap(setting_wireframe_, other->setting_wireframe_);
  swap(setting_usetessellation_, other->setting_usetessellation_);
  swap(setting_alpha_, other->setting_alpha_);
  swap(setting_tessellationsubdivision_, other->setting_tessellationsubdivision_);
  swap(setting_modelviewskin_, other->setting_modelviewskin_);
  swap(solidlightskin_ambient_strength_, other->solidlightskin_ambient_strength_);
  swap(solidlightskin_diffuse_strength_, other->solidlightskin_diffuse_strength_);
  swap(solidlightskin_specular_strength_, other->solidlightskin_specular_strength_);
  swap(setting_usecullface_, other->setting_usecullface_);
  swap(showmaterialeditor_, other->showmaterialeditor_);
  swap(setting_parallaxmapping_, other->setting_parallaxmapping_);
  swap(effect_bloom_dobloom_, other->effect_bloom_dobloom_);
  swap(setting_lightstrengthambient_, other->setting_lightstrengthambient_);
  swap(setting_lightstrengthdiffuse_, other->setting_lightstrengthdiffuse_);
  swap(setting_lightstrengthspecular_, other->setting_lightstrengthspecular_);
  swap(materialilluminationmodel_, other->materialilluminationmodel_);
  swap(effect_gblur_mode_, other->effect_gblur_mode_);
  swap(effect_bloom_weighta_, other->effect_bloom_weighta_);
  swap(effect_bloom_weightb_, other->effect_bloom_weightb_);
  swap(effect_bloom_weightc_, other->effect_bloom_weightc_);
  swap(effect_bloom_weightd_, other->effect_bloom_weightd_);
  swap(effect_bloom_vignette_, other->effect_bloom_vignette_);
  swap(effect_bloom_vignetteatt_, other->effect_bloom_vignetteatt_);
  swap(setting_lightingpass_drawmode_, other->setting_lightingpass_drawmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KuplungApp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KuplungApp::Scene* Arena::CreateMaybeMessage< ::KuplungApp::Scene >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::Scene >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::MeshModel* Arena::CreateMaybeMessage< ::KuplungApp::MeshModel >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::MeshModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
