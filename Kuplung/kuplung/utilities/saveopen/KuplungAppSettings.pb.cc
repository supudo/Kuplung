// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungAppSettings.proto

#include "KuplungAppSettings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace KuplungApp {
class GUISettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GUISettings>
      _instance;
} _GUISettings_default_instance_;
class CameraSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraSettings>
      _instance;
} _CameraSettings_default_instance_;
class GridSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GridSettings>
      _instance;
} _GridSettings_default_instance_;
class LightObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LightObject>
      _instance;
} _LightObject_default_instance_;
}  // namespace KuplungApp
namespace protobuf_KuplungAppSettings_2eproto {
void InitDefaultsGUISettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KuplungDefinitions_2eproto::InitDefaultsVec4();
  protobuf_KuplungDefinitions_2eproto::InitDefaultsVec3();
  protobuf_KuplungAppSettings_2eproto::InitDefaultsCameraSettings();
  protobuf_KuplungAppSettings_2eproto::InitDefaultsGridSettings();
  protobuf_KuplungAppSettings_2eproto::InitDefaultsLightObject();
  {
    void* ptr = &::KuplungApp::_GUISettings_default_instance_;
    new (ptr) ::KuplungApp::GUISettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::GUISettings::InitAsDefaultInstance();
}

void InitDefaultsGUISettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGUISettingsImpl);
}

void InitDefaultsCameraSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KuplungDefinitions_2eproto::InitDefaultsVec3();
  protobuf_KuplungDefinitions_2eproto::InitDefaultsObjectCoordinate();
  {
    void* ptr = &::KuplungApp::_CameraSettings_default_instance_;
    new (ptr) ::KuplungApp::CameraSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::CameraSettings::InitAsDefaultInstance();
}

void InitDefaultsCameraSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraSettingsImpl);
}

void InitDefaultsGridSettingsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KuplungDefinitions_2eproto::InitDefaultsObjectCoordinate();
  {
    void* ptr = &::KuplungApp::_GridSettings_default_instance_;
    new (ptr) ::KuplungApp::GridSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::GridSettings::InitAsDefaultInstance();
}

void InitDefaultsGridSettings() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGridSettingsImpl);
}

void InitDefaultsLightObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KuplungDefinitions_2eproto::InitDefaultsObjectCoordinate();
  protobuf_KuplungDefinitions_2eproto::InitDefaultsMaterialColor();
  {
    void* ptr = &::KuplungApp::_LightObject_default_instance_;
    new (ptr) ::KuplungApp::LightObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::LightObject::InitAsDefaultInstance();
}

void InitDefaultsLightObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLightObjectImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_fov_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_outlinethickness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_ratiowidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_ratioheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_planeclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_planefar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_gridsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_skybox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_outlinecolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_uiambientlight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_fixedgridworld_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_outlinecolorpickeropen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_showaxishelpers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, settings_showzaxis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_deferredtestmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_deferredtestlights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_lightingpass_drawmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_deferredtestlightsnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_deferredambientstrength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, viewmodelskin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_materialcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_ambient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_diffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_specular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_ambient_strength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_diffuse_strength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_specular_strength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_materialcolor_colorpicker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_ambient_colorpicker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_diffuse_colorpicker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_specular_colorpicker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_showterrain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_terrainmodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_terrainanimatex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_terrainanimatey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, heightmapimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_terrainwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_terrainheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_showspaceship_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, setting_generatespaceship_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, grid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GUISettings, lights_),
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  1,
  2,
  18,
  19,
  20,
  21,
  26,
  27,
  22,
  23,
  24,
  25,
  3,
  4,
  5,
  6,
  7,
  30,
  31,
  32,
  28,
  29,
  33,
  34,
  35,
  36,
  38,
  39,
  0,
  37,
  42,
  40,
  41,
  8,
  9,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, cameraposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, view_eye_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, view_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, view_up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, positionx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, positiony_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, positionz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatecenterx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatecentery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatecenterz_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, actasmirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, gridsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, positionx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, positiony_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, positionz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, rotatex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, rotatey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, rotatez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, scalex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, scaley_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, scalez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, transparency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::GridSettings, showgrid_),
  9,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, showlampobject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, showlampdirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, showinwire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, positionx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, positiony_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, positionz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, directionx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, directiony_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, directionz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, scalex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, scaley_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, scalez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, rotatex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, rotatey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, rotatez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, rotatecenterx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, rotatecentery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, rotatecenterz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, ambient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, diffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, specular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, lcutoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, loutercutoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, lconstant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, llinear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::LightObject, lquadratic_),
  0,
  1,
  25,
  26,
  27,
  28,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 49, sizeof(::KuplungApp::GUISettings)},
  { 93, 111, sizeof(::KuplungApp::CameraSettings)},
  { 124, 142, sizeof(::KuplungApp::GridSettings)},
  { 155, 189, sizeof(::KuplungApp::LightObject)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_GUISettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_CameraSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_GridSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_LightObject_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "KuplungAppSettings.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030KuplungAppSettings.proto\022\nKuplungApp\032\030"
      "KuplungDefinitions.proto\"\272\014\n\013GUISettings"
      "\022\023\n\013Setting_FOV\030\001 \002(\002\022 \n\030Setting_Outline"
      "Thickness\030\002 \002(\002\022\032\n\022Setting_RatioWidth\030\003 "
      "\002(\002\022\033\n\023Setting_RatioHeight\030\004 \002(\002\022\032\n\022Sett"
      "ing_PlaneClose\030\005 \002(\002\022\030\n\020Setting_PlaneFar"
      "\030\006 \002(\002\022\030\n\020Setting_GridSize\030\007 \002(\005\022\026\n\016Sett"
      "ing_Skybox\030\010 \002(\005\022.\n\024Setting_OutlineColor"
      "\030\t \002(\0132\020.KuplungApp.Vec4\0220\n\026Setting_UIAm"
      "bientLight\030\n \002(\0132\020.KuplungApp.Vec3\022\036\n\026Se"
      "tting_FixedGridWorld\030\013 \002(\010\022&\n\036Setting_Ou"
      "tlineColorPickerOpen\030\014 \002(\010\022\037\n\027Setting_Sh"
      "owAxisHelpers\030\r \002(\010\022\032\n\022Settings_ShowZAxi"
      "s\030\016 \002(\010\022 \n\030Setting_DeferredTestMode\030\017 \002("
      "\010\022\"\n\032Setting_DeferredTestLights\030\020 \002(\010\022%\n"
      "\035Setting_LightingPass_DrawMode\030\021 \002(\005\022(\n "
      "Setting_DeferredTestLightsNumber\030\022 \002(\005\022\'"
      "\n\037Setting_DeferredAmbientStrength\030\023 \002(\002\022"
      "\025\n\rviewModelSkin\030\024 \002(\005\022.\n\024SolidLight_Dir"
      "ection\030\025 \002(\0132\020.KuplungApp.Vec3\0222\n\030SolidL"
      "ight_MaterialColor\030\026 \002(\0132\020.KuplungApp.Ve"
      "c3\022,\n\022SolidLight_Ambient\030\027 \002(\0132\020.Kuplung"
      "App.Vec3\022,\n\022SolidLight_Diffuse\030\030 \002(\0132\020.K"
      "uplungApp.Vec3\022-\n\023SolidLight_Specular\030\031 "
      "\002(\0132\020.KuplungApp.Vec3\022#\n\033SolidLight_Ambi"
      "ent_Strength\030\032 \002(\002\022#\n\033SolidLight_Diffuse"
      "_Strength\030\033 \002(\002\022$\n\034SolidLight_Specular_S"
      "trength\030\034 \002(\002\022,\n$SolidLight_MaterialColo"
      "r_ColorPicker\030\035 \002(\010\022&\n\036SolidLight_Ambien"
      "t_ColorPicker\030\036 \002(\010\022&\n\036SolidLight_Diffus"
      "e_ColorPicker\030\037 \002(\010\022\'\n\037SolidLight_Specul"
      "ar_ColorPicker\030  \002(\010\022\033\n\023Setting_ShowTerr"
      "ain\030! \002(\010\022\034\n\024Setting_TerrainModel\030\" \002(\010\022"
      "\037\n\027Setting_TerrainAnimateX\030# \002(\010\022\037\n\027Sett"
      "ing_TerrainAnimateY\030$ \002(\010\022\026\n\016heightmapIm"
      "age\030% \002(\t\022\034\n\024Setting_TerrainWidth\030& \002(\005\022"
      "\035\n\025Setting_TerrainHeight\030\' \002(\005\022\035\n\025Settin"
      "g_ShowSpaceship\030( \002(\010\022!\n\031Setting_Generat"
      "eSpaceship\030) \002(\010\022*\n\006camera\030* \002(\0132\032.Kuplu"
      "ngApp.CameraSettings\022&\n\004grid\030+ \002(\0132\030.Kup"
      "lungApp.GridSettings\022\'\n\006lights\030, \003(\0132\027.K"
      "uplungApp.LightObject\"\347\004\n\016CameraSettings"
      "\022(\n\016cameraPosition\030\001 \002(\0132\020.KuplungApp.Ve"
      "c3\022\"\n\010View_Eye\030\002 \002(\0132\020.KuplungApp.Vec3\022%"
      "\n\013View_Center\030\003 \002(\0132\020.KuplungApp.Vec3\022!\n"
      "\007View_Up\030\004 \002(\0132\020.KuplungApp.Vec3\022/\n\tposi"
      "tionX\030\005 \002(\0132\034.KuplungApp.ObjectCoordinat"
      "e\022/\n\tpositionY\030\006 \002(\0132\034.KuplungApp.Object"
      "Coordinate\022/\n\tpositionZ\030\007 \002(\0132\034.KuplungA"
      "pp.ObjectCoordinate\022-\n\007rotateX\030\010 \002(\0132\034.K"
      "uplungApp.ObjectCoordinate\022-\n\007rotateY\030\t "
      "\002(\0132\034.KuplungApp.ObjectCoordinate\022-\n\007rot"
      "ateZ\030\n \002(\0132\034.KuplungApp.ObjectCoordinate"
      "\0223\n\rrotateCenterX\030\013 \002(\0132\034.KuplungApp.Obj"
      "ectCoordinate\0223\n\rrotateCenterY\030\014 \002(\0132\034.K"
      "uplungApp.ObjectCoordinate\0223\n\rrotateCent"
      "erZ\030\r \002(\0132\034.KuplungApp.ObjectCoordinate\""
      "\207\004\n\014GridSettings\022\023\n\013actAsMirror\030\001 \002(\010\022\020\n"
      "\010gridSize\030\002 \002(\005\022/\n\tpositionX\030\003 \002(\0132\034.Kup"
      "lungApp.ObjectCoordinate\022/\n\tpositionY\030\004 "
      "\002(\0132\034.KuplungApp.ObjectCoordinate\022/\n\tpos"
      "itionZ\030\005 \002(\0132\034.KuplungApp.ObjectCoordina"
      "te\022-\n\007rotateX\030\006 \002(\0132\034.KuplungApp.ObjectC"
      "oordinate\022-\n\007rotateY\030\007 \002(\0132\034.KuplungApp."
      "ObjectCoordinate\022-\n\007rotateZ\030\010 \002(\0132\034.Kupl"
      "ungApp.ObjectCoordinate\022,\n\006scaleX\030\t \002(\0132"
      "\034.KuplungApp.ObjectCoordinate\022,\n\006scaleY\030"
      "\n \002(\0132\034.KuplungApp.ObjectCoordinate\022,\n\006s"
      "caleZ\030\013 \002(\0132\034.KuplungApp.ObjectCoordinat"
      "e\022\024\n\014transparency\030\014 \002(\002\022\020\n\010showGrid\030\r \002("
      "\005\"\337\t\n\013LightObject\022\r\n\005title\030\001 \002(\t\022\023\n\013desc"
      "ription\030\002 \002(\t\022\014\n\004type\030\003 \002(\005\022\026\n\016showLampO"
      "bject\030\004 \002(\010\022\031\n\021showLampDirection\030\005 \002(\010\022\022"
      "\n\nshowInWire\030\006 \002(\010\022/\n\tpositionX\030\007 \002(\0132\034."
      "KuplungApp.ObjectCoordinate\022/\n\tpositionY"
      "\030\010 \002(\0132\034.KuplungApp.ObjectCoordinate\022/\n\t"
      "positionZ\030\t \002(\0132\034.KuplungApp.ObjectCoord"
      "inate\0220\n\ndirectionX\030\n \002(\0132\034.KuplungApp.O"
      "bjectCoordinate\0220\n\ndirectionY\030\013 \002(\0132\034.Ku"
      "plungApp.ObjectCoordinate\0220\n\ndirectionZ\030"
      "\014 \002(\0132\034.KuplungApp.ObjectCoordinate\022,\n\006s"
      "caleX\030\r \002(\0132\034.KuplungApp.ObjectCoordinat"
      "e\022,\n\006scaleY\030\016 \002(\0132\034.KuplungApp.ObjectCoo"
      "rdinate\022,\n\006scaleZ\030\017 \002(\0132\034.KuplungApp.Obj"
      "ectCoordinate\022-\n\007rotateX\030\020 \002(\0132\034.Kuplung"
      "App.ObjectCoordinate\022-\n\007rotateY\030\021 \002(\0132\034."
      "KuplungApp.ObjectCoordinate\022-\n\007rotateZ\030\022"
      " \002(\0132\034.KuplungApp.ObjectCoordinate\0223\n\rro"
      "tateCenterX\030\023 \002(\0132\034.KuplungApp.ObjectCoo"
      "rdinate\0223\n\rrotateCenterY\030\024 \002(\0132\034.Kuplung"
      "App.ObjectCoordinate\0223\n\rrotateCenterZ\030\025 "
      "\002(\0132\034.KuplungApp.ObjectCoordinate\022*\n\007amb"
      "ient\030\026 \002(\0132\031.KuplungApp.MaterialColor\022*\n"
      "\007diffuse\030\027 \002(\0132\031.KuplungApp.MaterialColo"
      "r\022+\n\010specular\030\030 \002(\0132\031.KuplungApp.Materia"
      "lColor\022-\n\007lCutOff\030\031 \002(\0132\034.KuplungApp.Obj"
      "ectCoordinate\0222\n\014lOuterCutOff\030\032 \002(\0132\034.Ku"
      "plungApp.ObjectCoordinate\022/\n\tlConstant\030\033"
      " \002(\0132\034.KuplungApp.ObjectCoordinate\022-\n\007lL"
      "inear\030\034 \002(\0132\034.KuplungApp.ObjectCoordinat"
      "e\0220\n\nlQuadratic\030\035 \002(\0132\034.KuplungApp.Objec"
      "tCoordinate"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4051);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KuplungAppSettings.proto", &protobuf_RegisterTypes);
  ::protobuf_KuplungDefinitions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_KuplungAppSettings_2eproto
namespace KuplungApp {

// ===================================================================

void GUISettings::InitAsDefaultInstance() {
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->setting_outlinecolor_ = const_cast< ::KuplungApp::Vec4*>(
      ::KuplungApp::Vec4::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->setting_uiambientlight_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->solidlight_direction_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->solidlight_materialcolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->solidlight_ambient_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->solidlight_diffuse_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->solidlight_specular_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->camera_ = const_cast< ::KuplungApp::CameraSettings*>(
      ::KuplungApp::CameraSettings::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->grid_ = const_cast< ::KuplungApp::GridSettings*>(
      ::KuplungApp::GridSettings::internal_default_instance());
}
void GUISettings::clear_setting_outlinecolor() {
  if (setting_outlinecolor_ != NULL) setting_outlinecolor_->Clear();
  clear_has_setting_outlinecolor();
}
void GUISettings::clear_setting_uiambientlight() {
  if (setting_uiambientlight_ != NULL) setting_uiambientlight_->Clear();
  clear_has_setting_uiambientlight();
}
void GUISettings::clear_solidlight_direction() {
  if (solidlight_direction_ != NULL) solidlight_direction_->Clear();
  clear_has_solidlight_direction();
}
void GUISettings::clear_solidlight_materialcolor() {
  if (solidlight_materialcolor_ != NULL) solidlight_materialcolor_->Clear();
  clear_has_solidlight_materialcolor();
}
void GUISettings::clear_solidlight_ambient() {
  if (solidlight_ambient_ != NULL) solidlight_ambient_->Clear();
  clear_has_solidlight_ambient();
}
void GUISettings::clear_solidlight_diffuse() {
  if (solidlight_diffuse_ != NULL) solidlight_diffuse_->Clear();
  clear_has_solidlight_diffuse();
}
void GUISettings::clear_solidlight_specular() {
  if (solidlight_specular_ != NULL) solidlight_specular_->Clear();
  clear_has_solidlight_specular();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GUISettings::kSettingFOVFieldNumber;
const int GUISettings::kSettingOutlineThicknessFieldNumber;
const int GUISettings::kSettingRatioWidthFieldNumber;
const int GUISettings::kSettingRatioHeightFieldNumber;
const int GUISettings::kSettingPlaneCloseFieldNumber;
const int GUISettings::kSettingPlaneFarFieldNumber;
const int GUISettings::kSettingGridSizeFieldNumber;
const int GUISettings::kSettingSkyboxFieldNumber;
const int GUISettings::kSettingOutlineColorFieldNumber;
const int GUISettings::kSettingUIAmbientLightFieldNumber;
const int GUISettings::kSettingFixedGridWorldFieldNumber;
const int GUISettings::kSettingOutlineColorPickerOpenFieldNumber;
const int GUISettings::kSettingShowAxisHelpersFieldNumber;
const int GUISettings::kSettingsShowZAxisFieldNumber;
const int GUISettings::kSettingDeferredTestModeFieldNumber;
const int GUISettings::kSettingDeferredTestLightsFieldNumber;
const int GUISettings::kSettingLightingPassDrawModeFieldNumber;
const int GUISettings::kSettingDeferredTestLightsNumberFieldNumber;
const int GUISettings::kSettingDeferredAmbientStrengthFieldNumber;
const int GUISettings::kViewModelSkinFieldNumber;
const int GUISettings::kSolidLightDirectionFieldNumber;
const int GUISettings::kSolidLightMaterialColorFieldNumber;
const int GUISettings::kSolidLightAmbientFieldNumber;
const int GUISettings::kSolidLightDiffuseFieldNumber;
const int GUISettings::kSolidLightSpecularFieldNumber;
const int GUISettings::kSolidLightAmbientStrengthFieldNumber;
const int GUISettings::kSolidLightDiffuseStrengthFieldNumber;
const int GUISettings::kSolidLightSpecularStrengthFieldNumber;
const int GUISettings::kSolidLightMaterialColorColorPickerFieldNumber;
const int GUISettings::kSolidLightAmbientColorPickerFieldNumber;
const int GUISettings::kSolidLightDiffuseColorPickerFieldNumber;
const int GUISettings::kSolidLightSpecularColorPickerFieldNumber;
const int GUISettings::kSettingShowTerrainFieldNumber;
const int GUISettings::kSettingTerrainModelFieldNumber;
const int GUISettings::kSettingTerrainAnimateXFieldNumber;
const int GUISettings::kSettingTerrainAnimateYFieldNumber;
const int GUISettings::kHeightmapImageFieldNumber;
const int GUISettings::kSettingTerrainWidthFieldNumber;
const int GUISettings::kSettingTerrainHeightFieldNumber;
const int GUISettings::kSettingShowSpaceshipFieldNumber;
const int GUISettings::kSettingGenerateSpaceshipFieldNumber;
const int GUISettings::kCameraFieldNumber;
const int GUISettings::kGridFieldNumber;
const int GUISettings::kLightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GUISettings::GUISettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungAppSettings_2eproto::InitDefaultsGUISettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.GUISettings)
}
GUISettings::GUISettings(const GUISettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lights_(from.lights_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  heightmapimage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_heightmapimage()) {
    heightmapimage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heightmapimage_);
  }
  if (from.has_setting_outlinecolor()) {
    setting_outlinecolor_ = new ::KuplungApp::Vec4(*from.setting_outlinecolor_);
  } else {
    setting_outlinecolor_ = NULL;
  }
  if (from.has_setting_uiambientlight()) {
    setting_uiambientlight_ = new ::KuplungApp::Vec3(*from.setting_uiambientlight_);
  } else {
    setting_uiambientlight_ = NULL;
  }
  if (from.has_solidlight_direction()) {
    solidlight_direction_ = new ::KuplungApp::Vec3(*from.solidlight_direction_);
  } else {
    solidlight_direction_ = NULL;
  }
  if (from.has_solidlight_materialcolor()) {
    solidlight_materialcolor_ = new ::KuplungApp::Vec3(*from.solidlight_materialcolor_);
  } else {
    solidlight_materialcolor_ = NULL;
  }
  if (from.has_solidlight_ambient()) {
    solidlight_ambient_ = new ::KuplungApp::Vec3(*from.solidlight_ambient_);
  } else {
    solidlight_ambient_ = NULL;
  }
  if (from.has_solidlight_diffuse()) {
    solidlight_diffuse_ = new ::KuplungApp::Vec3(*from.solidlight_diffuse_);
  } else {
    solidlight_diffuse_ = NULL;
  }
  if (from.has_solidlight_specular()) {
    solidlight_specular_ = new ::KuplungApp::Vec3(*from.solidlight_specular_);
  } else {
    solidlight_specular_ = NULL;
  }
  if (from.has_camera()) {
    camera_ = new ::KuplungApp::CameraSettings(*from.camera_);
  } else {
    camera_ = NULL;
  }
  if (from.has_grid()) {
    grid_ = new ::KuplungApp::GridSettings(*from.grid_);
  } else {
    grid_ = NULL;
  }
  ::memcpy(&setting_fov_, &from.setting_fov_,
    static_cast<size_t>(reinterpret_cast<char*>(&setting_terrainheight_) -
    reinterpret_cast<char*>(&setting_fov_)) + sizeof(setting_terrainheight_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.GUISettings)
}

void GUISettings::SharedCtor() {
  heightmapimage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&setting_outlinecolor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_terrainheight_) -
      reinterpret_cast<char*>(&setting_outlinecolor_)) + sizeof(setting_terrainheight_));
  _cached_size_ = 0;
}

GUISettings::~GUISettings() {
  // @@protoc_insertion_point(destructor:KuplungApp.GUISettings)
  SharedDtor();
}

void GUISettings::SharedDtor() {
  heightmapimage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete setting_outlinecolor_;
  if (this != internal_default_instance()) delete setting_uiambientlight_;
  if (this != internal_default_instance()) delete solidlight_direction_;
  if (this != internal_default_instance()) delete solidlight_materialcolor_;
  if (this != internal_default_instance()) delete solidlight_ambient_;
  if (this != internal_default_instance()) delete solidlight_diffuse_;
  if (this != internal_default_instance()) delete solidlight_specular_;
  if (this != internal_default_instance()) delete camera_;
  if (this != internal_default_instance()) delete grid_;
}

void GUISettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GUISettings::descriptor() {
  ::protobuf_KuplungAppSettings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungAppSettings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GUISettings& GUISettings::default_instance() {
  ::protobuf_KuplungAppSettings_2eproto::InitDefaultsGUISettings();
  return *internal_default_instance();
}

GUISettings* GUISettings::New(::google::protobuf::Arena* arena) const {
  GUISettings* n = new GUISettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GUISettings::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.GUISettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lights_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!heightmapimage_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*heightmapimage_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(setting_outlinecolor_ != NULL);
      setting_outlinecolor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(setting_uiambientlight_ != NULL);
      setting_uiambientlight_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(solidlight_direction_ != NULL);
      solidlight_direction_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(solidlight_materialcolor_ != NULL);
      solidlight_materialcolor_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(solidlight_ambient_ != NULL);
      solidlight_ambient_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(solidlight_diffuse_ != NULL);
      solidlight_diffuse_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(solidlight_specular_ != NULL);
      solidlight_specular_->Clear();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(camera_ != NULL);
      camera_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(grid_ != NULL);
      grid_->Clear();
    }
  }
  if (cached_has_bits & 64512u) {
    ::memset(&setting_fov_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_planefar_) -
        reinterpret_cast<char*>(&setting_fov_)) + sizeof(setting_planefar_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&setting_gridsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_deferredtestlightsnumber_) -
        reinterpret_cast<char*>(&setting_gridsize_)) + sizeof(setting_deferredtestlightsnumber_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&setting_deferredambientstrength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solidlight_diffuse_strength_) -
        reinterpret_cast<char*>(&setting_deferredambientstrength_)) + sizeof(solidlight_diffuse_strength_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&solidlight_specular_strength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_terrainanimatey_) -
        reinterpret_cast<char*>(&solidlight_specular_strength_)) + sizeof(setting_terrainanimatey_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&setting_showspaceship_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_terrainheight_) -
        reinterpret_cast<char*>(&setting_showspaceship_)) + sizeof(setting_terrainheight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GUISettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.GUISettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float Setting_FOV = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_setting_fov();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_fov_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Setting_OutlineThickness = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_setting_outlinethickness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_outlinethickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Setting_RatioWidth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_setting_ratiowidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_ratiowidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Setting_RatioHeight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_setting_ratioheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_ratioheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Setting_PlaneClose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_setting_planeclose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_planeclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Setting_PlaneFar = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_setting_planefar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_planefar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Setting_GridSize = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_setting_gridsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_gridsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Setting_Skybox = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_setting_skybox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_skybox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_setting_outlinecolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_setting_uiambientlight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_FixedGridWorld = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_setting_fixedgridworld();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_fixedgridworld_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_OutlineColorPickerOpen = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_setting_outlinecolorpickeropen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_outlinecolorpickeropen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_ShowAxisHelpers = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_setting_showaxishelpers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_showaxishelpers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Settings_ShowZAxis = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_settings_showzaxis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &settings_showzaxis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_DeferredTestMode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_setting_deferredtestmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_deferredtestmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_DeferredTestLights = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_setting_deferredtestlights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_deferredtestlights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Setting_LightingPass_DrawMode = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_setting_lightingpass_drawmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_lightingpass_drawmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Setting_DeferredTestLightsNumber = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_setting_deferredtestlightsnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_deferredtestlightsnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Setting_DeferredAmbientStrength = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_setting_deferredambientstrength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_deferredambientstrength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 viewModelSkin = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_viewmodelskin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewmodelskin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 SolidLight_Direction = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_solidlight_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_solidlight_materialcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_solidlight_ambient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_solidlight_diffuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 SolidLight_Specular = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_solidlight_specular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float SolidLight_Ambient_Strength = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {
          set_has_solidlight_ambient_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &solidlight_ambient_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float SolidLight_Diffuse_Strength = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {
          set_has_solidlight_diffuse_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &solidlight_diffuse_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float SolidLight_Specular_Strength = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {
          set_has_solidlight_specular_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &solidlight_specular_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool SolidLight_MaterialColor_ColorPicker = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_solidlight_materialcolor_colorpicker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solidlight_materialcolor_colorpicker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool SolidLight_Ambient_ColorPicker = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_solidlight_ambient_colorpicker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solidlight_ambient_colorpicker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool SolidLight_Diffuse_ColorPicker = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_solidlight_diffuse_colorpicker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solidlight_diffuse_colorpicker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool SolidLight_Specular_ColorPicker = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_solidlight_specular_colorpicker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solidlight_specular_colorpicker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_ShowTerrain = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_setting_showterrain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_showterrain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_TerrainModel = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_setting_terrainmodel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_terrainmodel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_TerrainAnimateX = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_setting_terrainanimatex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_terrainanimatex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_TerrainAnimateY = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_setting_terrainanimatey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_terrainanimatey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string heightmapImage = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heightmapimage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->heightmapimage().data(), static_cast<int>(this->heightmapimage().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.GUISettings.heightmapImage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Setting_TerrainWidth = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_setting_terrainwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_terrainwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Setting_TerrainHeight = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_setting_terrainheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_terrainheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_ShowSpaceship = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_setting_showspaceship();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_showspaceship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Setting_GenerateSpaceship = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_setting_generatespaceship();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_generatespaceship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.CameraSettings camera = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.GridSettings grid = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .KuplungApp.LightObject lights = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.GUISettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.GUISettings)
  return false;
#undef DO_
}

void GUISettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.GUISettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float Setting_FOV = 1;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->setting_fov(), output);
  }

  // required float Setting_OutlineThickness = 2;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->setting_outlinethickness(), output);
  }

  // required float Setting_RatioWidth = 3;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->setting_ratiowidth(), output);
  }

  // required float Setting_RatioHeight = 4;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->setting_ratioheight(), output);
  }

  // required float Setting_PlaneClose = 5;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->setting_planeclose(), output);
  }

  // required float Setting_PlaneFar = 6;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->setting_planefar(), output);
  }

  // required int32 Setting_GridSize = 7;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->setting_gridsize(), output);
  }

  // required int32 Setting_Skybox = 8;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->setting_skybox(), output);
  }

  // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->setting_outlinecolor_, output);
  }

  // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->setting_uiambientlight_, output);
  }

  // required bool Setting_FixedGridWorld = 11;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->setting_fixedgridworld(), output);
  }

  // required bool Setting_OutlineColorPickerOpen = 12;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->setting_outlinecolorpickeropen(), output);
  }

  // required bool Setting_ShowAxisHelpers = 13;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->setting_showaxishelpers(), output);
  }

  // required bool Settings_ShowZAxis = 14;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->settings_showzaxis(), output);
  }

  // required bool Setting_DeferredTestMode = 15;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->setting_deferredtestmode(), output);
  }

  // required bool Setting_DeferredTestLights = 16;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->setting_deferredtestlights(), output);
  }

  // required int32 Setting_LightingPass_DrawMode = 17;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->setting_lightingpass_drawmode(), output);
  }

  // required int32 Setting_DeferredTestLightsNumber = 18;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->setting_deferredtestlightsnumber(), output);
  }

  // required float Setting_DeferredAmbientStrength = 19;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->setting_deferredambientstrength(), output);
  }

  // required int32 viewModelSkin = 20;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->viewmodelskin(), output);
  }

  // required .KuplungApp.Vec3 SolidLight_Direction = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->solidlight_direction_, output);
  }

  // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->solidlight_materialcolor_, output);
  }

  // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->solidlight_ambient_, output);
  }

  // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->solidlight_diffuse_, output);
  }

  // required .KuplungApp.Vec3 SolidLight_Specular = 25;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->solidlight_specular_, output);
  }

  // required float SolidLight_Ambient_Strength = 26;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->solidlight_ambient_strength(), output);
  }

  // required float SolidLight_Diffuse_Strength = 27;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->solidlight_diffuse_strength(), output);
  }

  cached_has_bits = _has_bits_[1];
  // required float SolidLight_Specular_Strength = 28;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->solidlight_specular_strength(), output);
  }

  cached_has_bits = _has_bits_[0];
  // required bool SolidLight_MaterialColor_ColorPicker = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->solidlight_materialcolor_colorpicker(), output);
  }

  // required bool SolidLight_Ambient_ColorPicker = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->solidlight_ambient_colorpicker(), output);
  }

  cached_has_bits = _has_bits_[1];
  // required bool SolidLight_Diffuse_ColorPicker = 31;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->solidlight_diffuse_colorpicker(), output);
  }

  // required bool SolidLight_Specular_ColorPicker = 32;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->solidlight_specular_colorpicker(), output);
  }

  // required bool Setting_ShowTerrain = 33;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->setting_showterrain(), output);
  }

  // required bool Setting_TerrainModel = 34;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->setting_terrainmodel(), output);
  }

  // required bool Setting_TerrainAnimateX = 35;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->setting_terrainanimatex(), output);
  }

  // required bool Setting_TerrainAnimateY = 36;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->setting_terrainanimatey(), output);
  }

  cached_has_bits = _has_bits_[0];
  // required string heightmapImage = 37;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heightmapimage().data(), static_cast<int>(this->heightmapimage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.GUISettings.heightmapImage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->heightmapimage(), output);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 Setting_TerrainWidth = 38;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->setting_terrainwidth(), output);
  }

  // required int32 Setting_TerrainHeight = 39;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->setting_terrainheight(), output);
  }

  // required bool Setting_ShowSpaceship = 40;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->setting_showspaceship(), output);
  }

  // required bool Setting_GenerateSpaceship = 41;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->setting_generatespaceship(), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.CameraSettings camera = 42;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->camera_, output);
  }

  // required .KuplungApp.GridSettings grid = 43;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->grid_, output);
  }

  // repeated .KuplungApp.LightObject lights = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->lights(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.GUISettings)
}

::google::protobuf::uint8* GUISettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.GUISettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float Setting_FOV = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->setting_fov(), target);
  }

  // required float Setting_OutlineThickness = 2;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->setting_outlinethickness(), target);
  }

  // required float Setting_RatioWidth = 3;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->setting_ratiowidth(), target);
  }

  // required float Setting_RatioHeight = 4;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->setting_ratioheight(), target);
  }

  // required float Setting_PlaneClose = 5;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->setting_planeclose(), target);
  }

  // required float Setting_PlaneFar = 6;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->setting_planefar(), target);
  }

  // required int32 Setting_GridSize = 7;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->setting_gridsize(), target);
  }

  // required int32 Setting_Skybox = 8;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->setting_skybox(), target);
  }

  // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->setting_outlinecolor_, deterministic, target);
  }

  // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->setting_uiambientlight_, deterministic, target);
  }

  // required bool Setting_FixedGridWorld = 11;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->setting_fixedgridworld(), target);
  }

  // required bool Setting_OutlineColorPickerOpen = 12;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->setting_outlinecolorpickeropen(), target);
  }

  // required bool Setting_ShowAxisHelpers = 13;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->setting_showaxishelpers(), target);
  }

  // required bool Settings_ShowZAxis = 14;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->settings_showzaxis(), target);
  }

  // required bool Setting_DeferredTestMode = 15;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->setting_deferredtestmode(), target);
  }

  // required bool Setting_DeferredTestLights = 16;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->setting_deferredtestlights(), target);
  }

  // required int32 Setting_LightingPass_DrawMode = 17;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->setting_lightingpass_drawmode(), target);
  }

  // required int32 Setting_DeferredTestLightsNumber = 18;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->setting_deferredtestlightsnumber(), target);
  }

  // required float Setting_DeferredAmbientStrength = 19;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->setting_deferredambientstrength(), target);
  }

  // required int32 viewModelSkin = 20;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->viewmodelskin(), target);
  }

  // required .KuplungApp.Vec3 SolidLight_Direction = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, *this->solidlight_direction_, deterministic, target);
  }

  // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, *this->solidlight_materialcolor_, deterministic, target);
  }

  // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, *this->solidlight_ambient_, deterministic, target);
  }

  // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, *this->solidlight_diffuse_, deterministic, target);
  }

  // required .KuplungApp.Vec3 SolidLight_Specular = 25;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, *this->solidlight_specular_, deterministic, target);
  }

  // required float SolidLight_Ambient_Strength = 26;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->solidlight_ambient_strength(), target);
  }

  // required float SolidLight_Diffuse_Strength = 27;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->solidlight_diffuse_strength(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required float SolidLight_Specular_Strength = 28;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->solidlight_specular_strength(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required bool SolidLight_MaterialColor_ColorPicker = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->solidlight_materialcolor_colorpicker(), target);
  }

  // required bool SolidLight_Ambient_ColorPicker = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->solidlight_ambient_colorpicker(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required bool SolidLight_Diffuse_ColorPicker = 31;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->solidlight_diffuse_colorpicker(), target);
  }

  // required bool SolidLight_Specular_ColorPicker = 32;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->solidlight_specular_colorpicker(), target);
  }

  // required bool Setting_ShowTerrain = 33;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->setting_showterrain(), target);
  }

  // required bool Setting_TerrainModel = 34;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->setting_terrainmodel(), target);
  }

  // required bool Setting_TerrainAnimateX = 35;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->setting_terrainanimatex(), target);
  }

  // required bool Setting_TerrainAnimateY = 36;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->setting_terrainanimatey(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string heightmapImage = 37;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heightmapimage().data(), static_cast<int>(this->heightmapimage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.GUISettings.heightmapImage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->heightmapimage(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 Setting_TerrainWidth = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->setting_terrainwidth(), target);
  }

  // required int32 Setting_TerrainHeight = 39;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->setting_terrainheight(), target);
  }

  // required bool Setting_ShowSpaceship = 40;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->setting_showspaceship(), target);
  }

  // required bool Setting_GenerateSpaceship = 41;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->setting_generatespaceship(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.CameraSettings camera = 42;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, *this->camera_, deterministic, target);
  }

  // required .KuplungApp.GridSettings grid = 43;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43, *this->grid_, deterministic, target);
  }

  // repeated .KuplungApp.LightObject lights = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        44, this->lights(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.GUISettings)
  return target;
}

size_t GUISettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.GUISettings)
  size_t total_size = 0;

  if (has_heightmapimage()) {
    // required string heightmapImage = 37;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->heightmapimage());
  }

  if (has_setting_outlinecolor()) {
    // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->setting_outlinecolor_);
  }

  if (has_setting_uiambientlight()) {
    // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->setting_uiambientlight_);
  }

  if (has_solidlight_direction()) {
    // required .KuplungApp.Vec3 SolidLight_Direction = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidlight_direction_);
  }

  if (has_solidlight_materialcolor()) {
    // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidlight_materialcolor_);
  }

  if (has_solidlight_ambient()) {
    // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidlight_ambient_);
  }

  if (has_solidlight_diffuse()) {
    // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidlight_diffuse_);
  }

  if (has_solidlight_specular()) {
    // required .KuplungApp.Vec3 SolidLight_Specular = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidlight_specular_);
  }

  if (has_camera()) {
    // required .KuplungApp.CameraSettings camera = 42;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->camera_);
  }

  if (has_grid()) {
    // required .KuplungApp.GridSettings grid = 43;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->grid_);
  }

  if (has_setting_fov()) {
    // required float Setting_FOV = 1;
    total_size += 1 + 4;
  }

  if (has_setting_outlinethickness()) {
    // required float Setting_OutlineThickness = 2;
    total_size += 1 + 4;
  }

  if (has_setting_ratiowidth()) {
    // required float Setting_RatioWidth = 3;
    total_size += 1 + 4;
  }

  if (has_setting_ratioheight()) {
    // required float Setting_RatioHeight = 4;
    total_size += 1 + 4;
  }

  if (has_setting_planeclose()) {
    // required float Setting_PlaneClose = 5;
    total_size += 1 + 4;
  }

  if (has_setting_planefar()) {
    // required float Setting_PlaneFar = 6;
    total_size += 1 + 4;
  }

  if (has_setting_gridsize()) {
    // required int32 Setting_GridSize = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_gridsize());
  }

  if (has_setting_skybox()) {
    // required int32 Setting_Skybox = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_skybox());
  }

  if (has_setting_fixedgridworld()) {
    // required bool Setting_FixedGridWorld = 11;
    total_size += 1 + 1;
  }

  if (has_setting_outlinecolorpickeropen()) {
    // required bool Setting_OutlineColorPickerOpen = 12;
    total_size += 1 + 1;
  }

  if (has_setting_showaxishelpers()) {
    // required bool Setting_ShowAxisHelpers = 13;
    total_size += 1 + 1;
  }

  if (has_settings_showzaxis()) {
    // required bool Settings_ShowZAxis = 14;
    total_size += 1 + 1;
  }

  if (has_setting_lightingpass_drawmode()) {
    // required int32 Setting_LightingPass_DrawMode = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_lightingpass_drawmode());
  }

  if (has_setting_deferredtestlightsnumber()) {
    // required int32 Setting_DeferredTestLightsNumber = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_deferredtestlightsnumber());
  }

  if (has_setting_deferredambientstrength()) {
    // required float Setting_DeferredAmbientStrength = 19;
    total_size += 2 + 4;
  }

  if (has_viewmodelskin()) {
    // required int32 viewModelSkin = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->viewmodelskin());
  }

  if (has_setting_deferredtestmode()) {
    // required bool Setting_DeferredTestMode = 15;
    total_size += 1 + 1;
  }

  if (has_setting_deferredtestlights()) {
    // required bool Setting_DeferredTestLights = 16;
    total_size += 2 + 1;
  }

  if (has_solidlight_materialcolor_colorpicker()) {
    // required bool SolidLight_MaterialColor_ColorPicker = 29;
    total_size += 2 + 1;
  }

  if (has_solidlight_ambient_colorpicker()) {
    // required bool SolidLight_Ambient_ColorPicker = 30;
    total_size += 2 + 1;
  }

  if (has_solidlight_ambient_strength()) {
    // required float SolidLight_Ambient_Strength = 26;
    total_size += 2 + 4;
  }

  if (has_solidlight_diffuse_strength()) {
    // required float SolidLight_Diffuse_Strength = 27;
    total_size += 2 + 4;
  }

  if (has_solidlight_specular_strength()) {
    // required float SolidLight_Specular_Strength = 28;
    total_size += 2 + 4;
  }

  if (has_solidlight_diffuse_colorpicker()) {
    // required bool SolidLight_Diffuse_ColorPicker = 31;
    total_size += 2 + 1;
  }

  if (has_solidlight_specular_colorpicker()) {
    // required bool SolidLight_Specular_ColorPicker = 32;
    total_size += 2 + 1;
  }

  if (has_setting_showterrain()) {
    // required bool Setting_ShowTerrain = 33;
    total_size += 2 + 1;
  }

  if (has_setting_terrainmodel()) {
    // required bool Setting_TerrainModel = 34;
    total_size += 2 + 1;
  }

  if (has_setting_terrainwidth()) {
    // required int32 Setting_TerrainWidth = 38;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_terrainwidth());
  }

  if (has_setting_terrainanimatex()) {
    // required bool Setting_TerrainAnimateX = 35;
    total_size += 2 + 1;
  }

  if (has_setting_terrainanimatey()) {
    // required bool Setting_TerrainAnimateY = 36;
    total_size += 2 + 1;
  }

  if (has_setting_showspaceship()) {
    // required bool Setting_ShowSpaceship = 40;
    total_size += 2 + 1;
  }

  if (has_setting_generatespaceship()) {
    // required bool Setting_GenerateSpaceship = 41;
    total_size += 2 + 1;
  }

  if (has_setting_terrainheight()) {
    // required int32 Setting_TerrainHeight = 39;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_terrainheight());
  }

  return total_size;
}
size_t GUISettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.GUISettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if ((((_has_bits_[0] & 0xffffffff) ^ 0xffffffff)
         | ((_has_bits_[1] & 0x000007ff) ^ 0x000007ff)) == 0) {  // All required fields are present.
    // required string heightmapImage = 37;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->heightmapimage());

    // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->setting_outlinecolor_);

    // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->setting_uiambientlight_);

    // required .KuplungApp.Vec3 SolidLight_Direction = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidlight_direction_);

    // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidlight_materialcolor_);

    // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidlight_ambient_);

    // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidlight_diffuse_);

    // required .KuplungApp.Vec3 SolidLight_Specular = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->solidlight_specular_);

    // required .KuplungApp.CameraSettings camera = 42;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->camera_);

    // required .KuplungApp.GridSettings grid = 43;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->grid_);

    // required float Setting_FOV = 1;
    total_size += 1 + 4;

    // required float Setting_OutlineThickness = 2;
    total_size += 1 + 4;

    // required float Setting_RatioWidth = 3;
    total_size += 1 + 4;

    // required float Setting_RatioHeight = 4;
    total_size += 1 + 4;

    // required float Setting_PlaneClose = 5;
    total_size += 1 + 4;

    // required float Setting_PlaneFar = 6;
    total_size += 1 + 4;

    // required int32 Setting_GridSize = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_gridsize());

    // required int32 Setting_Skybox = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_skybox());

    // required bool Setting_FixedGridWorld = 11;
    total_size += 1 + 1;

    // required bool Setting_OutlineColorPickerOpen = 12;
    total_size += 1 + 1;

    // required bool Setting_ShowAxisHelpers = 13;
    total_size += 1 + 1;

    // required bool Settings_ShowZAxis = 14;
    total_size += 1 + 1;

    // required int32 Setting_LightingPass_DrawMode = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_lightingpass_drawmode());

    // required int32 Setting_DeferredTestLightsNumber = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_deferredtestlightsnumber());

    // required float Setting_DeferredAmbientStrength = 19;
    total_size += 2 + 4;

    // required int32 viewModelSkin = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->viewmodelskin());

    // required bool Setting_DeferredTestMode = 15;
    total_size += 1 + 1;

    // required bool Setting_DeferredTestLights = 16;
    total_size += 2 + 1;

    // required bool SolidLight_MaterialColor_ColorPicker = 29;
    total_size += 2 + 1;

    // required bool SolidLight_Ambient_ColorPicker = 30;
    total_size += 2 + 1;

    // required float SolidLight_Ambient_Strength = 26;
    total_size += 2 + 4;

    // required float SolidLight_Diffuse_Strength = 27;
    total_size += 2 + 4;

    // required float SolidLight_Specular_Strength = 28;
    total_size += 2 + 4;

    // required bool SolidLight_Diffuse_ColorPicker = 31;
    total_size += 2 + 1;

    // required bool SolidLight_Specular_ColorPicker = 32;
    total_size += 2 + 1;

    // required bool Setting_ShowTerrain = 33;
    total_size += 2 + 1;

    // required bool Setting_TerrainModel = 34;
    total_size += 2 + 1;

    // required int32 Setting_TerrainWidth = 38;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_terrainwidth());

    // required bool Setting_TerrainAnimateX = 35;
    total_size += 2 + 1;

    // required bool Setting_TerrainAnimateY = 36;
    total_size += 2 + 1;

    // required bool Setting_ShowSpaceship = 40;
    total_size += 2 + 1;

    // required bool Setting_GenerateSpaceship = 41;
    total_size += 2 + 1;

    // required int32 Setting_TerrainHeight = 39;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->setting_terrainheight());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .KuplungApp.LightObject lights = 44;
  {
    unsigned int count = static_cast<unsigned int>(this->lights_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lights(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GUISettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.GUISettings)
  GOOGLE_DCHECK_NE(&from, this);
  const GUISettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GUISettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.GUISettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.GUISettings)
    MergeFrom(*source);
  }
}

void GUISettings::MergeFrom(const GUISettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.GUISettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lights_.MergeFrom(from.lights_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_heightmapimage();
      heightmapimage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heightmapimage_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_setting_outlinecolor()->::KuplungApp::Vec4::MergeFrom(from.setting_outlinecolor());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_setting_uiambientlight()->::KuplungApp::Vec3::MergeFrom(from.setting_uiambientlight());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_solidlight_direction()->::KuplungApp::Vec3::MergeFrom(from.solidlight_direction());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_solidlight_materialcolor()->::KuplungApp::Vec3::MergeFrom(from.solidlight_materialcolor());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_solidlight_ambient()->::KuplungApp::Vec3::MergeFrom(from.solidlight_ambient());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_solidlight_diffuse()->::KuplungApp::Vec3::MergeFrom(from.solidlight_diffuse());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_solidlight_specular()->::KuplungApp::Vec3::MergeFrom(from.solidlight_specular());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_camera()->::KuplungApp::CameraSettings::MergeFrom(from.camera());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_grid()->::KuplungApp::GridSettings::MergeFrom(from.grid());
    }
    if (cached_has_bits & 0x00000400u) {
      setting_fov_ = from.setting_fov_;
    }
    if (cached_has_bits & 0x00000800u) {
      setting_outlinethickness_ = from.setting_outlinethickness_;
    }
    if (cached_has_bits & 0x00001000u) {
      setting_ratiowidth_ = from.setting_ratiowidth_;
    }
    if (cached_has_bits & 0x00002000u) {
      setting_ratioheight_ = from.setting_ratioheight_;
    }
    if (cached_has_bits & 0x00004000u) {
      setting_planeclose_ = from.setting_planeclose_;
    }
    if (cached_has_bits & 0x00008000u) {
      setting_planefar_ = from.setting_planefar_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      setting_gridsize_ = from.setting_gridsize_;
    }
    if (cached_has_bits & 0x00020000u) {
      setting_skybox_ = from.setting_skybox_;
    }
    if (cached_has_bits & 0x00040000u) {
      setting_fixedgridworld_ = from.setting_fixedgridworld_;
    }
    if (cached_has_bits & 0x00080000u) {
      setting_outlinecolorpickeropen_ = from.setting_outlinecolorpickeropen_;
    }
    if (cached_has_bits & 0x00100000u) {
      setting_showaxishelpers_ = from.setting_showaxishelpers_;
    }
    if (cached_has_bits & 0x00200000u) {
      settings_showzaxis_ = from.settings_showzaxis_;
    }
    if (cached_has_bits & 0x00400000u) {
      setting_lightingpass_drawmode_ = from.setting_lightingpass_drawmode_;
    }
    if (cached_has_bits & 0x00800000u) {
      setting_deferredtestlightsnumber_ = from.setting_deferredtestlightsnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      setting_deferredambientstrength_ = from.setting_deferredambientstrength_;
    }
    if (cached_has_bits & 0x02000000u) {
      viewmodelskin_ = from.viewmodelskin_;
    }
    if (cached_has_bits & 0x04000000u) {
      setting_deferredtestmode_ = from.setting_deferredtestmode_;
    }
    if (cached_has_bits & 0x08000000u) {
      setting_deferredtestlights_ = from.setting_deferredtestlights_;
    }
    if (cached_has_bits & 0x10000000u) {
      solidlight_materialcolor_colorpicker_ = from.solidlight_materialcolor_colorpicker_;
    }
    if (cached_has_bits & 0x20000000u) {
      solidlight_ambient_colorpicker_ = from.solidlight_ambient_colorpicker_;
    }
    if (cached_has_bits & 0x40000000u) {
      solidlight_ambient_strength_ = from.solidlight_ambient_strength_;
    }
    if (cached_has_bits & 0x80000000u) {
      solidlight_diffuse_strength_ = from.solidlight_diffuse_strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      solidlight_specular_strength_ = from.solidlight_specular_strength_;
    }
    if (cached_has_bits & 0x00000002u) {
      solidlight_diffuse_colorpicker_ = from.solidlight_diffuse_colorpicker_;
    }
    if (cached_has_bits & 0x00000004u) {
      solidlight_specular_colorpicker_ = from.solidlight_specular_colorpicker_;
    }
    if (cached_has_bits & 0x00000008u) {
      setting_showterrain_ = from.setting_showterrain_;
    }
    if (cached_has_bits & 0x00000010u) {
      setting_terrainmodel_ = from.setting_terrainmodel_;
    }
    if (cached_has_bits & 0x00000020u) {
      setting_terrainwidth_ = from.setting_terrainwidth_;
    }
    if (cached_has_bits & 0x00000040u) {
      setting_terrainanimatex_ = from.setting_terrainanimatex_;
    }
    if (cached_has_bits & 0x00000080u) {
      setting_terrainanimatey_ = from.setting_terrainanimatey_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      setting_showspaceship_ = from.setting_showspaceship_;
    }
    if (cached_has_bits & 0x00000200u) {
      setting_generatespaceship_ = from.setting_generatespaceship_;
    }
    if (cached_has_bits & 0x00000400u) {
      setting_terrainheight_ = from.setting_terrainheight_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void GUISettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.GUISettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUISettings::CopyFrom(const GUISettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.GUISettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUISettings::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000007ff) != 0x000007ff) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lights())) return false;
  if (has_setting_outlinecolor()) {
    if (!this->setting_outlinecolor_->IsInitialized()) return false;
  }
  if (has_setting_uiambientlight()) {
    if (!this->setting_uiambientlight_->IsInitialized()) return false;
  }
  if (has_solidlight_direction()) {
    if (!this->solidlight_direction_->IsInitialized()) return false;
  }
  if (has_solidlight_materialcolor()) {
    if (!this->solidlight_materialcolor_->IsInitialized()) return false;
  }
  if (has_solidlight_ambient()) {
    if (!this->solidlight_ambient_->IsInitialized()) return false;
  }
  if (has_solidlight_diffuse()) {
    if (!this->solidlight_diffuse_->IsInitialized()) return false;
  }
  if (has_solidlight_specular()) {
    if (!this->solidlight_specular_->IsInitialized()) return false;
  }
  if (has_camera()) {
    if (!this->camera_->IsInitialized()) return false;
  }
  if (has_grid()) {
    if (!this->grid_->IsInitialized()) return false;
  }
  return true;
}

void GUISettings::Swap(GUISettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GUISettings::InternalSwap(GUISettings* other) {
  using std::swap;
  lights_.InternalSwap(&other->lights_);
  heightmapimage_.Swap(&other->heightmapimage_);
  swap(setting_outlinecolor_, other->setting_outlinecolor_);
  swap(setting_uiambientlight_, other->setting_uiambientlight_);
  swap(solidlight_direction_, other->solidlight_direction_);
  swap(solidlight_materialcolor_, other->solidlight_materialcolor_);
  swap(solidlight_ambient_, other->solidlight_ambient_);
  swap(solidlight_diffuse_, other->solidlight_diffuse_);
  swap(solidlight_specular_, other->solidlight_specular_);
  swap(camera_, other->camera_);
  swap(grid_, other->grid_);
  swap(setting_fov_, other->setting_fov_);
  swap(setting_outlinethickness_, other->setting_outlinethickness_);
  swap(setting_ratiowidth_, other->setting_ratiowidth_);
  swap(setting_ratioheight_, other->setting_ratioheight_);
  swap(setting_planeclose_, other->setting_planeclose_);
  swap(setting_planefar_, other->setting_planefar_);
  swap(setting_gridsize_, other->setting_gridsize_);
  swap(setting_skybox_, other->setting_skybox_);
  swap(setting_fixedgridworld_, other->setting_fixedgridworld_);
  swap(setting_outlinecolorpickeropen_, other->setting_outlinecolorpickeropen_);
  swap(setting_showaxishelpers_, other->setting_showaxishelpers_);
  swap(settings_showzaxis_, other->settings_showzaxis_);
  swap(setting_lightingpass_drawmode_, other->setting_lightingpass_drawmode_);
  swap(setting_deferredtestlightsnumber_, other->setting_deferredtestlightsnumber_);
  swap(setting_deferredambientstrength_, other->setting_deferredambientstrength_);
  swap(viewmodelskin_, other->viewmodelskin_);
  swap(setting_deferredtestmode_, other->setting_deferredtestmode_);
  swap(setting_deferredtestlights_, other->setting_deferredtestlights_);
  swap(solidlight_materialcolor_colorpicker_, other->solidlight_materialcolor_colorpicker_);
  swap(solidlight_ambient_colorpicker_, other->solidlight_ambient_colorpicker_);
  swap(solidlight_ambient_strength_, other->solidlight_ambient_strength_);
  swap(solidlight_diffuse_strength_, other->solidlight_diffuse_strength_);
  swap(solidlight_specular_strength_, other->solidlight_specular_strength_);
  swap(solidlight_diffuse_colorpicker_, other->solidlight_diffuse_colorpicker_);
  swap(solidlight_specular_colorpicker_, other->solidlight_specular_colorpicker_);
  swap(setting_showterrain_, other->setting_showterrain_);
  swap(setting_terrainmodel_, other->setting_terrainmodel_);
  swap(setting_terrainwidth_, other->setting_terrainwidth_);
  swap(setting_terrainanimatex_, other->setting_terrainanimatex_);
  swap(setting_terrainanimatey_, other->setting_terrainanimatey_);
  swap(setting_showspaceship_, other->setting_showspaceship_);
  swap(setting_generatespaceship_, other->setting_generatespaceship_);
  swap(setting_terrainheight_, other->setting_terrainheight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GUISettings::GetMetadata() const {
  protobuf_KuplungAppSettings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungAppSettings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraSettings::InitAsDefaultInstance() {
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->cameraposition_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->view_eye_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->view_center_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->view_up_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->positionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->positiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->positionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatecenterx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatecentery_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatecenterz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
}
void CameraSettings::clear_cameraposition() {
  if (cameraposition_ != NULL) cameraposition_->Clear();
  clear_has_cameraposition();
}
void CameraSettings::clear_view_eye() {
  if (view_eye_ != NULL) view_eye_->Clear();
  clear_has_view_eye();
}
void CameraSettings::clear_view_center() {
  if (view_center_ != NULL) view_center_->Clear();
  clear_has_view_center();
}
void CameraSettings::clear_view_up() {
  if (view_up_ != NULL) view_up_->Clear();
  clear_has_view_up();
}
void CameraSettings::clear_positionx() {
  if (positionx_ != NULL) positionx_->Clear();
  clear_has_positionx();
}
void CameraSettings::clear_positiony() {
  if (positiony_ != NULL) positiony_->Clear();
  clear_has_positiony();
}
void CameraSettings::clear_positionz() {
  if (positionz_ != NULL) positionz_->Clear();
  clear_has_positionz();
}
void CameraSettings::clear_rotatex() {
  if (rotatex_ != NULL) rotatex_->Clear();
  clear_has_rotatex();
}
void CameraSettings::clear_rotatey() {
  if (rotatey_ != NULL) rotatey_->Clear();
  clear_has_rotatey();
}
void CameraSettings::clear_rotatez() {
  if (rotatez_ != NULL) rotatez_->Clear();
  clear_has_rotatez();
}
void CameraSettings::clear_rotatecenterx() {
  if (rotatecenterx_ != NULL) rotatecenterx_->Clear();
  clear_has_rotatecenterx();
}
void CameraSettings::clear_rotatecentery() {
  if (rotatecentery_ != NULL) rotatecentery_->Clear();
  clear_has_rotatecentery();
}
void CameraSettings::clear_rotatecenterz() {
  if (rotatecenterz_ != NULL) rotatecenterz_->Clear();
  clear_has_rotatecenterz();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraSettings::kCameraPositionFieldNumber;
const int CameraSettings::kViewEyeFieldNumber;
const int CameraSettings::kViewCenterFieldNumber;
const int CameraSettings::kViewUpFieldNumber;
const int CameraSettings::kPositionXFieldNumber;
const int CameraSettings::kPositionYFieldNumber;
const int CameraSettings::kPositionZFieldNumber;
const int CameraSettings::kRotateXFieldNumber;
const int CameraSettings::kRotateYFieldNumber;
const int CameraSettings::kRotateZFieldNumber;
const int CameraSettings::kRotateCenterXFieldNumber;
const int CameraSettings::kRotateCenterYFieldNumber;
const int CameraSettings::kRotateCenterZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraSettings::CameraSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungAppSettings_2eproto::InitDefaultsCameraSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.CameraSettings)
}
CameraSettings::CameraSettings(const CameraSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cameraposition()) {
    cameraposition_ = new ::KuplungApp::Vec3(*from.cameraposition_);
  } else {
    cameraposition_ = NULL;
  }
  if (from.has_view_eye()) {
    view_eye_ = new ::KuplungApp::Vec3(*from.view_eye_);
  } else {
    view_eye_ = NULL;
  }
  if (from.has_view_center()) {
    view_center_ = new ::KuplungApp::Vec3(*from.view_center_);
  } else {
    view_center_ = NULL;
  }
  if (from.has_view_up()) {
    view_up_ = new ::KuplungApp::Vec3(*from.view_up_);
  } else {
    view_up_ = NULL;
  }
  if (from.has_positionx()) {
    positionx_ = new ::KuplungApp::ObjectCoordinate(*from.positionx_);
  } else {
    positionx_ = NULL;
  }
  if (from.has_positiony()) {
    positiony_ = new ::KuplungApp::ObjectCoordinate(*from.positiony_);
  } else {
    positiony_ = NULL;
  }
  if (from.has_positionz()) {
    positionz_ = new ::KuplungApp::ObjectCoordinate(*from.positionz_);
  } else {
    positionz_ = NULL;
  }
  if (from.has_rotatex()) {
    rotatex_ = new ::KuplungApp::ObjectCoordinate(*from.rotatex_);
  } else {
    rotatex_ = NULL;
  }
  if (from.has_rotatey()) {
    rotatey_ = new ::KuplungApp::ObjectCoordinate(*from.rotatey_);
  } else {
    rotatey_ = NULL;
  }
  if (from.has_rotatez()) {
    rotatez_ = new ::KuplungApp::ObjectCoordinate(*from.rotatez_);
  } else {
    rotatez_ = NULL;
  }
  if (from.has_rotatecenterx()) {
    rotatecenterx_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecenterx_);
  } else {
    rotatecenterx_ = NULL;
  }
  if (from.has_rotatecentery()) {
    rotatecentery_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecentery_);
  } else {
    rotatecentery_ = NULL;
  }
  if (from.has_rotatecenterz()) {
    rotatecenterz_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecenterz_);
  } else {
    rotatecenterz_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:KuplungApp.CameraSettings)
}

void CameraSettings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cameraposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotatecenterz_) -
      reinterpret_cast<char*>(&cameraposition_)) + sizeof(rotatecenterz_));
}

CameraSettings::~CameraSettings() {
  // @@protoc_insertion_point(destructor:KuplungApp.CameraSettings)
  SharedDtor();
}

void CameraSettings::SharedDtor() {
  if (this != internal_default_instance()) delete cameraposition_;
  if (this != internal_default_instance()) delete view_eye_;
  if (this != internal_default_instance()) delete view_center_;
  if (this != internal_default_instance()) delete view_up_;
  if (this != internal_default_instance()) delete positionx_;
  if (this != internal_default_instance()) delete positiony_;
  if (this != internal_default_instance()) delete positionz_;
  if (this != internal_default_instance()) delete rotatex_;
  if (this != internal_default_instance()) delete rotatey_;
  if (this != internal_default_instance()) delete rotatez_;
  if (this != internal_default_instance()) delete rotatecenterx_;
  if (this != internal_default_instance()) delete rotatecentery_;
  if (this != internal_default_instance()) delete rotatecenterz_;
}

void CameraSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraSettings::descriptor() {
  ::protobuf_KuplungAppSettings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungAppSettings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraSettings& CameraSettings::default_instance() {
  ::protobuf_KuplungAppSettings_2eproto::InitDefaultsCameraSettings();
  return *internal_default_instance();
}

CameraSettings* CameraSettings::New(::google::protobuf::Arena* arena) const {
  CameraSettings* n = new CameraSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.CameraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cameraposition_ != NULL);
      cameraposition_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(view_eye_ != NULL);
      view_eye_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(view_center_ != NULL);
      view_center_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(view_up_ != NULL);
      view_up_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(positionx_ != NULL);
      positionx_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(positiony_ != NULL);
      positiony_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(positionz_ != NULL);
      positionz_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(rotatex_ != NULL);
      rotatex_->Clear();
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(rotatey_ != NULL);
      rotatey_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(rotatez_ != NULL);
      rotatez_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(rotatecenterx_ != NULL);
      rotatecenterx_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(rotatecentery_ != NULL);
      rotatecentery_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(rotatecenterz_ != NULL);
      rotatecenterz_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.CameraSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KuplungApp.Vec3 cameraPosition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cameraposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 View_Eye = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_view_eye()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 View_Center = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_view_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 View_Up = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_view_up()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionX = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_positionx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionY = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_positiony()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionZ = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_positionz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateX = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateY = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateZ = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatez()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatecenterx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatecentery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatecenterz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.CameraSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.CameraSettings)
  return false;
#undef DO_
}

void CameraSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.CameraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.Vec3 cameraPosition = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cameraposition_, output);
  }

  // required .KuplungApp.Vec3 View_Eye = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->view_eye_, output);
  }

  // required .KuplungApp.Vec3 View_Center = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->view_center_, output);
  }

  // required .KuplungApp.Vec3 View_Up = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->view_up_, output);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->positionx_, output);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->positiony_, output);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->positionz_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->rotatex_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->rotatey_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->rotatez_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->rotatecenterx_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->rotatecentery_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->rotatecenterz_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.CameraSettings)
}

::google::protobuf::uint8* CameraSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.CameraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.Vec3 cameraPosition = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->cameraposition_, deterministic, target);
  }

  // required .KuplungApp.Vec3 View_Eye = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->view_eye_, deterministic, target);
  }

  // required .KuplungApp.Vec3 View_Center = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->view_center_, deterministic, target);
  }

  // required .KuplungApp.Vec3 View_Up = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->view_up_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->positionx_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->positiony_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->positionz_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->rotatex_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->rotatey_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->rotatez_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->rotatecenterx_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->rotatecentery_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *this->rotatecenterz_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.CameraSettings)
  return target;
}

size_t CameraSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.CameraSettings)
  size_t total_size = 0;

  if (has_cameraposition()) {
    // required .KuplungApp.Vec3 cameraPosition = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cameraposition_);
  }

  if (has_view_eye()) {
    // required .KuplungApp.Vec3 View_Eye = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->view_eye_);
  }

  if (has_view_center()) {
    // required .KuplungApp.Vec3 View_Center = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->view_center_);
  }

  if (has_view_up()) {
    // required .KuplungApp.Vec3 View_Up = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->view_up_);
  }

  if (has_positionx()) {
    // required .KuplungApp.ObjectCoordinate positionX = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionx_);
  }

  if (has_positiony()) {
    // required .KuplungApp.ObjectCoordinate positionY = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positiony_);
  }

  if (has_positionz()) {
    // required .KuplungApp.ObjectCoordinate positionZ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionz_);
  }

  if (has_rotatex()) {
    // required .KuplungApp.ObjectCoordinate rotateX = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatex_);
  }

  if (has_rotatey()) {
    // required .KuplungApp.ObjectCoordinate rotateY = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatey_);
  }

  if (has_rotatez()) {
    // required .KuplungApp.ObjectCoordinate rotateZ = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatez_);
  }

  if (has_rotatecenterx()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecenterx_);
  }

  if (has_rotatecentery()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecentery_);
  }

  if (has_rotatecenterz()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecenterz_);
  }

  return total_size;
}
size_t CameraSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.CameraSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required .KuplungApp.Vec3 cameraPosition = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cameraposition_);

    // required .KuplungApp.Vec3 View_Eye = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->view_eye_);

    // required .KuplungApp.Vec3 View_Center = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->view_center_);

    // required .KuplungApp.Vec3 View_Up = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->view_up_);

    // required .KuplungApp.ObjectCoordinate positionX = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionx_);

    // required .KuplungApp.ObjectCoordinate positionY = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positiony_);

    // required .KuplungApp.ObjectCoordinate positionZ = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionz_);

    // required .KuplungApp.ObjectCoordinate rotateX = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatex_);

    // required .KuplungApp.ObjectCoordinate rotateY = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatey_);

    // required .KuplungApp.ObjectCoordinate rotateZ = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatez_);

    // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecenterx_);

    // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecentery_);

    // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecenterz_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.CameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.CameraSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.CameraSettings)
    MergeFrom(*source);
  }
}

void CameraSettings::MergeFrom(const CameraSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.CameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cameraposition()->::KuplungApp::Vec3::MergeFrom(from.cameraposition());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_view_eye()->::KuplungApp::Vec3::MergeFrom(from.view_eye());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_view_center()->::KuplungApp::Vec3::MergeFrom(from.view_center());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_view_up()->::KuplungApp::Vec3::MergeFrom(from.view_up());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_positionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionx());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_positiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positiony());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_positionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionz());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_rotatex()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatex());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_rotatey()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatey());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_rotatez()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatez());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_rotatecenterx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecenterx());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_rotatecentery()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecentery());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_rotatecenterz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecenterz());
    }
  }
}

void CameraSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.CameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSettings::CopyFrom(const CameraSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.CameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  if (has_cameraposition()) {
    if (!this->cameraposition_->IsInitialized()) return false;
  }
  if (has_view_eye()) {
    if (!this->view_eye_->IsInitialized()) return false;
  }
  if (has_view_center()) {
    if (!this->view_center_->IsInitialized()) return false;
  }
  if (has_view_up()) {
    if (!this->view_up_->IsInitialized()) return false;
  }
  if (has_positionx()) {
    if (!this->positionx_->IsInitialized()) return false;
  }
  if (has_positiony()) {
    if (!this->positiony_->IsInitialized()) return false;
  }
  if (has_positionz()) {
    if (!this->positionz_->IsInitialized()) return false;
  }
  if (has_rotatex()) {
    if (!this->rotatex_->IsInitialized()) return false;
  }
  if (has_rotatey()) {
    if (!this->rotatey_->IsInitialized()) return false;
  }
  if (has_rotatez()) {
    if (!this->rotatez_->IsInitialized()) return false;
  }
  if (has_rotatecenterx()) {
    if (!this->rotatecenterx_->IsInitialized()) return false;
  }
  if (has_rotatecentery()) {
    if (!this->rotatecentery_->IsInitialized()) return false;
  }
  if (has_rotatecenterz()) {
    if (!this->rotatecenterz_->IsInitialized()) return false;
  }
  return true;
}

void CameraSettings::Swap(CameraSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraSettings::InternalSwap(CameraSettings* other) {
  using std::swap;
  swap(cameraposition_, other->cameraposition_);
  swap(view_eye_, other->view_eye_);
  swap(view_center_, other->view_center_);
  swap(view_up_, other->view_up_);
  swap(positionx_, other->positionx_);
  swap(positiony_, other->positiony_);
  swap(positionz_, other->positionz_);
  swap(rotatex_, other->rotatex_);
  swap(rotatey_, other->rotatey_);
  swap(rotatez_, other->rotatez_);
  swap(rotatecenterx_, other->rotatecenterx_);
  swap(rotatecentery_, other->rotatecentery_);
  swap(rotatecenterz_, other->rotatecenterz_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraSettings::GetMetadata() const {
  protobuf_KuplungAppSettings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungAppSettings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GridSettings::InitAsDefaultInstance() {
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->positionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->positiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->positionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->rotatex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->rotatey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->rotatez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->scalex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->scaley_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->scalez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
}
void GridSettings::clear_positionx() {
  if (positionx_ != NULL) positionx_->Clear();
  clear_has_positionx();
}
void GridSettings::clear_positiony() {
  if (positiony_ != NULL) positiony_->Clear();
  clear_has_positiony();
}
void GridSettings::clear_positionz() {
  if (positionz_ != NULL) positionz_->Clear();
  clear_has_positionz();
}
void GridSettings::clear_rotatex() {
  if (rotatex_ != NULL) rotatex_->Clear();
  clear_has_rotatex();
}
void GridSettings::clear_rotatey() {
  if (rotatey_ != NULL) rotatey_->Clear();
  clear_has_rotatey();
}
void GridSettings::clear_rotatez() {
  if (rotatez_ != NULL) rotatez_->Clear();
  clear_has_rotatez();
}
void GridSettings::clear_scalex() {
  if (scalex_ != NULL) scalex_->Clear();
  clear_has_scalex();
}
void GridSettings::clear_scaley() {
  if (scaley_ != NULL) scaley_->Clear();
  clear_has_scaley();
}
void GridSettings::clear_scalez() {
  if (scalez_ != NULL) scalez_->Clear();
  clear_has_scalez();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GridSettings::kActAsMirrorFieldNumber;
const int GridSettings::kGridSizeFieldNumber;
const int GridSettings::kPositionXFieldNumber;
const int GridSettings::kPositionYFieldNumber;
const int GridSettings::kPositionZFieldNumber;
const int GridSettings::kRotateXFieldNumber;
const int GridSettings::kRotateYFieldNumber;
const int GridSettings::kRotateZFieldNumber;
const int GridSettings::kScaleXFieldNumber;
const int GridSettings::kScaleYFieldNumber;
const int GridSettings::kScaleZFieldNumber;
const int GridSettings::kTransparencyFieldNumber;
const int GridSettings::kShowGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GridSettings::GridSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungAppSettings_2eproto::InitDefaultsGridSettings();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.GridSettings)
}
GridSettings::GridSettings(const GridSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_positionx()) {
    positionx_ = new ::KuplungApp::ObjectCoordinate(*from.positionx_);
  } else {
    positionx_ = NULL;
  }
  if (from.has_positiony()) {
    positiony_ = new ::KuplungApp::ObjectCoordinate(*from.positiony_);
  } else {
    positiony_ = NULL;
  }
  if (from.has_positionz()) {
    positionz_ = new ::KuplungApp::ObjectCoordinate(*from.positionz_);
  } else {
    positionz_ = NULL;
  }
  if (from.has_rotatex()) {
    rotatex_ = new ::KuplungApp::ObjectCoordinate(*from.rotatex_);
  } else {
    rotatex_ = NULL;
  }
  if (from.has_rotatey()) {
    rotatey_ = new ::KuplungApp::ObjectCoordinate(*from.rotatey_);
  } else {
    rotatey_ = NULL;
  }
  if (from.has_rotatez()) {
    rotatez_ = new ::KuplungApp::ObjectCoordinate(*from.rotatez_);
  } else {
    rotatez_ = NULL;
  }
  if (from.has_scalex()) {
    scalex_ = new ::KuplungApp::ObjectCoordinate(*from.scalex_);
  } else {
    scalex_ = NULL;
  }
  if (from.has_scaley()) {
    scaley_ = new ::KuplungApp::ObjectCoordinate(*from.scaley_);
  } else {
    scaley_ = NULL;
  }
  if (from.has_scalez()) {
    scalez_ = new ::KuplungApp::ObjectCoordinate(*from.scalez_);
  } else {
    scalez_ = NULL;
  }
  ::memcpy(&actasmirror_, &from.actasmirror_,
    static_cast<size_t>(reinterpret_cast<char*>(&showgrid_) -
    reinterpret_cast<char*>(&actasmirror_)) + sizeof(showgrid_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.GridSettings)
}

void GridSettings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&positionx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showgrid_) -
      reinterpret_cast<char*>(&positionx_)) + sizeof(showgrid_));
}

GridSettings::~GridSettings() {
  // @@protoc_insertion_point(destructor:KuplungApp.GridSettings)
  SharedDtor();
}

void GridSettings::SharedDtor() {
  if (this != internal_default_instance()) delete positionx_;
  if (this != internal_default_instance()) delete positiony_;
  if (this != internal_default_instance()) delete positionz_;
  if (this != internal_default_instance()) delete rotatex_;
  if (this != internal_default_instance()) delete rotatey_;
  if (this != internal_default_instance()) delete rotatez_;
  if (this != internal_default_instance()) delete scalex_;
  if (this != internal_default_instance()) delete scaley_;
  if (this != internal_default_instance()) delete scalez_;
}

void GridSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridSettings::descriptor() {
  ::protobuf_KuplungAppSettings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungAppSettings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GridSettings& GridSettings::default_instance() {
  ::protobuf_KuplungAppSettings_2eproto::InitDefaultsGridSettings();
  return *internal_default_instance();
}

GridSettings* GridSettings::New(::google::protobuf::Arena* arena) const {
  GridSettings* n = new GridSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GridSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.GridSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(positionx_ != NULL);
      positionx_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(positiony_ != NULL);
      positiony_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(positionz_ != NULL);
      positionz_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rotatex_ != NULL);
      rotatex_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rotatey_ != NULL);
      rotatey_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rotatez_ != NULL);
      rotatez_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(scalex_ != NULL);
      scalex_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(scaley_ != NULL);
      scaley_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(scalez_ != NULL);
    scalez_->Clear();
  }
  if (cached_has_bits & 7680u) {
    ::memset(&actasmirror_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&showgrid_) -
        reinterpret_cast<char*>(&actasmirror_)) + sizeof(showgrid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GridSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.GridSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool actAsMirror = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_actasmirror();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &actasmirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gridSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gridsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionX = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_positionx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionY = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_positiony()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionZ = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_positionz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateX = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateY = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateZ = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatez()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleX = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scalex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleY = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scaley()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleZ = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scalez()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float transparency = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_transparency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 showGrid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_showgrid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showgrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.GridSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.GridSettings)
  return false;
#undef DO_
}

void GridSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.GridSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool actAsMirror = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->actasmirror(), output);
  }

  // required int32 gridSize = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gridsize(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->positionx_, output);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->positiony_, output);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->positionz_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->rotatex_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->rotatey_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->rotatez_, output);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->scalex_, output);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->scaley_, output);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->scalez_, output);
  }

  // required float transparency = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->transparency(), output);
  }

  // required int32 showGrid = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->showgrid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.GridSettings)
}

::google::protobuf::uint8* GridSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.GridSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool actAsMirror = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->actasmirror(), target);
  }

  // required int32 gridSize = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gridsize(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->positionx_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->positiony_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->positionz_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->rotatex_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->rotatey_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->rotatez_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->scalex_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->scaley_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->scalez_, deterministic, target);
  }

  // required float transparency = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->transparency(), target);
  }

  // required int32 showGrid = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->showgrid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.GridSettings)
  return target;
}

size_t GridSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.GridSettings)
  size_t total_size = 0;

  if (has_positionx()) {
    // required .KuplungApp.ObjectCoordinate positionX = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionx_);
  }

  if (has_positiony()) {
    // required .KuplungApp.ObjectCoordinate positionY = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positiony_);
  }

  if (has_positionz()) {
    // required .KuplungApp.ObjectCoordinate positionZ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionz_);
  }

  if (has_rotatex()) {
    // required .KuplungApp.ObjectCoordinate rotateX = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatex_);
  }

  if (has_rotatey()) {
    // required .KuplungApp.ObjectCoordinate rotateY = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatey_);
  }

  if (has_rotatez()) {
    // required .KuplungApp.ObjectCoordinate rotateZ = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatez_);
  }

  if (has_scalex()) {
    // required .KuplungApp.ObjectCoordinate scaleX = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scalex_);
  }

  if (has_scaley()) {
    // required .KuplungApp.ObjectCoordinate scaleY = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scaley_);
  }

  if (has_scalez()) {
    // required .KuplungApp.ObjectCoordinate scaleZ = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scalez_);
  }

  if (has_actasmirror()) {
    // required bool actAsMirror = 1;
    total_size += 1 + 1;
  }

  if (has_gridsize()) {
    // required int32 gridSize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gridsize());
  }

  if (has_transparency()) {
    // required float transparency = 12;
    total_size += 1 + 4;
  }

  if (has_showgrid()) {
    // required int32 showGrid = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->showgrid());
  }

  return total_size;
}
size_t GridSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.GridSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required .KuplungApp.ObjectCoordinate positionX = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionx_);

    // required .KuplungApp.ObjectCoordinate positionY = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positiony_);

    // required .KuplungApp.ObjectCoordinate positionZ = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionz_);

    // required .KuplungApp.ObjectCoordinate rotateX = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatex_);

    // required .KuplungApp.ObjectCoordinate rotateY = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatey_);

    // required .KuplungApp.ObjectCoordinate rotateZ = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatez_);

    // required .KuplungApp.ObjectCoordinate scaleX = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scalex_);

    // required .KuplungApp.ObjectCoordinate scaleY = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scaley_);

    // required .KuplungApp.ObjectCoordinate scaleZ = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scalez_);

    // required bool actAsMirror = 1;
    total_size += 1 + 1;

    // required int32 gridSize = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gridsize());

    // required float transparency = 12;
    total_size += 1 + 4;

    // required int32 showGrid = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->showgrid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.GridSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const GridSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GridSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.GridSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.GridSettings)
    MergeFrom(*source);
  }
}

void GridSettings::MergeFrom(const GridSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.GridSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_positionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionx());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_positiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positiony());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_positionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionz());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_rotatex()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatex());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_rotatey()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatey());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_rotatez()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatez());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_scalex()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scalex());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_scaley()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scaley());
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_scalez()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scalez());
    }
    if (cached_has_bits & 0x00000200u) {
      actasmirror_ = from.actasmirror_;
    }
    if (cached_has_bits & 0x00000400u) {
      gridsize_ = from.gridsize_;
    }
    if (cached_has_bits & 0x00000800u) {
      transparency_ = from.transparency_;
    }
    if (cached_has_bits & 0x00001000u) {
      showgrid_ = from.showgrid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GridSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.GridSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridSettings::CopyFrom(const GridSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.GridSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  if (has_positionx()) {
    if (!this->positionx_->IsInitialized()) return false;
  }
  if (has_positiony()) {
    if (!this->positiony_->IsInitialized()) return false;
  }
  if (has_positionz()) {
    if (!this->positionz_->IsInitialized()) return false;
  }
  if (has_rotatex()) {
    if (!this->rotatex_->IsInitialized()) return false;
  }
  if (has_rotatey()) {
    if (!this->rotatey_->IsInitialized()) return false;
  }
  if (has_rotatez()) {
    if (!this->rotatez_->IsInitialized()) return false;
  }
  if (has_scalex()) {
    if (!this->scalex_->IsInitialized()) return false;
  }
  if (has_scaley()) {
    if (!this->scaley_->IsInitialized()) return false;
  }
  if (has_scalez()) {
    if (!this->scalez_->IsInitialized()) return false;
  }
  return true;
}

void GridSettings::Swap(GridSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GridSettings::InternalSwap(GridSettings* other) {
  using std::swap;
  swap(positionx_, other->positionx_);
  swap(positiony_, other->positiony_);
  swap(positionz_, other->positionz_);
  swap(rotatex_, other->rotatex_);
  swap(rotatey_, other->rotatey_);
  swap(rotatez_, other->rotatez_);
  swap(scalex_, other->scalex_);
  swap(scaley_, other->scaley_);
  swap(scalez_, other->scalez_);
  swap(actasmirror_, other->actasmirror_);
  swap(gridsize_, other->gridsize_);
  swap(transparency_, other->transparency_);
  swap(showgrid_, other->showgrid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GridSettings::GetMetadata() const {
  protobuf_KuplungAppSettings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungAppSettings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LightObject::InitAsDefaultInstance() {
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->positionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->positiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->positionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->directionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->directiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->directionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->scalex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->scaley_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->scalez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatecenterx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatecentery_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatecenterz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->ambient_ = const_cast< ::KuplungApp::MaterialColor*>(
      ::KuplungApp::MaterialColor::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->diffuse_ = const_cast< ::KuplungApp::MaterialColor*>(
      ::KuplungApp::MaterialColor::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->specular_ = const_cast< ::KuplungApp::MaterialColor*>(
      ::KuplungApp::MaterialColor::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->lcutoff_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->loutercutoff_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->lconstant_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->llinear_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->lquadratic_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
}
void LightObject::clear_positionx() {
  if (positionx_ != NULL) positionx_->Clear();
  clear_has_positionx();
}
void LightObject::clear_positiony() {
  if (positiony_ != NULL) positiony_->Clear();
  clear_has_positiony();
}
void LightObject::clear_positionz() {
  if (positionz_ != NULL) positionz_->Clear();
  clear_has_positionz();
}
void LightObject::clear_directionx() {
  if (directionx_ != NULL) directionx_->Clear();
  clear_has_directionx();
}
void LightObject::clear_directiony() {
  if (directiony_ != NULL) directiony_->Clear();
  clear_has_directiony();
}
void LightObject::clear_directionz() {
  if (directionz_ != NULL) directionz_->Clear();
  clear_has_directionz();
}
void LightObject::clear_scalex() {
  if (scalex_ != NULL) scalex_->Clear();
  clear_has_scalex();
}
void LightObject::clear_scaley() {
  if (scaley_ != NULL) scaley_->Clear();
  clear_has_scaley();
}
void LightObject::clear_scalez() {
  if (scalez_ != NULL) scalez_->Clear();
  clear_has_scalez();
}
void LightObject::clear_rotatex() {
  if (rotatex_ != NULL) rotatex_->Clear();
  clear_has_rotatex();
}
void LightObject::clear_rotatey() {
  if (rotatey_ != NULL) rotatey_->Clear();
  clear_has_rotatey();
}
void LightObject::clear_rotatez() {
  if (rotatez_ != NULL) rotatez_->Clear();
  clear_has_rotatez();
}
void LightObject::clear_rotatecenterx() {
  if (rotatecenterx_ != NULL) rotatecenterx_->Clear();
  clear_has_rotatecenterx();
}
void LightObject::clear_rotatecentery() {
  if (rotatecentery_ != NULL) rotatecentery_->Clear();
  clear_has_rotatecentery();
}
void LightObject::clear_rotatecenterz() {
  if (rotatecenterz_ != NULL) rotatecenterz_->Clear();
  clear_has_rotatecenterz();
}
void LightObject::clear_ambient() {
  if (ambient_ != NULL) ambient_->Clear();
  clear_has_ambient();
}
void LightObject::clear_diffuse() {
  if (diffuse_ != NULL) diffuse_->Clear();
  clear_has_diffuse();
}
void LightObject::clear_specular() {
  if (specular_ != NULL) specular_->Clear();
  clear_has_specular();
}
void LightObject::clear_lcutoff() {
  if (lcutoff_ != NULL) lcutoff_->Clear();
  clear_has_lcutoff();
}
void LightObject::clear_loutercutoff() {
  if (loutercutoff_ != NULL) loutercutoff_->Clear();
  clear_has_loutercutoff();
}
void LightObject::clear_lconstant() {
  if (lconstant_ != NULL) lconstant_->Clear();
  clear_has_lconstant();
}
void LightObject::clear_llinear() {
  if (llinear_ != NULL) llinear_->Clear();
  clear_has_llinear();
}
void LightObject::clear_lquadratic() {
  if (lquadratic_ != NULL) lquadratic_->Clear();
  clear_has_lquadratic();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightObject::kTitleFieldNumber;
const int LightObject::kDescriptionFieldNumber;
const int LightObject::kTypeFieldNumber;
const int LightObject::kShowLampObjectFieldNumber;
const int LightObject::kShowLampDirectionFieldNumber;
const int LightObject::kShowInWireFieldNumber;
const int LightObject::kPositionXFieldNumber;
const int LightObject::kPositionYFieldNumber;
const int LightObject::kPositionZFieldNumber;
const int LightObject::kDirectionXFieldNumber;
const int LightObject::kDirectionYFieldNumber;
const int LightObject::kDirectionZFieldNumber;
const int LightObject::kScaleXFieldNumber;
const int LightObject::kScaleYFieldNumber;
const int LightObject::kScaleZFieldNumber;
const int LightObject::kRotateXFieldNumber;
const int LightObject::kRotateYFieldNumber;
const int LightObject::kRotateZFieldNumber;
const int LightObject::kRotateCenterXFieldNumber;
const int LightObject::kRotateCenterYFieldNumber;
const int LightObject::kRotateCenterZFieldNumber;
const int LightObject::kAmbientFieldNumber;
const int LightObject::kDiffuseFieldNumber;
const int LightObject::kSpecularFieldNumber;
const int LightObject::kLCutOffFieldNumber;
const int LightObject::kLOuterCutOffFieldNumber;
const int LightObject::kLConstantFieldNumber;
const int LightObject::kLLinearFieldNumber;
const int LightObject::kLQuadraticFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightObject::LightObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungAppSettings_2eproto::InitDefaultsLightObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.LightObject)
}
LightObject::LightObject(const LightObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_positionx()) {
    positionx_ = new ::KuplungApp::ObjectCoordinate(*from.positionx_);
  } else {
    positionx_ = NULL;
  }
  if (from.has_positiony()) {
    positiony_ = new ::KuplungApp::ObjectCoordinate(*from.positiony_);
  } else {
    positiony_ = NULL;
  }
  if (from.has_positionz()) {
    positionz_ = new ::KuplungApp::ObjectCoordinate(*from.positionz_);
  } else {
    positionz_ = NULL;
  }
  if (from.has_directionx()) {
    directionx_ = new ::KuplungApp::ObjectCoordinate(*from.directionx_);
  } else {
    directionx_ = NULL;
  }
  if (from.has_directiony()) {
    directiony_ = new ::KuplungApp::ObjectCoordinate(*from.directiony_);
  } else {
    directiony_ = NULL;
  }
  if (from.has_directionz()) {
    directionz_ = new ::KuplungApp::ObjectCoordinate(*from.directionz_);
  } else {
    directionz_ = NULL;
  }
  if (from.has_scalex()) {
    scalex_ = new ::KuplungApp::ObjectCoordinate(*from.scalex_);
  } else {
    scalex_ = NULL;
  }
  if (from.has_scaley()) {
    scaley_ = new ::KuplungApp::ObjectCoordinate(*from.scaley_);
  } else {
    scaley_ = NULL;
  }
  if (from.has_scalez()) {
    scalez_ = new ::KuplungApp::ObjectCoordinate(*from.scalez_);
  } else {
    scalez_ = NULL;
  }
  if (from.has_rotatex()) {
    rotatex_ = new ::KuplungApp::ObjectCoordinate(*from.rotatex_);
  } else {
    rotatex_ = NULL;
  }
  if (from.has_rotatey()) {
    rotatey_ = new ::KuplungApp::ObjectCoordinate(*from.rotatey_);
  } else {
    rotatey_ = NULL;
  }
  if (from.has_rotatez()) {
    rotatez_ = new ::KuplungApp::ObjectCoordinate(*from.rotatez_);
  } else {
    rotatez_ = NULL;
  }
  if (from.has_rotatecenterx()) {
    rotatecenterx_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecenterx_);
  } else {
    rotatecenterx_ = NULL;
  }
  if (from.has_rotatecentery()) {
    rotatecentery_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecentery_);
  } else {
    rotatecentery_ = NULL;
  }
  if (from.has_rotatecenterz()) {
    rotatecenterz_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecenterz_);
  } else {
    rotatecenterz_ = NULL;
  }
  if (from.has_ambient()) {
    ambient_ = new ::KuplungApp::MaterialColor(*from.ambient_);
  } else {
    ambient_ = NULL;
  }
  if (from.has_diffuse()) {
    diffuse_ = new ::KuplungApp::MaterialColor(*from.diffuse_);
  } else {
    diffuse_ = NULL;
  }
  if (from.has_specular()) {
    specular_ = new ::KuplungApp::MaterialColor(*from.specular_);
  } else {
    specular_ = NULL;
  }
  if (from.has_lcutoff()) {
    lcutoff_ = new ::KuplungApp::ObjectCoordinate(*from.lcutoff_);
  } else {
    lcutoff_ = NULL;
  }
  if (from.has_loutercutoff()) {
    loutercutoff_ = new ::KuplungApp::ObjectCoordinate(*from.loutercutoff_);
  } else {
    loutercutoff_ = NULL;
  }
  if (from.has_lconstant()) {
    lconstant_ = new ::KuplungApp::ObjectCoordinate(*from.lconstant_);
  } else {
    lconstant_ = NULL;
  }
  if (from.has_llinear()) {
    llinear_ = new ::KuplungApp::ObjectCoordinate(*from.llinear_);
  } else {
    llinear_ = NULL;
  }
  if (from.has_lquadratic()) {
    lquadratic_ = new ::KuplungApp::ObjectCoordinate(*from.lquadratic_);
  } else {
    lquadratic_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&showinwire_) -
    reinterpret_cast<char*>(&type_)) + sizeof(showinwire_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.LightObject)
}

void LightObject::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&positionx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showinwire_) -
      reinterpret_cast<char*>(&positionx_)) + sizeof(showinwire_));
}

LightObject::~LightObject() {
  // @@protoc_insertion_point(destructor:KuplungApp.LightObject)
  SharedDtor();
}

void LightObject::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete positionx_;
  if (this != internal_default_instance()) delete positiony_;
  if (this != internal_default_instance()) delete positionz_;
  if (this != internal_default_instance()) delete directionx_;
  if (this != internal_default_instance()) delete directiony_;
  if (this != internal_default_instance()) delete directionz_;
  if (this != internal_default_instance()) delete scalex_;
  if (this != internal_default_instance()) delete scaley_;
  if (this != internal_default_instance()) delete scalez_;
  if (this != internal_default_instance()) delete rotatex_;
  if (this != internal_default_instance()) delete rotatey_;
  if (this != internal_default_instance()) delete rotatez_;
  if (this != internal_default_instance()) delete rotatecenterx_;
  if (this != internal_default_instance()) delete rotatecentery_;
  if (this != internal_default_instance()) delete rotatecenterz_;
  if (this != internal_default_instance()) delete ambient_;
  if (this != internal_default_instance()) delete diffuse_;
  if (this != internal_default_instance()) delete specular_;
  if (this != internal_default_instance()) delete lcutoff_;
  if (this != internal_default_instance()) delete loutercutoff_;
  if (this != internal_default_instance()) delete lconstant_;
  if (this != internal_default_instance()) delete llinear_;
  if (this != internal_default_instance()) delete lquadratic_;
}

void LightObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightObject::descriptor() {
  ::protobuf_KuplungAppSettings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungAppSettings_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LightObject& LightObject::default_instance() {
  ::protobuf_KuplungAppSettings_2eproto::InitDefaultsLightObject();
  return *internal_default_instance();
}

LightObject* LightObject::New(::google::protobuf::Arena* arena) const {
  LightObject* n = new LightObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LightObject::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.LightObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(positionx_ != NULL);
      positionx_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(positiony_ != NULL);
      positiony_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(positionz_ != NULL);
      positionz_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(directionx_ != NULL);
      directionx_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(directiony_ != NULL);
      directiony_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(directionz_ != NULL);
      directionz_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(scalex_ != NULL);
      scalex_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(scaley_ != NULL);
      scaley_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(scalez_ != NULL);
      scalez_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(rotatex_ != NULL);
      rotatex_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(rotatey_ != NULL);
      rotatey_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(rotatez_ != NULL);
      rotatez_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(rotatecenterx_ != NULL);
      rotatecenterx_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(rotatecentery_ != NULL);
      rotatecentery_->Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(rotatecenterz_ != NULL);
      rotatecenterz_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(ambient_ != NULL);
      ambient_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(diffuse_ != NULL);
      diffuse_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(specular_ != NULL);
      specular_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(lcutoff_ != NULL);
      lcutoff_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(loutercutoff_ != NULL);
      loutercutoff_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(lconstant_ != NULL);
      lconstant_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(llinear_ != NULL);
      llinear_->Clear();
    }
  }
  if (cached_has_bits & 0x01000000u) {
    GOOGLE_DCHECK(lquadratic_ != NULL);
    lquadratic_->Clear();
  }
  if (cached_has_bits & 503316480u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&showinwire_) -
        reinterpret_cast<char*>(&type_)) + sizeof(showinwire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LightObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.LightObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.LightObject.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.LightObject.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool showLampObject = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_showlampobject();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showlampobject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool showLampDirection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_showlampdirection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showlampdirection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool showInWire = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_showinwire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showinwire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionX = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_positionx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionY = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_positiony()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionZ = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_positionz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate directionX = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_directionx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate directionY = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_directiony()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate directionZ = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_directionz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleX = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scalex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleY = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scaley()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleZ = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scalez()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateX = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateY = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateZ = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatez()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatecenterx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatecentery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotatecenterz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MaterialColor ambient = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ambient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MaterialColor diffuse = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_diffuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MaterialColor specular = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_specular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate lCutOff = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lcutoff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_loutercutoff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate lConstant = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lconstant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate lLinear = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_llinear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.ObjectCoordinate lQuadratic = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lquadratic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.LightObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.LightObject)
  return false;
#undef DO_
}

void LightObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.LightObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.LightObject.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.LightObject.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required bool showLampObject = 4;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->showlampobject(), output);
  }

  // required bool showLampDirection = 5;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->showlampdirection(), output);
  }

  // required bool showInWire = 6;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->showinwire(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->positionx_, output);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->positiony_, output);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->positionz_, output);
  }

  // required .KuplungApp.ObjectCoordinate directionX = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->directionx_, output);
  }

  // required .KuplungApp.ObjectCoordinate directionY = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->directiony_, output);
  }

  // required .KuplungApp.ObjectCoordinate directionZ = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->directionz_, output);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->scalex_, output);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->scaley_, output);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->scalez_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->rotatex_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->rotatey_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->rotatez_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->rotatecenterx_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->rotatecentery_, output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->rotatecenterz_, output);
  }

  // required .KuplungApp.MaterialColor ambient = 22;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->ambient_, output);
  }

  // required .KuplungApp.MaterialColor diffuse = 23;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->diffuse_, output);
  }

  // required .KuplungApp.MaterialColor specular = 24;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->specular_, output);
  }

  // required .KuplungApp.ObjectCoordinate lCutOff = 25;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->lcutoff_, output);
  }

  // required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->loutercutoff_, output);
  }

  // required .KuplungApp.ObjectCoordinate lConstant = 27;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->lconstant_, output);
  }

  // required .KuplungApp.ObjectCoordinate lLinear = 28;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->llinear_, output);
  }

  // required .KuplungApp.ObjectCoordinate lQuadratic = 29;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->lquadratic_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.LightObject)
}

::google::protobuf::uint8* LightObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.LightObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.LightObject.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.LightObject.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required bool showLampObject = 4;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->showlampobject(), target);
  }

  // required bool showLampDirection = 5;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->showlampdirection(), target);
  }

  // required bool showInWire = 6;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->showinwire(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->positionx_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->positiony_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->positionz_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate directionX = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->directionx_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate directionY = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->directiony_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate directionZ = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->directionz_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *this->scalex_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->scaley_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *this->scalez_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->rotatex_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, *this->rotatey_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, *this->rotatez_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, *this->rotatecenterx_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->rotatecentery_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, *this->rotatecenterz_, deterministic, target);
  }

  // required .KuplungApp.MaterialColor ambient = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, *this->ambient_, deterministic, target);
  }

  // required .KuplungApp.MaterialColor diffuse = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, *this->diffuse_, deterministic, target);
  }

  // required .KuplungApp.MaterialColor specular = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, *this->specular_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate lCutOff = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, *this->lcutoff_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, *this->loutercutoff_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate lConstant = 27;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, *this->lconstant_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate lLinear = 28;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, *this->llinear_, deterministic, target);
  }

  // required .KuplungApp.ObjectCoordinate lQuadratic = 29;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, *this->lquadratic_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.LightObject)
  return target;
}

size_t LightObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.LightObject)
  size_t total_size = 0;

  if (has_title()) {
    // required string title = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_description()) {
    // required string description = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (has_positionx()) {
    // required .KuplungApp.ObjectCoordinate positionX = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionx_);
  }

  if (has_positiony()) {
    // required .KuplungApp.ObjectCoordinate positionY = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positiony_);
  }

  if (has_positionz()) {
    // required .KuplungApp.ObjectCoordinate positionZ = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionz_);
  }

  if (has_directionx()) {
    // required .KuplungApp.ObjectCoordinate directionX = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->directionx_);
  }

  if (has_directiony()) {
    // required .KuplungApp.ObjectCoordinate directionY = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->directiony_);
  }

  if (has_directionz()) {
    // required .KuplungApp.ObjectCoordinate directionZ = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->directionz_);
  }

  if (has_scalex()) {
    // required .KuplungApp.ObjectCoordinate scaleX = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scalex_);
  }

  if (has_scaley()) {
    // required .KuplungApp.ObjectCoordinate scaleY = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scaley_);
  }

  if (has_scalez()) {
    // required .KuplungApp.ObjectCoordinate scaleZ = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scalez_);
  }

  if (has_rotatex()) {
    // required .KuplungApp.ObjectCoordinate rotateX = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatex_);
  }

  if (has_rotatey()) {
    // required .KuplungApp.ObjectCoordinate rotateY = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatey_);
  }

  if (has_rotatez()) {
    // required .KuplungApp.ObjectCoordinate rotateZ = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatez_);
  }

  if (has_rotatecenterx()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecenterx_);
  }

  if (has_rotatecentery()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecentery_);
  }

  if (has_rotatecenterz()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecenterz_);
  }

  if (has_ambient()) {
    // required .KuplungApp.MaterialColor ambient = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ambient_);
  }

  if (has_diffuse()) {
    // required .KuplungApp.MaterialColor diffuse = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->diffuse_);
  }

  if (has_specular()) {
    // required .KuplungApp.MaterialColor specular = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->specular_);
  }

  if (has_lcutoff()) {
    // required .KuplungApp.ObjectCoordinate lCutOff = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lcutoff_);
  }

  if (has_loutercutoff()) {
    // required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->loutercutoff_);
  }

  if (has_lconstant()) {
    // required .KuplungApp.ObjectCoordinate lConstant = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lconstant_);
  }

  if (has_llinear()) {
    // required .KuplungApp.ObjectCoordinate lLinear = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->llinear_);
  }

  if (has_lquadratic()) {
    // required .KuplungApp.ObjectCoordinate lQuadratic = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lquadratic_);
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_showlampobject()) {
    // required bool showLampObject = 4;
    total_size += 1 + 1;
  }

  if (has_showlampdirection()) {
    // required bool showLampDirection = 5;
    total_size += 1 + 1;
  }

  if (has_showinwire()) {
    // required bool showInWire = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LightObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.LightObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x1fffffff) ^ 0x1fffffff) == 0) {  // All required fields are present.
    // required string title = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string description = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

    // required .KuplungApp.ObjectCoordinate positionX = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionx_);

    // required .KuplungApp.ObjectCoordinate positionY = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positiony_);

    // required .KuplungApp.ObjectCoordinate positionZ = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->positionz_);

    // required .KuplungApp.ObjectCoordinate directionX = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->directionx_);

    // required .KuplungApp.ObjectCoordinate directionY = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->directiony_);

    // required .KuplungApp.ObjectCoordinate directionZ = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->directionz_);

    // required .KuplungApp.ObjectCoordinate scaleX = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scalex_);

    // required .KuplungApp.ObjectCoordinate scaleY = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scaley_);

    // required .KuplungApp.ObjectCoordinate scaleZ = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scalez_);

    // required .KuplungApp.ObjectCoordinate rotateX = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatex_);

    // required .KuplungApp.ObjectCoordinate rotateY = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatey_);

    // required .KuplungApp.ObjectCoordinate rotateZ = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatez_);

    // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecenterx_);

    // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecentery_);

    // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotatecenterz_);

    // required .KuplungApp.MaterialColor ambient = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ambient_);

    // required .KuplungApp.MaterialColor diffuse = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->diffuse_);

    // required .KuplungApp.MaterialColor specular = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->specular_);

    // required .KuplungApp.ObjectCoordinate lCutOff = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lcutoff_);

    // required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->loutercutoff_);

    // required .KuplungApp.ObjectCoordinate lConstant = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lconstant_);

    // required .KuplungApp.ObjectCoordinate lLinear = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->llinear_);

    // required .KuplungApp.ObjectCoordinate lQuadratic = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lquadratic_);

    // required int32 type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required bool showLampObject = 4;
    total_size += 1 + 1;

    // required bool showLampDirection = 5;
    total_size += 1 + 1;

    // required bool showInWire = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.LightObject)
  GOOGLE_DCHECK_NE(&from, this);
  const LightObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LightObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.LightObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.LightObject)
    MergeFrom(*source);
  }
}

void LightObject::MergeFrom(const LightObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.LightObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_positionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionx());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_positiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positiony());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_positionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionz());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_directionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.directionx());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_directiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from.directiony());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_directionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.directionz());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_scalex()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scalex());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_scaley()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scaley());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_scalez()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scalez());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_rotatex()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatex());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_rotatey()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatey());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_rotatez()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatez());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_rotatecenterx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecenterx());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_rotatecentery()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecentery());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_rotatecenterz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecenterz());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_ambient()->::KuplungApp::MaterialColor::MergeFrom(from.ambient());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_diffuse()->::KuplungApp::MaterialColor::MergeFrom(from.diffuse());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_specular()->::KuplungApp::MaterialColor::MergeFrom(from.specular());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_lcutoff()->::KuplungApp::ObjectCoordinate::MergeFrom(from.lcutoff());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_loutercutoff()->::KuplungApp::ObjectCoordinate::MergeFrom(from.loutercutoff());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_lconstant()->::KuplungApp::ObjectCoordinate::MergeFrom(from.lconstant());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_llinear()->::KuplungApp::ObjectCoordinate::MergeFrom(from.llinear());
    }
  }
  if (cached_has_bits & 520093696u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_lquadratic()->::KuplungApp::ObjectCoordinate::MergeFrom(from.lquadratic());
    }
    if (cached_has_bits & 0x02000000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x04000000u) {
      showlampobject_ = from.showlampobject_;
    }
    if (cached_has_bits & 0x08000000u) {
      showlampdirection_ = from.showlampdirection_;
    }
    if (cached_has_bits & 0x10000000u) {
      showinwire_ = from.showinwire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LightObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.LightObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightObject::CopyFrom(const LightObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.LightObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x1fffffff) != 0x1fffffff) return false;
  if (has_positionx()) {
    if (!this->positionx_->IsInitialized()) return false;
  }
  if (has_positiony()) {
    if (!this->positiony_->IsInitialized()) return false;
  }
  if (has_positionz()) {
    if (!this->positionz_->IsInitialized()) return false;
  }
  if (has_directionx()) {
    if (!this->directionx_->IsInitialized()) return false;
  }
  if (has_directiony()) {
    if (!this->directiony_->IsInitialized()) return false;
  }
  if (has_directionz()) {
    if (!this->directionz_->IsInitialized()) return false;
  }
  if (has_scalex()) {
    if (!this->scalex_->IsInitialized()) return false;
  }
  if (has_scaley()) {
    if (!this->scaley_->IsInitialized()) return false;
  }
  if (has_scalez()) {
    if (!this->scalez_->IsInitialized()) return false;
  }
  if (has_rotatex()) {
    if (!this->rotatex_->IsInitialized()) return false;
  }
  if (has_rotatey()) {
    if (!this->rotatey_->IsInitialized()) return false;
  }
  if (has_rotatez()) {
    if (!this->rotatez_->IsInitialized()) return false;
  }
  if (has_rotatecenterx()) {
    if (!this->rotatecenterx_->IsInitialized()) return false;
  }
  if (has_rotatecentery()) {
    if (!this->rotatecentery_->IsInitialized()) return false;
  }
  if (has_rotatecenterz()) {
    if (!this->rotatecenterz_->IsInitialized()) return false;
  }
  if (has_ambient()) {
    if (!this->ambient_->IsInitialized()) return false;
  }
  if (has_diffuse()) {
    if (!this->diffuse_->IsInitialized()) return false;
  }
  if (has_specular()) {
    if (!this->specular_->IsInitialized()) return false;
  }
  if (has_lcutoff()) {
    if (!this->lcutoff_->IsInitialized()) return false;
  }
  if (has_loutercutoff()) {
    if (!this->loutercutoff_->IsInitialized()) return false;
  }
  if (has_lconstant()) {
    if (!this->lconstant_->IsInitialized()) return false;
  }
  if (has_llinear()) {
    if (!this->llinear_->IsInitialized()) return false;
  }
  if (has_lquadratic()) {
    if (!this->lquadratic_->IsInitialized()) return false;
  }
  return true;
}

void LightObject::Swap(LightObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightObject::InternalSwap(LightObject* other) {
  using std::swap;
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  swap(positionx_, other->positionx_);
  swap(positiony_, other->positiony_);
  swap(positionz_, other->positionz_);
  swap(directionx_, other->directionx_);
  swap(directiony_, other->directiony_);
  swap(directionz_, other->directionz_);
  swap(scalex_, other->scalex_);
  swap(scaley_, other->scaley_);
  swap(scalez_, other->scalez_);
  swap(rotatex_, other->rotatex_);
  swap(rotatey_, other->rotatey_);
  swap(rotatez_, other->rotatez_);
  swap(rotatecenterx_, other->rotatecenterx_);
  swap(rotatecentery_, other->rotatecentery_);
  swap(rotatecenterz_, other->rotatecenterz_);
  swap(ambient_, other->ambient_);
  swap(diffuse_, other->diffuse_);
  swap(specular_, other->specular_);
  swap(lcutoff_, other->lcutoff_);
  swap(loutercutoff_, other->loutercutoff_);
  swap(lconstant_, other->lconstant_);
  swap(llinear_, other->llinear_);
  swap(lquadratic_, other->lquadratic_);
  swap(type_, other->type_);
  swap(showlampobject_, other->showlampobject_);
  swap(showlampdirection_, other->showlampdirection_);
  swap(showinwire_, other->showinwire_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LightObject::GetMetadata() const {
  protobuf_KuplungAppSettings_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungAppSettings_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KuplungApp

// @@protoc_insertion_point(global_scope)
