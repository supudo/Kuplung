// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungAppSettings.proto

#include "KuplungAppSettings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_KuplungAppSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraSettings_KuplungAppSettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungAppSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GridSettings_KuplungAppSettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungAppSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LightObject_KuplungAppSettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MaterialColor_KuplungDefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectCoordinate_KuplungDefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_KuplungDefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec4_KuplungDefinitions_2eproto;
namespace KuplungApp {
class GUISettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GUISettings> _instance;
} _GUISettings_default_instance_;
class CameraSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraSettings> _instance;
} _CameraSettings_default_instance_;
class GridSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GridSettings> _instance;
} _GridSettings_default_instance_;
class LightObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightObject> _instance;
} _LightObject_default_instance_;
}  // namespace KuplungApp
static void InitDefaultsscc_info_CameraSettings_KuplungAppSettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_CameraSettings_default_instance_;
    new (ptr) ::KuplungApp::CameraSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::CameraSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraSettings_KuplungAppSettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CameraSettings_KuplungAppSettings_2eproto}, {
      &scc_info_Vec3_KuplungDefinitions_2eproto.base,
      &scc_info_ObjectCoordinate_KuplungDefinitions_2eproto.base,}};

static void InitDefaultsscc_info_GUISettings_KuplungAppSettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_GUISettings_default_instance_;
    new (ptr) ::KuplungApp::GUISettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::GUISettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GUISettings_KuplungAppSettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_GUISettings_KuplungAppSettings_2eproto}, {
      &scc_info_Vec4_KuplungDefinitions_2eproto.base,
      &scc_info_Vec3_KuplungDefinitions_2eproto.base,
      &scc_info_CameraSettings_KuplungAppSettings_2eproto.base,
      &scc_info_GridSettings_KuplungAppSettings_2eproto.base,
      &scc_info_LightObject_KuplungAppSettings_2eproto.base,}};

static void InitDefaultsscc_info_GridSettings_KuplungAppSettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_GridSettings_default_instance_;
    new (ptr) ::KuplungApp::GridSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::GridSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GridSettings_KuplungAppSettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GridSettings_KuplungAppSettings_2eproto}, {
      &scc_info_ObjectCoordinate_KuplungDefinitions_2eproto.base,}};

static void InitDefaultsscc_info_LightObject_KuplungAppSettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_LightObject_default_instance_;
    new (ptr) ::KuplungApp::LightObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::LightObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LightObject_KuplungAppSettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LightObject_KuplungAppSettings_2eproto}, {
      &scc_info_ObjectCoordinate_KuplungDefinitions_2eproto.base,
      &scc_info_MaterialColor_KuplungDefinitions_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_KuplungAppSettings_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_KuplungAppSettings_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_KuplungAppSettings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_KuplungAppSettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_fov_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_outlinethickness_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_ratiowidth_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_ratioheight_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_planeclose_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_planefar_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_gridsize_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_skybox_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_outlinecolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_uiambientlight_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_fixedgridworld_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_outlinecolorpickeropen_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_showaxishelpers_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, settings_showzaxis_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_deferredtestmode_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_deferredtestlights_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_lightingpass_drawmode_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_deferredtestlightsnumber_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_deferredambientstrength_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, viewmodelskin_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_direction_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_materialcolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_ambient_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_diffuse_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_specular_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_ambient_strength_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_diffuse_strength_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_specular_strength_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_materialcolor_colorpicker_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_ambient_colorpicker_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_diffuse_colorpicker_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, solidlight_specular_colorpicker_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_showterrain_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_terrainmodel_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_terrainanimatex_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_terrainanimatey_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, heightmapimage_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_terrainwidth_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_terrainheight_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_showspaceship_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, setting_generatespaceship_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, camera_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, grid_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GUISettings, lights_),
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  1,
  2,
  18,
  19,
  20,
  21,
  26,
  27,
  22,
  23,
  24,
  25,
  3,
  4,
  5,
  6,
  7,
  30,
  31,
  32,
  28,
  29,
  33,
  34,
  35,
  36,
  38,
  39,
  0,
  37,
  42,
  40,
  41,
  8,
  9,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, cameraposition_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, view_eye_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, view_center_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, view_up_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, positionx_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, positiony_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, positionz_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatex_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatey_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatez_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatecenterx_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatecentery_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::CameraSettings, rotatecenterz_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, actasmirror_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, gridsize_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, positionx_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, positiony_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, positionz_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, rotatex_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, rotatey_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, rotatez_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, scalex_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, scaley_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, scalez_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, transparency_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::GridSettings, showgrid_),
  9,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, title_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, description_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, type_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, showlampobject_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, showlampdirection_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, showinwire_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, positionx_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, positiony_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, positionz_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, directionx_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, directiony_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, directionz_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, scalex_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, scaley_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, scalez_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, rotatex_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, rotatey_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, rotatez_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, rotatecenterx_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, rotatecentery_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, rotatecenterz_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, ambient_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, diffuse_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, specular_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, lcutoff_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, loutercutoff_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, lconstant_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, llinear_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::LightObject, lquadratic_),
  0,
  1,
  25,
  26,
  27,
  28,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 49, sizeof(::KuplungApp::GUISettings)},
  { 93, 111, sizeof(::KuplungApp::CameraSettings)},
  { 124, 142, sizeof(::KuplungApp::GridSettings)},
  { 155, 189, sizeof(::KuplungApp::LightObject)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_GUISettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_CameraSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_GridSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_LightObject_default_instance_),
};

const char descriptor_table_protodef_KuplungAppSettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030KuplungAppSettings.proto\022\nKuplungApp\032\030"
  "KuplungDefinitions.proto\"\272\014\n\013GUISettings"
  "\022\023\n\013Setting_FOV\030\001 \002(\002\022 \n\030Setting_Outline"
  "Thickness\030\002 \002(\002\022\032\n\022Setting_RatioWidth\030\003 "
  "\002(\002\022\033\n\023Setting_RatioHeight\030\004 \002(\002\022\032\n\022Sett"
  "ing_PlaneClose\030\005 \002(\002\022\030\n\020Setting_PlaneFar"
  "\030\006 \002(\002\022\030\n\020Setting_GridSize\030\007 \002(\005\022\026\n\016Sett"
  "ing_Skybox\030\010 \002(\005\022.\n\024Setting_OutlineColor"
  "\030\t \002(\0132\020.KuplungApp.Vec4\0220\n\026Setting_UIAm"
  "bientLight\030\n \002(\0132\020.KuplungApp.Vec3\022\036\n\026Se"
  "tting_FixedGridWorld\030\013 \002(\010\022&\n\036Setting_Ou"
  "tlineColorPickerOpen\030\014 \002(\010\022\037\n\027Setting_Sh"
  "owAxisHelpers\030\r \002(\010\022\032\n\022Settings_ShowZAxi"
  "s\030\016 \002(\010\022 \n\030Setting_DeferredTestMode\030\017 \002("
  "\010\022\"\n\032Setting_DeferredTestLights\030\020 \002(\010\022%\n"
  "\035Setting_LightingPass_DrawMode\030\021 \002(\005\022(\n "
  "Setting_DeferredTestLightsNumber\030\022 \002(\005\022\'"
  "\n\037Setting_DeferredAmbientStrength\030\023 \002(\002\022"
  "\025\n\rviewModelSkin\030\024 \002(\005\022.\n\024SolidLight_Dir"
  "ection\030\025 \002(\0132\020.KuplungApp.Vec3\0222\n\030SolidL"
  "ight_MaterialColor\030\026 \002(\0132\020.KuplungApp.Ve"
  "c3\022,\n\022SolidLight_Ambient\030\027 \002(\0132\020.Kuplung"
  "App.Vec3\022,\n\022SolidLight_Diffuse\030\030 \002(\0132\020.K"
  "uplungApp.Vec3\022-\n\023SolidLight_Specular\030\031 "
  "\002(\0132\020.KuplungApp.Vec3\022#\n\033SolidLight_Ambi"
  "ent_Strength\030\032 \002(\002\022#\n\033SolidLight_Diffuse"
  "_Strength\030\033 \002(\002\022$\n\034SolidLight_Specular_S"
  "trength\030\034 \002(\002\022,\n$SolidLight_MaterialColo"
  "r_ColorPicker\030\035 \002(\010\022&\n\036SolidLight_Ambien"
  "t_ColorPicker\030\036 \002(\010\022&\n\036SolidLight_Diffus"
  "e_ColorPicker\030\037 \002(\010\022\'\n\037SolidLight_Specul"
  "ar_ColorPicker\030  \002(\010\022\033\n\023Setting_ShowTerr"
  "ain\030! \002(\010\022\034\n\024Setting_TerrainModel\030\" \002(\010\022"
  "\037\n\027Setting_TerrainAnimateX\030# \002(\010\022\037\n\027Sett"
  "ing_TerrainAnimateY\030$ \002(\010\022\026\n\016heightmapIm"
  "age\030% \002(\t\022\034\n\024Setting_TerrainWidth\030& \002(\005\022"
  "\035\n\025Setting_TerrainHeight\030\' \002(\005\022\035\n\025Settin"
  "g_ShowSpaceship\030( \002(\010\022!\n\031Setting_Generat"
  "eSpaceship\030) \002(\010\022*\n\006camera\030* \002(\0132\032.Kuplu"
  "ngApp.CameraSettings\022&\n\004grid\030+ \002(\0132\030.Kup"
  "lungApp.GridSettings\022\'\n\006lights\030, \003(\0132\027.K"
  "uplungApp.LightObject\"\347\004\n\016CameraSettings"
  "\022(\n\016cameraPosition\030\001 \002(\0132\020.KuplungApp.Ve"
  "c3\022\"\n\010View_Eye\030\002 \002(\0132\020.KuplungApp.Vec3\022%"
  "\n\013View_Center\030\003 \002(\0132\020.KuplungApp.Vec3\022!\n"
  "\007View_Up\030\004 \002(\0132\020.KuplungApp.Vec3\022/\n\tposi"
  "tionX\030\005 \002(\0132\034.KuplungApp.ObjectCoordinat"
  "e\022/\n\tpositionY\030\006 \002(\0132\034.KuplungApp.Object"
  "Coordinate\022/\n\tpositionZ\030\007 \002(\0132\034.KuplungA"
  "pp.ObjectCoordinate\022-\n\007rotateX\030\010 \002(\0132\034.K"
  "uplungApp.ObjectCoordinate\022-\n\007rotateY\030\t "
  "\002(\0132\034.KuplungApp.ObjectCoordinate\022-\n\007rot"
  "ateZ\030\n \002(\0132\034.KuplungApp.ObjectCoordinate"
  "\0223\n\rrotateCenterX\030\013 \002(\0132\034.KuplungApp.Obj"
  "ectCoordinate\0223\n\rrotateCenterY\030\014 \002(\0132\034.K"
  "uplungApp.ObjectCoordinate\0223\n\rrotateCent"
  "erZ\030\r \002(\0132\034.KuplungApp.ObjectCoordinate\""
  "\207\004\n\014GridSettings\022\023\n\013actAsMirror\030\001 \002(\010\022\020\n"
  "\010gridSize\030\002 \002(\005\022/\n\tpositionX\030\003 \002(\0132\034.Kup"
  "lungApp.ObjectCoordinate\022/\n\tpositionY\030\004 "
  "\002(\0132\034.KuplungApp.ObjectCoordinate\022/\n\tpos"
  "itionZ\030\005 \002(\0132\034.KuplungApp.ObjectCoordina"
  "te\022-\n\007rotateX\030\006 \002(\0132\034.KuplungApp.ObjectC"
  "oordinate\022-\n\007rotateY\030\007 \002(\0132\034.KuplungApp."
  "ObjectCoordinate\022-\n\007rotateZ\030\010 \002(\0132\034.Kupl"
  "ungApp.ObjectCoordinate\022,\n\006scaleX\030\t \002(\0132"
  "\034.KuplungApp.ObjectCoordinate\022,\n\006scaleY\030"
  "\n \002(\0132\034.KuplungApp.ObjectCoordinate\022,\n\006s"
  "caleZ\030\013 \002(\0132\034.KuplungApp.ObjectCoordinat"
  "e\022\024\n\014transparency\030\014 \002(\002\022\020\n\010showGrid\030\r \002("
  "\005\"\337\t\n\013LightObject\022\r\n\005title\030\001 \002(\t\022\023\n\013desc"
  "ription\030\002 \002(\t\022\014\n\004type\030\003 \002(\005\022\026\n\016showLampO"
  "bject\030\004 \002(\010\022\031\n\021showLampDirection\030\005 \002(\010\022\022"
  "\n\nshowInWire\030\006 \002(\010\022/\n\tpositionX\030\007 \002(\0132\034."
  "KuplungApp.ObjectCoordinate\022/\n\tpositionY"
  "\030\010 \002(\0132\034.KuplungApp.ObjectCoordinate\022/\n\t"
  "positionZ\030\t \002(\0132\034.KuplungApp.ObjectCoord"
  "inate\0220\n\ndirectionX\030\n \002(\0132\034.KuplungApp.O"
  "bjectCoordinate\0220\n\ndirectionY\030\013 \002(\0132\034.Ku"
  "plungApp.ObjectCoordinate\0220\n\ndirectionZ\030"
  "\014 \002(\0132\034.KuplungApp.ObjectCoordinate\022,\n\006s"
  "caleX\030\r \002(\0132\034.KuplungApp.ObjectCoordinat"
  "e\022,\n\006scaleY\030\016 \002(\0132\034.KuplungApp.ObjectCoo"
  "rdinate\022,\n\006scaleZ\030\017 \002(\0132\034.KuplungApp.Obj"
  "ectCoordinate\022-\n\007rotateX\030\020 \002(\0132\034.Kuplung"
  "App.ObjectCoordinate\022-\n\007rotateY\030\021 \002(\0132\034."
  "KuplungApp.ObjectCoordinate\022-\n\007rotateZ\030\022"
  " \002(\0132\034.KuplungApp.ObjectCoordinate\0223\n\rro"
  "tateCenterX\030\023 \002(\0132\034.KuplungApp.ObjectCoo"
  "rdinate\0223\n\rrotateCenterY\030\024 \002(\0132\034.Kuplung"
  "App.ObjectCoordinate\0223\n\rrotateCenterZ\030\025 "
  "\002(\0132\034.KuplungApp.ObjectCoordinate\022*\n\007amb"
  "ient\030\026 \002(\0132\031.KuplungApp.MaterialColor\022*\n"
  "\007diffuse\030\027 \002(\0132\031.KuplungApp.MaterialColo"
  "r\022+\n\010specular\030\030 \002(\0132\031.KuplungApp.Materia"
  "lColor\022-\n\007lCutOff\030\031 \002(\0132\034.KuplungApp.Obj"
  "ectCoordinate\0222\n\014lOuterCutOff\030\032 \002(\0132\034.Ku"
  "plungApp.ObjectCoordinate\022/\n\tlConstant\030\033"
  " \002(\0132\034.KuplungApp.ObjectCoordinate\022-\n\007lL"
  "inear\030\034 \002(\0132\034.KuplungApp.ObjectCoordinat"
  "e\0220\n\nlQuadratic\030\035 \002(\0132\034.KuplungApp.Objec"
  "tCoordinate"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_KuplungAppSettings_2eproto_deps[1] = {
  &::descriptor_table_KuplungDefinitions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_KuplungAppSettings_2eproto_sccs[4] = {
  &scc_info_CameraSettings_KuplungAppSettings_2eproto.base,
  &scc_info_GUISettings_KuplungAppSettings_2eproto.base,
  &scc_info_GridSettings_KuplungAppSettings_2eproto.base,
  &scc_info_LightObject_KuplungAppSettings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_KuplungAppSettings_2eproto_once;
static bool descriptor_table_KuplungAppSettings_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KuplungAppSettings_2eproto = {
  &descriptor_table_KuplungAppSettings_2eproto_initialized, descriptor_table_protodef_KuplungAppSettings_2eproto, "KuplungAppSettings.proto", 4051,
  &descriptor_table_KuplungAppSettings_2eproto_once, descriptor_table_KuplungAppSettings_2eproto_sccs, descriptor_table_KuplungAppSettings_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_KuplungAppSettings_2eproto::offsets,
  file_level_metadata_KuplungAppSettings_2eproto, 4, file_level_enum_descriptors_KuplungAppSettings_2eproto, file_level_service_descriptors_KuplungAppSettings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_KuplungAppSettings_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_KuplungAppSettings_2eproto), true);
namespace KuplungApp {

// ===================================================================

void GUISettings::InitAsDefaultInstance() {
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->setting_outlinecolor_ = const_cast< ::KuplungApp::Vec4*>(
      ::KuplungApp::Vec4::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->setting_uiambientlight_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->solidlight_direction_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->solidlight_materialcolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->solidlight_ambient_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->solidlight_diffuse_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->solidlight_specular_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->camera_ = const_cast< ::KuplungApp::CameraSettings*>(
      ::KuplungApp::CameraSettings::internal_default_instance());
  ::KuplungApp::_GUISettings_default_instance_._instance.get_mutable()->grid_ = const_cast< ::KuplungApp::GridSettings*>(
      ::KuplungApp::GridSettings::internal_default_instance());
}
class GUISettings::_Internal {
 public:
  using HasBits = decltype(std::declval<GUISettings>()._has_bits_);
  static void set_has_setting_fov(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_setting_outlinethickness(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_setting_ratiowidth(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_setting_ratioheight(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_setting_planeclose(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_setting_planefar(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_setting_gridsize(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_setting_skybox(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::KuplungApp::Vec4& setting_outlinecolor(const GUISettings* msg);
  static void set_has_setting_outlinecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KuplungApp::Vec3& setting_uiambientlight(const GUISettings* msg);
  static void set_has_setting_uiambientlight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_setting_fixedgridworld(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_setting_outlinecolorpickeropen(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_setting_showaxishelpers(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_settings_showzaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_setting_deferredtestmode(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_setting_deferredtestlights(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_setting_lightingpass_drawmode(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_setting_deferredtestlightsnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_setting_deferredambientstrength(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_viewmodelskin(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::KuplungApp::Vec3& solidlight_direction(const GUISettings* msg);
  static void set_has_solidlight_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KuplungApp::Vec3& solidlight_materialcolor(const GUISettings* msg);
  static void set_has_solidlight_materialcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KuplungApp::Vec3& solidlight_ambient(const GUISettings* msg);
  static void set_has_solidlight_ambient(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KuplungApp::Vec3& solidlight_diffuse(const GUISettings* msg);
  static void set_has_solidlight_diffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::KuplungApp::Vec3& solidlight_specular(const GUISettings* msg);
  static void set_has_solidlight_specular(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_solidlight_ambient_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_solidlight_diffuse_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_solidlight_specular_strength(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_solidlight_materialcolor_colorpicker(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_solidlight_ambient_colorpicker(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_solidlight_diffuse_colorpicker(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_solidlight_specular_colorpicker(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_setting_showterrain(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_setting_terrainmodel(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_setting_terrainanimatex(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_setting_terrainanimatey(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_heightmapimage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_setting_terrainwidth(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_setting_terrainheight(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_setting_showspaceship(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_setting_generatespaceship(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::KuplungApp::CameraSettings& camera(const GUISettings* msg);
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KuplungApp::GridSettings& grid(const GUISettings* msg);
  static void set_has_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::KuplungApp::Vec4&
GUISettings::_Internal::setting_outlinecolor(const GUISettings* msg) {
  return *msg->setting_outlinecolor_;
}
const ::KuplungApp::Vec3&
GUISettings::_Internal::setting_uiambientlight(const GUISettings* msg) {
  return *msg->setting_uiambientlight_;
}
const ::KuplungApp::Vec3&
GUISettings::_Internal::solidlight_direction(const GUISettings* msg) {
  return *msg->solidlight_direction_;
}
const ::KuplungApp::Vec3&
GUISettings::_Internal::solidlight_materialcolor(const GUISettings* msg) {
  return *msg->solidlight_materialcolor_;
}
const ::KuplungApp::Vec3&
GUISettings::_Internal::solidlight_ambient(const GUISettings* msg) {
  return *msg->solidlight_ambient_;
}
const ::KuplungApp::Vec3&
GUISettings::_Internal::solidlight_diffuse(const GUISettings* msg) {
  return *msg->solidlight_diffuse_;
}
const ::KuplungApp::Vec3&
GUISettings::_Internal::solidlight_specular(const GUISettings* msg) {
  return *msg->solidlight_specular_;
}
const ::KuplungApp::CameraSettings&
GUISettings::_Internal::camera(const GUISettings* msg) {
  return *msg->camera_;
}
const ::KuplungApp::GridSettings&
GUISettings::_Internal::grid(const GUISettings* msg) {
  return *msg->grid_;
}
void GUISettings::clear_setting_outlinecolor() {
  if (setting_outlinecolor_ != nullptr) setting_outlinecolor_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GUISettings::clear_setting_uiambientlight() {
  if (setting_uiambientlight_ != nullptr) setting_uiambientlight_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GUISettings::clear_solidlight_direction() {
  if (solidlight_direction_ != nullptr) solidlight_direction_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GUISettings::clear_solidlight_materialcolor() {
  if (solidlight_materialcolor_ != nullptr) solidlight_materialcolor_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GUISettings::clear_solidlight_ambient() {
  if (solidlight_ambient_ != nullptr) solidlight_ambient_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GUISettings::clear_solidlight_diffuse() {
  if (solidlight_diffuse_ != nullptr) solidlight_diffuse_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GUISettings::clear_solidlight_specular() {
  if (solidlight_specular_ != nullptr) solidlight_specular_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
GUISettings::GUISettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.GUISettings)
}
GUISettings::GUISettings(const GUISettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lights_(from.lights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  heightmapimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_heightmapimage()) {
    heightmapimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.heightmapimage_);
  }
  if (from._internal_has_setting_outlinecolor()) {
    setting_outlinecolor_ = new ::KuplungApp::Vec4(*from.setting_outlinecolor_);
  } else {
    setting_outlinecolor_ = nullptr;
  }
  if (from._internal_has_setting_uiambientlight()) {
    setting_uiambientlight_ = new ::KuplungApp::Vec3(*from.setting_uiambientlight_);
  } else {
    setting_uiambientlight_ = nullptr;
  }
  if (from._internal_has_solidlight_direction()) {
    solidlight_direction_ = new ::KuplungApp::Vec3(*from.solidlight_direction_);
  } else {
    solidlight_direction_ = nullptr;
  }
  if (from._internal_has_solidlight_materialcolor()) {
    solidlight_materialcolor_ = new ::KuplungApp::Vec3(*from.solidlight_materialcolor_);
  } else {
    solidlight_materialcolor_ = nullptr;
  }
  if (from._internal_has_solidlight_ambient()) {
    solidlight_ambient_ = new ::KuplungApp::Vec3(*from.solidlight_ambient_);
  } else {
    solidlight_ambient_ = nullptr;
  }
  if (from._internal_has_solidlight_diffuse()) {
    solidlight_diffuse_ = new ::KuplungApp::Vec3(*from.solidlight_diffuse_);
  } else {
    solidlight_diffuse_ = nullptr;
  }
  if (from._internal_has_solidlight_specular()) {
    solidlight_specular_ = new ::KuplungApp::Vec3(*from.solidlight_specular_);
  } else {
    solidlight_specular_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::KuplungApp::CameraSettings(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  if (from._internal_has_grid()) {
    grid_ = new ::KuplungApp::GridSettings(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  ::memcpy(&setting_fov_, &from.setting_fov_,
    static_cast<size_t>(reinterpret_cast<char*>(&setting_terrainheight_) -
    reinterpret_cast<char*>(&setting_fov_)) + sizeof(setting_terrainheight_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.GUISettings)
}

void GUISettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GUISettings_KuplungAppSettings_2eproto.base);
  heightmapimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&setting_outlinecolor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_terrainheight_) -
      reinterpret_cast<char*>(&setting_outlinecolor_)) + sizeof(setting_terrainheight_));
}

GUISettings::~GUISettings() {
  // @@protoc_insertion_point(destructor:KuplungApp.GUISettings)
  SharedDtor();
}

void GUISettings::SharedDtor() {
  heightmapimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete setting_outlinecolor_;
  if (this != internal_default_instance()) delete setting_uiambientlight_;
  if (this != internal_default_instance()) delete solidlight_direction_;
  if (this != internal_default_instance()) delete solidlight_materialcolor_;
  if (this != internal_default_instance()) delete solidlight_ambient_;
  if (this != internal_default_instance()) delete solidlight_diffuse_;
  if (this != internal_default_instance()) delete solidlight_specular_;
  if (this != internal_default_instance()) delete camera_;
  if (this != internal_default_instance()) delete grid_;
}

void GUISettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GUISettings& GUISettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GUISettings_KuplungAppSettings_2eproto.base);
  return *internal_default_instance();
}


void GUISettings::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.GUISettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lights_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      heightmapimage_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(setting_outlinecolor_ != nullptr);
      setting_outlinecolor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(setting_uiambientlight_ != nullptr);
      setting_uiambientlight_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(solidlight_direction_ != nullptr);
      solidlight_direction_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(solidlight_materialcolor_ != nullptr);
      solidlight_materialcolor_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(solidlight_ambient_ != nullptr);
      solidlight_ambient_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(solidlight_diffuse_ != nullptr);
      solidlight_diffuse_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(solidlight_specular_ != nullptr);
      solidlight_specular_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(camera_ != nullptr);
      camera_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(grid_ != nullptr);
      grid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&setting_fov_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_planefar_) -
        reinterpret_cast<char*>(&setting_fov_)) + sizeof(setting_planefar_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&setting_gridsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_deferredtestlightsnumber_) -
        reinterpret_cast<char*>(&setting_gridsize_)) + sizeof(setting_deferredtestlightsnumber_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&setting_deferredambientstrength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solidlight_diffuse_strength_) -
        reinterpret_cast<char*>(&setting_deferredambientstrength_)) + sizeof(solidlight_diffuse_strength_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&solidlight_specular_strength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_terrainanimatey_) -
        reinterpret_cast<char*>(&solidlight_specular_strength_)) + sizeof(setting_terrainanimatey_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&setting_showspaceship_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&setting_terrainheight_) -
        reinterpret_cast<char*>(&setting_showspaceship_)) + sizeof(setting_terrainheight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GUISettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float Setting_FOV = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_setting_fov(&_has_bits_);
          setting_fov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Setting_OutlineThickness = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_setting_outlinethickness(&_has_bits_);
          setting_outlinethickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Setting_RatioWidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_setting_ratiowidth(&_has_bits_);
          setting_ratiowidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Setting_RatioHeight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_setting_ratioheight(&_has_bits_);
          setting_ratioheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Setting_PlaneClose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_setting_planeclose(&_has_bits_);
          setting_planeclose_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Setting_PlaneFar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_setting_planefar(&_has_bits_);
          setting_planefar_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 Setting_GridSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_setting_gridsize(&_has_bits_);
          setting_gridsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Setting_Skybox = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_setting_skybox(&_has_bits_);
          setting_skybox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting_outlinecolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting_uiambientlight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_FixedGridWorld = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_setting_fixedgridworld(&_has_bits_);
          setting_fixedgridworld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_OutlineColorPickerOpen = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_setting_outlinecolorpickeropen(&_has_bits_);
          setting_outlinecolorpickeropen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_ShowAxisHelpers = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_setting_showaxishelpers(&_has_bits_);
          setting_showaxishelpers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Settings_ShowZAxis = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_settings_showzaxis(&_has_bits_);
          settings_showzaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_DeferredTestMode = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_setting_deferredtestmode(&_has_bits_);
          setting_deferredtestmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_DeferredTestLights = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_setting_deferredtestlights(&_has_bits_);
          setting_deferredtestlights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Setting_LightingPass_DrawMode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_setting_lightingpass_drawmode(&_has_bits_);
          setting_lightingpass_drawmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Setting_DeferredTestLightsNumber = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_setting_deferredtestlightsnumber(&_has_bits_);
          setting_deferredtestlightsnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float Setting_DeferredAmbientStrength = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_setting_deferredambientstrength(&_has_bits_);
          setting_deferredambientstrength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 viewModelSkin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_viewmodelskin(&_has_bits_);
          viewmodelskin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 SolidLight_Direction = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_solidlight_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_solidlight_materialcolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_solidlight_ambient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_solidlight_diffuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 SolidLight_Specular = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_solidlight_specular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float SolidLight_Ambient_Strength = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_solidlight_ambient_strength(&_has_bits_);
          solidlight_ambient_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float SolidLight_Diffuse_Strength = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_solidlight_diffuse_strength(&_has_bits_);
          solidlight_diffuse_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float SolidLight_Specular_Strength = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_solidlight_specular_strength(&_has_bits_);
          solidlight_specular_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool SolidLight_MaterialColor_ColorPicker = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_solidlight_materialcolor_colorpicker(&_has_bits_);
          solidlight_materialcolor_colorpicker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool SolidLight_Ambient_ColorPicker = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_solidlight_ambient_colorpicker(&_has_bits_);
          solidlight_ambient_colorpicker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool SolidLight_Diffuse_ColorPicker = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_solidlight_diffuse_colorpicker(&_has_bits_);
          solidlight_diffuse_colorpicker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool SolidLight_Specular_ColorPicker = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_solidlight_specular_colorpicker(&_has_bits_);
          solidlight_specular_colorpicker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_ShowTerrain = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_setting_showterrain(&_has_bits_);
          setting_showterrain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_TerrainModel = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_setting_terrainmodel(&_has_bits_);
          setting_terrainmodel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_TerrainAnimateX = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_setting_terrainanimatex(&_has_bits_);
          setting_terrainanimatex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_TerrainAnimateY = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_setting_terrainanimatey(&_has_bits_);
          setting_terrainanimatey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string heightmapImage = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_heightmapimage(), ptr, ctx, "KuplungApp.GUISettings.heightmapImage");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Setting_TerrainWidth = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_setting_terrainwidth(&_has_bits_);
          setting_terrainwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Setting_TerrainHeight = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_setting_terrainheight(&_has_bits_);
          setting_terrainheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_ShowSpaceship = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_setting_showspaceship(&_has_bits_);
          setting_showspaceship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Setting_GenerateSpaceship = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_setting_generatespaceship(&_has_bits_);
          setting_generatespaceship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.CameraSettings camera = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.GridSettings grid = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KuplungApp.LightObject lights = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GUISettings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.GUISettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float Setting_FOV = 1;
  if (cached_has_bits & 0x00000400u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_setting_fov(), target);
  }

  // required float Setting_OutlineThickness = 2;
  if (cached_has_bits & 0x00000800u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_setting_outlinethickness(), target);
  }

  // required float Setting_RatioWidth = 3;
  if (cached_has_bits & 0x00001000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_setting_ratiowidth(), target);
  }

  // required float Setting_RatioHeight = 4;
  if (cached_has_bits & 0x00002000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_setting_ratioheight(), target);
  }

  // required float Setting_PlaneClose = 5;
  if (cached_has_bits & 0x00004000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_setting_planeclose(), target);
  }

  // required float Setting_PlaneFar = 6;
  if (cached_has_bits & 0x00008000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_setting_planefar(), target);
  }

  // required int32 Setting_GridSize = 7;
  if (cached_has_bits & 0x00010000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_setting_gridsize(), target);
  }

  // required int32 Setting_Skybox = 8;
  if (cached_has_bits & 0x00020000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_setting_skybox(), target);
  }

  // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::setting_outlinecolor(this), target, stream);
  }

  // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::setting_uiambientlight(this), target, stream);
  }

  // required bool Setting_FixedGridWorld = 11;
  if (cached_has_bits & 0x00040000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_setting_fixedgridworld(), target);
  }

  // required bool Setting_OutlineColorPickerOpen = 12;
  if (cached_has_bits & 0x00080000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_setting_outlinecolorpickeropen(), target);
  }

  // required bool Setting_ShowAxisHelpers = 13;
  if (cached_has_bits & 0x00100000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_setting_showaxishelpers(), target);
  }

  // required bool Settings_ShowZAxis = 14;
  if (cached_has_bits & 0x00200000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_settings_showzaxis(), target);
  }

  // required bool Setting_DeferredTestMode = 15;
  if (cached_has_bits & 0x04000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_setting_deferredtestmode(), target);
  }

  // required bool Setting_DeferredTestLights = 16;
  if (cached_has_bits & 0x08000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_setting_deferredtestlights(), target);
  }

  // required int32 Setting_LightingPass_DrawMode = 17;
  if (cached_has_bits & 0x00400000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_setting_lightingpass_drawmode(), target);
  }

  // required int32 Setting_DeferredTestLightsNumber = 18;
  if (cached_has_bits & 0x00800000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_setting_deferredtestlightsnumber(), target);
  }

  // required float Setting_DeferredAmbientStrength = 19;
  if (cached_has_bits & 0x01000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_setting_deferredambientstrength(), target);
  }

  // required int32 viewModelSkin = 20;
  if (cached_has_bits & 0x02000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_viewmodelskin(), target);
  }

  // required .KuplungApp.Vec3 SolidLight_Direction = 21;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::solidlight_direction(this), target, stream);
  }

  // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, _Internal::solidlight_materialcolor(this), target, stream);
  }

  // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, _Internal::solidlight_ambient(this), target, stream);
  }

  // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, _Internal::solidlight_diffuse(this), target, stream);
  }

  // required .KuplungApp.Vec3 SolidLight_Specular = 25;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::solidlight_specular(this), target, stream);
  }

  // required float SolidLight_Ambient_Strength = 26;
  if (cached_has_bits & 0x40000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_solidlight_ambient_strength(), target);
  }

  // required float SolidLight_Diffuse_Strength = 27;
  if (cached_has_bits & 0x80000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_solidlight_diffuse_strength(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required float SolidLight_Specular_Strength = 28;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_solidlight_specular_strength(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required bool SolidLight_MaterialColor_ColorPicker = 29;
  if (cached_has_bits & 0x10000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_solidlight_materialcolor_colorpicker(), target);
  }

  // required bool SolidLight_Ambient_ColorPicker = 30;
  if (cached_has_bits & 0x20000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_solidlight_ambient_colorpicker(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required bool SolidLight_Diffuse_ColorPicker = 31;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_solidlight_diffuse_colorpicker(), target);
  }

  // required bool SolidLight_Specular_ColorPicker = 32;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_solidlight_specular_colorpicker(), target);
  }

  // required bool Setting_ShowTerrain = 33;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_setting_showterrain(), target);
  }

  // required bool Setting_TerrainModel = 34;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_setting_terrainmodel(), target);
  }

  // required bool Setting_TerrainAnimateX = 35;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_setting_terrainanimatex(), target);
  }

  // required bool Setting_TerrainAnimateY = 36;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_setting_terrainanimatey(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string heightmapImage = 37;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_heightmapimage().data(), static_cast<int>(this->_internal_heightmapimage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.GUISettings.heightmapImage");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_heightmapimage(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 Setting_TerrainWidth = 38;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_setting_terrainwidth(), target);
  }

  // required int32 Setting_TerrainHeight = 39;
  if (cached_has_bits & 0x00000400u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_setting_terrainheight(), target);
  }

  // required bool Setting_ShowSpaceship = 40;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_setting_showspaceship(), target);
  }

  // required bool Setting_GenerateSpaceship = 41;
  if (cached_has_bits & 0x00000200u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_setting_generatespaceship(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.CameraSettings camera = 42;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        42, _Internal::camera(this), target, stream);
  }

  // required .KuplungApp.GridSettings grid = 43;
  if (cached_has_bits & 0x00000200u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        43, _Internal::grid(this), target, stream);
  }

  // repeated .KuplungApp.LightObject lights = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lights_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(44, this->_internal_lights(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.GUISettings)
  return target;
}

size_t GUISettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.GUISettings)
  size_t total_size = 0;

  if (has_heightmapimage()) {
    // required string heightmapImage = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heightmapimage());
  }

  if (has_setting_outlinecolor()) {
    // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_outlinecolor_);
  }

  if (has_setting_uiambientlight()) {
    // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_uiambientlight_);
  }

  if (has_solidlight_direction()) {
    // required .KuplungApp.Vec3 SolidLight_Direction = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlight_direction_);
  }

  if (has_solidlight_materialcolor()) {
    // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlight_materialcolor_);
  }

  if (has_solidlight_ambient()) {
    // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlight_ambient_);
  }

  if (has_solidlight_diffuse()) {
    // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlight_diffuse_);
  }

  if (has_solidlight_specular()) {
    // required .KuplungApp.Vec3 SolidLight_Specular = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlight_specular_);
  }

  if (has_camera()) {
    // required .KuplungApp.CameraSettings camera = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  if (has_grid()) {
    // required .KuplungApp.GridSettings grid = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }

  if (has_setting_fov()) {
    // required float Setting_FOV = 1;
    total_size += 1 + 4;
  }

  if (has_setting_outlinethickness()) {
    // required float Setting_OutlineThickness = 2;
    total_size += 1 + 4;
  }

  if (has_setting_ratiowidth()) {
    // required float Setting_RatioWidth = 3;
    total_size += 1 + 4;
  }

  if (has_setting_ratioheight()) {
    // required float Setting_RatioHeight = 4;
    total_size += 1 + 4;
  }

  if (has_setting_planeclose()) {
    // required float Setting_PlaneClose = 5;
    total_size += 1 + 4;
  }

  if (has_setting_planefar()) {
    // required float Setting_PlaneFar = 6;
    total_size += 1 + 4;
  }

  if (has_setting_gridsize()) {
    // required int32 Setting_GridSize = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_gridsize());
  }

  if (has_setting_skybox()) {
    // required int32 Setting_Skybox = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_skybox());
  }

  if (has_setting_fixedgridworld()) {
    // required bool Setting_FixedGridWorld = 11;
    total_size += 1 + 1;
  }

  if (has_setting_outlinecolorpickeropen()) {
    // required bool Setting_OutlineColorPickerOpen = 12;
    total_size += 1 + 1;
  }

  if (has_setting_showaxishelpers()) {
    // required bool Setting_ShowAxisHelpers = 13;
    total_size += 1 + 1;
  }

  if (has_settings_showzaxis()) {
    // required bool Settings_ShowZAxis = 14;
    total_size += 1 + 1;
  }

  if (has_setting_lightingpass_drawmode()) {
    // required int32 Setting_LightingPass_DrawMode = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_lightingpass_drawmode());
  }

  if (has_setting_deferredtestlightsnumber()) {
    // required int32 Setting_DeferredTestLightsNumber = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_deferredtestlightsnumber());
  }

  if (has_setting_deferredambientstrength()) {
    // required float Setting_DeferredAmbientStrength = 19;
    total_size += 2 + 4;
  }

  if (has_viewmodelskin()) {
    // required int32 viewModelSkin = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewmodelskin());
  }

  if (has_setting_deferredtestmode()) {
    // required bool Setting_DeferredTestMode = 15;
    total_size += 1 + 1;
  }

  if (has_setting_deferredtestlights()) {
    // required bool Setting_DeferredTestLights = 16;
    total_size += 2 + 1;
  }

  if (has_solidlight_materialcolor_colorpicker()) {
    // required bool SolidLight_MaterialColor_ColorPicker = 29;
    total_size += 2 + 1;
  }

  if (has_solidlight_ambient_colorpicker()) {
    // required bool SolidLight_Ambient_ColorPicker = 30;
    total_size += 2 + 1;
  }

  if (has_solidlight_ambient_strength()) {
    // required float SolidLight_Ambient_Strength = 26;
    total_size += 2 + 4;
  }

  if (has_solidlight_diffuse_strength()) {
    // required float SolidLight_Diffuse_Strength = 27;
    total_size += 2 + 4;
  }

  if (has_solidlight_specular_strength()) {
    // required float SolidLight_Specular_Strength = 28;
    total_size += 2 + 4;
  }

  if (has_solidlight_diffuse_colorpicker()) {
    // required bool SolidLight_Diffuse_ColorPicker = 31;
    total_size += 2 + 1;
  }

  if (has_solidlight_specular_colorpicker()) {
    // required bool SolidLight_Specular_ColorPicker = 32;
    total_size += 2 + 1;
  }

  if (has_setting_showterrain()) {
    // required bool Setting_ShowTerrain = 33;
    total_size += 2 + 1;
  }

  if (has_setting_terrainmodel()) {
    // required bool Setting_TerrainModel = 34;
    total_size += 2 + 1;
  }

  if (has_setting_terrainwidth()) {
    // required int32 Setting_TerrainWidth = 38;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_terrainwidth());
  }

  if (has_setting_terrainanimatex()) {
    // required bool Setting_TerrainAnimateX = 35;
    total_size += 2 + 1;
  }

  if (has_setting_terrainanimatey()) {
    // required bool Setting_TerrainAnimateY = 36;
    total_size += 2 + 1;
  }

  if (has_setting_showspaceship()) {
    // required bool Setting_ShowSpaceship = 40;
    total_size += 2 + 1;
  }

  if (has_setting_generatespaceship()) {
    // required bool Setting_GenerateSpaceship = 41;
    total_size += 2 + 1;
  }

  if (has_setting_terrainheight()) {
    // required int32 Setting_TerrainHeight = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_terrainheight());
  }

  return total_size;
}
size_t GUISettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.GUISettings)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_has_bits_[1] & 0x000007ff) ^ 0x000007ff)) == 0) {  // All required fields are present.
    // required string heightmapImage = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heightmapimage());

    // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_outlinecolor_);

    // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_uiambientlight_);

    // required .KuplungApp.Vec3 SolidLight_Direction = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlight_direction_);

    // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlight_materialcolor_);

    // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlight_ambient_);

    // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlight_diffuse_);

    // required .KuplungApp.Vec3 SolidLight_Specular = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidlight_specular_);

    // required .KuplungApp.CameraSettings camera = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);

    // required .KuplungApp.GridSettings grid = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);

    // required float Setting_FOV = 1;
    total_size += 1 + 4;

    // required float Setting_OutlineThickness = 2;
    total_size += 1 + 4;

    // required float Setting_RatioWidth = 3;
    total_size += 1 + 4;

    // required float Setting_RatioHeight = 4;
    total_size += 1 + 4;

    // required float Setting_PlaneClose = 5;
    total_size += 1 + 4;

    // required float Setting_PlaneFar = 6;
    total_size += 1 + 4;

    // required int32 Setting_GridSize = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_gridsize());

    // required int32 Setting_Skybox = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_skybox());

    // required bool Setting_FixedGridWorld = 11;
    total_size += 1 + 1;

    // required bool Setting_OutlineColorPickerOpen = 12;
    total_size += 1 + 1;

    // required bool Setting_ShowAxisHelpers = 13;
    total_size += 1 + 1;

    // required bool Settings_ShowZAxis = 14;
    total_size += 1 + 1;

    // required int32 Setting_LightingPass_DrawMode = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_lightingpass_drawmode());

    // required int32 Setting_DeferredTestLightsNumber = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_deferredtestlightsnumber());

    // required float Setting_DeferredAmbientStrength = 19;
    total_size += 2 + 4;

    // required int32 viewModelSkin = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viewmodelskin());

    // required bool Setting_DeferredTestMode = 15;
    total_size += 1 + 1;

    // required bool Setting_DeferredTestLights = 16;
    total_size += 2 + 1;

    // required bool SolidLight_MaterialColor_ColorPicker = 29;
    total_size += 2 + 1;

    // required bool SolidLight_Ambient_ColorPicker = 30;
    total_size += 2 + 1;

    // required float SolidLight_Ambient_Strength = 26;
    total_size += 2 + 4;

    // required float SolidLight_Diffuse_Strength = 27;
    total_size += 2 + 4;

    // required float SolidLight_Specular_Strength = 28;
    total_size += 2 + 4;

    // required bool SolidLight_Diffuse_ColorPicker = 31;
    total_size += 2 + 1;

    // required bool SolidLight_Specular_ColorPicker = 32;
    total_size += 2 + 1;

    // required bool Setting_ShowTerrain = 33;
    total_size += 2 + 1;

    // required bool Setting_TerrainModel = 34;
    total_size += 2 + 1;

    // required int32 Setting_TerrainWidth = 38;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_terrainwidth());

    // required bool Setting_TerrainAnimateX = 35;
    total_size += 2 + 1;

    // required bool Setting_TerrainAnimateY = 36;
    total_size += 2 + 1;

    // required bool Setting_ShowSpaceship = 40;
    total_size += 2 + 1;

    // required bool Setting_GenerateSpaceship = 41;
    total_size += 2 + 1;

    // required int32 Setting_TerrainHeight = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setting_terrainheight());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KuplungApp.LightObject lights = 44;
  total_size += 2UL * this->_internal_lights_size();
  for (const auto& msg : this->lights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GUISettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.GUISettings)
  GOOGLE_DCHECK_NE(&from, this);
  const GUISettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GUISettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.GUISettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.GUISettings)
    MergeFrom(*source);
  }
}

void GUISettings::MergeFrom(const GUISettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.GUISettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lights_.MergeFrom(from.lights_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      heightmapimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.heightmapimage_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_setting_outlinecolor()->::KuplungApp::Vec4::MergeFrom(from._internal_setting_outlinecolor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_setting_uiambientlight()->::KuplungApp::Vec3::MergeFrom(from._internal_setting_uiambientlight());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_solidlight_direction()->::KuplungApp::Vec3::MergeFrom(from._internal_solidlight_direction());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_solidlight_materialcolor()->::KuplungApp::Vec3::MergeFrom(from._internal_solidlight_materialcolor());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_solidlight_ambient()->::KuplungApp::Vec3::MergeFrom(from._internal_solidlight_ambient());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_solidlight_diffuse()->::KuplungApp::Vec3::MergeFrom(from._internal_solidlight_diffuse());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_solidlight_specular()->::KuplungApp::Vec3::MergeFrom(from._internal_solidlight_specular());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_camera()->::KuplungApp::CameraSettings::MergeFrom(from._internal_camera());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_grid()->::KuplungApp::GridSettings::MergeFrom(from._internal_grid());
    }
    if (cached_has_bits & 0x00000400u) {
      setting_fov_ = from.setting_fov_;
    }
    if (cached_has_bits & 0x00000800u) {
      setting_outlinethickness_ = from.setting_outlinethickness_;
    }
    if (cached_has_bits & 0x00001000u) {
      setting_ratiowidth_ = from.setting_ratiowidth_;
    }
    if (cached_has_bits & 0x00002000u) {
      setting_ratioheight_ = from.setting_ratioheight_;
    }
    if (cached_has_bits & 0x00004000u) {
      setting_planeclose_ = from.setting_planeclose_;
    }
    if (cached_has_bits & 0x00008000u) {
      setting_planefar_ = from.setting_planefar_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      setting_gridsize_ = from.setting_gridsize_;
    }
    if (cached_has_bits & 0x00020000u) {
      setting_skybox_ = from.setting_skybox_;
    }
    if (cached_has_bits & 0x00040000u) {
      setting_fixedgridworld_ = from.setting_fixedgridworld_;
    }
    if (cached_has_bits & 0x00080000u) {
      setting_outlinecolorpickeropen_ = from.setting_outlinecolorpickeropen_;
    }
    if (cached_has_bits & 0x00100000u) {
      setting_showaxishelpers_ = from.setting_showaxishelpers_;
    }
    if (cached_has_bits & 0x00200000u) {
      settings_showzaxis_ = from.settings_showzaxis_;
    }
    if (cached_has_bits & 0x00400000u) {
      setting_lightingpass_drawmode_ = from.setting_lightingpass_drawmode_;
    }
    if (cached_has_bits & 0x00800000u) {
      setting_deferredtestlightsnumber_ = from.setting_deferredtestlightsnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      setting_deferredambientstrength_ = from.setting_deferredambientstrength_;
    }
    if (cached_has_bits & 0x02000000u) {
      viewmodelskin_ = from.viewmodelskin_;
    }
    if (cached_has_bits & 0x04000000u) {
      setting_deferredtestmode_ = from.setting_deferredtestmode_;
    }
    if (cached_has_bits & 0x08000000u) {
      setting_deferredtestlights_ = from.setting_deferredtestlights_;
    }
    if (cached_has_bits & 0x10000000u) {
      solidlight_materialcolor_colorpicker_ = from.solidlight_materialcolor_colorpicker_;
    }
    if (cached_has_bits & 0x20000000u) {
      solidlight_ambient_colorpicker_ = from.solidlight_ambient_colorpicker_;
    }
    if (cached_has_bits & 0x40000000u) {
      solidlight_ambient_strength_ = from.solidlight_ambient_strength_;
    }
    if (cached_has_bits & 0x80000000u) {
      solidlight_diffuse_strength_ = from.solidlight_diffuse_strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      solidlight_specular_strength_ = from.solidlight_specular_strength_;
    }
    if (cached_has_bits & 0x00000002u) {
      solidlight_diffuse_colorpicker_ = from.solidlight_diffuse_colorpicker_;
    }
    if (cached_has_bits & 0x00000004u) {
      solidlight_specular_colorpicker_ = from.solidlight_specular_colorpicker_;
    }
    if (cached_has_bits & 0x00000008u) {
      setting_showterrain_ = from.setting_showterrain_;
    }
    if (cached_has_bits & 0x00000010u) {
      setting_terrainmodel_ = from.setting_terrainmodel_;
    }
    if (cached_has_bits & 0x00000020u) {
      setting_terrainwidth_ = from.setting_terrainwidth_;
    }
    if (cached_has_bits & 0x00000040u) {
      setting_terrainanimatex_ = from.setting_terrainanimatex_;
    }
    if (cached_has_bits & 0x00000080u) {
      setting_terrainanimatey_ = from.setting_terrainanimatey_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      setting_showspaceship_ = from.setting_showspaceship_;
    }
    if (cached_has_bits & 0x00000200u) {
      setting_generatespaceship_ = from.setting_generatespaceship_;
    }
    if (cached_has_bits & 0x00000400u) {
      setting_terrainheight_ = from.setting_terrainheight_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void GUISettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.GUISettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUISettings::CopyFrom(const GUISettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.GUISettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUISettings::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000007ff) != 0x000007ff) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->lights())) return false;
  if (has_setting_outlinecolor()) {
    if (!this->setting_outlinecolor_->IsInitialized()) return false;
  }
  if (has_setting_uiambientlight()) {
    if (!this->setting_uiambientlight_->IsInitialized()) return false;
  }
  if (has_solidlight_direction()) {
    if (!this->solidlight_direction_->IsInitialized()) return false;
  }
  if (has_solidlight_materialcolor()) {
    if (!this->solidlight_materialcolor_->IsInitialized()) return false;
  }
  if (has_solidlight_ambient()) {
    if (!this->solidlight_ambient_->IsInitialized()) return false;
  }
  if (has_solidlight_diffuse()) {
    if (!this->solidlight_diffuse_->IsInitialized()) return false;
  }
  if (has_solidlight_specular()) {
    if (!this->solidlight_specular_->IsInitialized()) return false;
  }
  if (has_camera()) {
    if (!this->camera_->IsInitialized()) return false;
  }
  if (has_grid()) {
    if (!this->grid_->IsInitialized()) return false;
  }
  return true;
}

void GUISettings::InternalSwap(GUISettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  lights_.InternalSwap(&other->lights_);
  heightmapimage_.Swap(&other->heightmapimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(setting_outlinecolor_, other->setting_outlinecolor_);
  swap(setting_uiambientlight_, other->setting_uiambientlight_);
  swap(solidlight_direction_, other->solidlight_direction_);
  swap(solidlight_materialcolor_, other->solidlight_materialcolor_);
  swap(solidlight_ambient_, other->solidlight_ambient_);
  swap(solidlight_diffuse_, other->solidlight_diffuse_);
  swap(solidlight_specular_, other->solidlight_specular_);
  swap(camera_, other->camera_);
  swap(grid_, other->grid_);
  swap(setting_fov_, other->setting_fov_);
  swap(setting_outlinethickness_, other->setting_outlinethickness_);
  swap(setting_ratiowidth_, other->setting_ratiowidth_);
  swap(setting_ratioheight_, other->setting_ratioheight_);
  swap(setting_planeclose_, other->setting_planeclose_);
  swap(setting_planefar_, other->setting_planefar_);
  swap(setting_gridsize_, other->setting_gridsize_);
  swap(setting_skybox_, other->setting_skybox_);
  swap(setting_fixedgridworld_, other->setting_fixedgridworld_);
  swap(setting_outlinecolorpickeropen_, other->setting_outlinecolorpickeropen_);
  swap(setting_showaxishelpers_, other->setting_showaxishelpers_);
  swap(settings_showzaxis_, other->settings_showzaxis_);
  swap(setting_lightingpass_drawmode_, other->setting_lightingpass_drawmode_);
  swap(setting_deferredtestlightsnumber_, other->setting_deferredtestlightsnumber_);
  swap(setting_deferredambientstrength_, other->setting_deferredambientstrength_);
  swap(viewmodelskin_, other->viewmodelskin_);
  swap(setting_deferredtestmode_, other->setting_deferredtestmode_);
  swap(setting_deferredtestlights_, other->setting_deferredtestlights_);
  swap(solidlight_materialcolor_colorpicker_, other->solidlight_materialcolor_colorpicker_);
  swap(solidlight_ambient_colorpicker_, other->solidlight_ambient_colorpicker_);
  swap(solidlight_ambient_strength_, other->solidlight_ambient_strength_);
  swap(solidlight_diffuse_strength_, other->solidlight_diffuse_strength_);
  swap(solidlight_specular_strength_, other->solidlight_specular_strength_);
  swap(solidlight_diffuse_colorpicker_, other->solidlight_diffuse_colorpicker_);
  swap(solidlight_specular_colorpicker_, other->solidlight_specular_colorpicker_);
  swap(setting_showterrain_, other->setting_showterrain_);
  swap(setting_terrainmodel_, other->setting_terrainmodel_);
  swap(setting_terrainwidth_, other->setting_terrainwidth_);
  swap(setting_terrainanimatex_, other->setting_terrainanimatex_);
  swap(setting_terrainanimatey_, other->setting_terrainanimatey_);
  swap(setting_showspaceship_, other->setting_showspaceship_);
  swap(setting_generatespaceship_, other->setting_generatespaceship_);
  swap(setting_terrainheight_, other->setting_terrainheight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GUISettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraSettings::InitAsDefaultInstance() {
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->cameraposition_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->view_eye_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->view_center_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->view_up_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->positionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->positiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->positionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatecenterx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatecentery_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_CameraSettings_default_instance_._instance.get_mutable()->rotatecenterz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
}
class CameraSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraSettings>()._has_bits_);
  static const ::KuplungApp::Vec3& cameraposition(const CameraSettings* msg);
  static void set_has_cameraposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KuplungApp::Vec3& view_eye(const CameraSettings* msg);
  static void set_has_view_eye(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KuplungApp::Vec3& view_center(const CameraSettings* msg);
  static void set_has_view_center(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KuplungApp::Vec3& view_up(const CameraSettings* msg);
  static void set_has_view_up(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KuplungApp::ObjectCoordinate& positionx(const CameraSettings* msg);
  static void set_has_positionx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KuplungApp::ObjectCoordinate& positiony(const CameraSettings* msg);
  static void set_has_positiony(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KuplungApp::ObjectCoordinate& positionz(const CameraSettings* msg);
  static void set_has_positionz(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatex(const CameraSettings* msg);
  static void set_has_rotatex(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatey(const CameraSettings* msg);
  static void set_has_rotatey(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatez(const CameraSettings* msg);
  static void set_has_rotatez(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatecenterx(const CameraSettings* msg);
  static void set_has_rotatecenterx(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatecentery(const CameraSettings* msg);
  static void set_has_rotatecentery(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatecenterz(const CameraSettings* msg);
  static void set_has_rotatecenterz(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::KuplungApp::Vec3&
CameraSettings::_Internal::cameraposition(const CameraSettings* msg) {
  return *msg->cameraposition_;
}
const ::KuplungApp::Vec3&
CameraSettings::_Internal::view_eye(const CameraSettings* msg) {
  return *msg->view_eye_;
}
const ::KuplungApp::Vec3&
CameraSettings::_Internal::view_center(const CameraSettings* msg) {
  return *msg->view_center_;
}
const ::KuplungApp::Vec3&
CameraSettings::_Internal::view_up(const CameraSettings* msg) {
  return *msg->view_up_;
}
const ::KuplungApp::ObjectCoordinate&
CameraSettings::_Internal::positionx(const CameraSettings* msg) {
  return *msg->positionx_;
}
const ::KuplungApp::ObjectCoordinate&
CameraSettings::_Internal::positiony(const CameraSettings* msg) {
  return *msg->positiony_;
}
const ::KuplungApp::ObjectCoordinate&
CameraSettings::_Internal::positionz(const CameraSettings* msg) {
  return *msg->positionz_;
}
const ::KuplungApp::ObjectCoordinate&
CameraSettings::_Internal::rotatex(const CameraSettings* msg) {
  return *msg->rotatex_;
}
const ::KuplungApp::ObjectCoordinate&
CameraSettings::_Internal::rotatey(const CameraSettings* msg) {
  return *msg->rotatey_;
}
const ::KuplungApp::ObjectCoordinate&
CameraSettings::_Internal::rotatez(const CameraSettings* msg) {
  return *msg->rotatez_;
}
const ::KuplungApp::ObjectCoordinate&
CameraSettings::_Internal::rotatecenterx(const CameraSettings* msg) {
  return *msg->rotatecenterx_;
}
const ::KuplungApp::ObjectCoordinate&
CameraSettings::_Internal::rotatecentery(const CameraSettings* msg) {
  return *msg->rotatecentery_;
}
const ::KuplungApp::ObjectCoordinate&
CameraSettings::_Internal::rotatecenterz(const CameraSettings* msg) {
  return *msg->rotatecenterz_;
}
void CameraSettings::clear_cameraposition() {
  if (cameraposition_ != nullptr) cameraposition_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CameraSettings::clear_view_eye() {
  if (view_eye_ != nullptr) view_eye_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CameraSettings::clear_view_center() {
  if (view_center_ != nullptr) view_center_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CameraSettings::clear_view_up() {
  if (view_up_ != nullptr) view_up_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CameraSettings::clear_positionx() {
  if (positionx_ != nullptr) positionx_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CameraSettings::clear_positiony() {
  if (positiony_ != nullptr) positiony_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CameraSettings::clear_positionz() {
  if (positionz_ != nullptr) positionz_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CameraSettings::clear_rotatex() {
  if (rotatex_ != nullptr) rotatex_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CameraSettings::clear_rotatey() {
  if (rotatey_ != nullptr) rotatey_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void CameraSettings::clear_rotatez() {
  if (rotatez_ != nullptr) rotatez_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void CameraSettings::clear_rotatecenterx() {
  if (rotatecenterx_ != nullptr) rotatecenterx_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void CameraSettings::clear_rotatecentery() {
  if (rotatecentery_ != nullptr) rotatecentery_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void CameraSettings::clear_rotatecenterz() {
  if (rotatecenterz_ != nullptr) rotatecenterz_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
CameraSettings::CameraSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.CameraSettings)
}
CameraSettings::CameraSettings(const CameraSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cameraposition()) {
    cameraposition_ = new ::KuplungApp::Vec3(*from.cameraposition_);
  } else {
    cameraposition_ = nullptr;
  }
  if (from._internal_has_view_eye()) {
    view_eye_ = new ::KuplungApp::Vec3(*from.view_eye_);
  } else {
    view_eye_ = nullptr;
  }
  if (from._internal_has_view_center()) {
    view_center_ = new ::KuplungApp::Vec3(*from.view_center_);
  } else {
    view_center_ = nullptr;
  }
  if (from._internal_has_view_up()) {
    view_up_ = new ::KuplungApp::Vec3(*from.view_up_);
  } else {
    view_up_ = nullptr;
  }
  if (from._internal_has_positionx()) {
    positionx_ = new ::KuplungApp::ObjectCoordinate(*from.positionx_);
  } else {
    positionx_ = nullptr;
  }
  if (from._internal_has_positiony()) {
    positiony_ = new ::KuplungApp::ObjectCoordinate(*from.positiony_);
  } else {
    positiony_ = nullptr;
  }
  if (from._internal_has_positionz()) {
    positionz_ = new ::KuplungApp::ObjectCoordinate(*from.positionz_);
  } else {
    positionz_ = nullptr;
  }
  if (from._internal_has_rotatex()) {
    rotatex_ = new ::KuplungApp::ObjectCoordinate(*from.rotatex_);
  } else {
    rotatex_ = nullptr;
  }
  if (from._internal_has_rotatey()) {
    rotatey_ = new ::KuplungApp::ObjectCoordinate(*from.rotatey_);
  } else {
    rotatey_ = nullptr;
  }
  if (from._internal_has_rotatez()) {
    rotatez_ = new ::KuplungApp::ObjectCoordinate(*from.rotatez_);
  } else {
    rotatez_ = nullptr;
  }
  if (from._internal_has_rotatecenterx()) {
    rotatecenterx_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecenterx_);
  } else {
    rotatecenterx_ = nullptr;
  }
  if (from._internal_has_rotatecentery()) {
    rotatecentery_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecentery_);
  } else {
    rotatecentery_ = nullptr;
  }
  if (from._internal_has_rotatecenterz()) {
    rotatecenterz_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecenterz_);
  } else {
    rotatecenterz_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KuplungApp.CameraSettings)
}

void CameraSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraSettings_KuplungAppSettings_2eproto.base);
  ::memset(&cameraposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotatecenterz_) -
      reinterpret_cast<char*>(&cameraposition_)) + sizeof(rotatecenterz_));
}

CameraSettings::~CameraSettings() {
  // @@protoc_insertion_point(destructor:KuplungApp.CameraSettings)
  SharedDtor();
}

void CameraSettings::SharedDtor() {
  if (this != internal_default_instance()) delete cameraposition_;
  if (this != internal_default_instance()) delete view_eye_;
  if (this != internal_default_instance()) delete view_center_;
  if (this != internal_default_instance()) delete view_up_;
  if (this != internal_default_instance()) delete positionx_;
  if (this != internal_default_instance()) delete positiony_;
  if (this != internal_default_instance()) delete positionz_;
  if (this != internal_default_instance()) delete rotatex_;
  if (this != internal_default_instance()) delete rotatey_;
  if (this != internal_default_instance()) delete rotatez_;
  if (this != internal_default_instance()) delete rotatecenterx_;
  if (this != internal_default_instance()) delete rotatecentery_;
  if (this != internal_default_instance()) delete rotatecenterz_;
}

void CameraSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraSettings& CameraSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraSettings_KuplungAppSettings_2eproto.base);
  return *internal_default_instance();
}


void CameraSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.CameraSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cameraposition_ != nullptr);
      cameraposition_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(view_eye_ != nullptr);
      view_eye_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(view_center_ != nullptr);
      view_center_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(view_up_ != nullptr);
      view_up_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(positionx_ != nullptr);
      positionx_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(positiony_ != nullptr);
      positiony_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(positionz_ != nullptr);
      positionz_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(rotatex_ != nullptr);
      rotatex_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(rotatey_ != nullptr);
      rotatey_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(rotatez_ != nullptr);
      rotatez_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(rotatecenterx_ != nullptr);
      rotatecenterx_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(rotatecentery_ != nullptr);
      rotatecentery_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(rotatecenterz_ != nullptr);
      rotatecenterz_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CameraSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .KuplungApp.Vec3 cameraPosition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cameraposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 View_Eye = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_eye(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 View_Center = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 View_Up = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_up(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiony(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateX = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateY = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateZ = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatez(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatecenterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatecentery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatecenterz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraSettings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.CameraSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .KuplungApp.Vec3 cameraPosition = 1;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::cameraposition(this), target, stream);
  }

  // required .KuplungApp.Vec3 View_Eye = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::view_eye(this), target, stream);
  }

  // required .KuplungApp.Vec3 View_Center = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::view_center(this), target, stream);
  }

  // required .KuplungApp.Vec3 View_Up = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::view_up(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::positionx(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 6;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::positiony(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 7;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::positionz(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 8;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::rotatex(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 9;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::rotatey(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 10;
  if (cached_has_bits & 0x00000200u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::rotatez(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
  if (cached_has_bits & 0x00000400u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::rotatecenterx(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
  if (cached_has_bits & 0x00000800u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::rotatecentery(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
  if (cached_has_bits & 0x00001000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::rotatecenterz(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.CameraSettings)
  return target;
}

size_t CameraSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.CameraSettings)
  size_t total_size = 0;

  if (has_cameraposition()) {
    // required .KuplungApp.Vec3 cameraPosition = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cameraposition_);
  }

  if (has_view_eye()) {
    // required .KuplungApp.Vec3 View_Eye = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_eye_);
  }

  if (has_view_center()) {
    // required .KuplungApp.Vec3 View_Center = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_center_);
  }

  if (has_view_up()) {
    // required .KuplungApp.Vec3 View_Up = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_up_);
  }

  if (has_positionx()) {
    // required .KuplungApp.ObjectCoordinate positionX = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionx_);
  }

  if (has_positiony()) {
    // required .KuplungApp.ObjectCoordinate positionY = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiony_);
  }

  if (has_positionz()) {
    // required .KuplungApp.ObjectCoordinate positionZ = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionz_);
  }

  if (has_rotatex()) {
    // required .KuplungApp.ObjectCoordinate rotateX = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatex_);
  }

  if (has_rotatey()) {
    // required .KuplungApp.ObjectCoordinate rotateY = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatey_);
  }

  if (has_rotatez()) {
    // required .KuplungApp.ObjectCoordinate rotateZ = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatez_);
  }

  if (has_rotatecenterx()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecenterx_);
  }

  if (has_rotatecentery()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecentery_);
  }

  if (has_rotatecenterz()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecenterz_);
  }

  return total_size;
}
size_t CameraSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.CameraSettings)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required .KuplungApp.Vec3 cameraPosition = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cameraposition_);

    // required .KuplungApp.Vec3 View_Eye = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_eye_);

    // required .KuplungApp.Vec3 View_Center = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_center_);

    // required .KuplungApp.Vec3 View_Up = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_up_);

    // required .KuplungApp.ObjectCoordinate positionX = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionx_);

    // required .KuplungApp.ObjectCoordinate positionY = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiony_);

    // required .KuplungApp.ObjectCoordinate positionZ = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionz_);

    // required .KuplungApp.ObjectCoordinate rotateX = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatex_);

    // required .KuplungApp.ObjectCoordinate rotateY = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatey_);

    // required .KuplungApp.ObjectCoordinate rotateZ = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatez_);

    // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecenterx_);

    // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecentery_);

    // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecenterz_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.CameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.CameraSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.CameraSettings)
    MergeFrom(*source);
  }
}

void CameraSettings::MergeFrom(const CameraSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.CameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cameraposition()->::KuplungApp::Vec3::MergeFrom(from._internal_cameraposition());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_view_eye()->::KuplungApp::Vec3::MergeFrom(from._internal_view_eye());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_view_center()->::KuplungApp::Vec3::MergeFrom(from._internal_view_center());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_view_up()->::KuplungApp::Vec3::MergeFrom(from._internal_view_up());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_positionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positionx());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_positiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positiony());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_positionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positionz());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_rotatex()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatex());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_rotatey()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatey());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_rotatez()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatez());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_rotatecenterx()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatecenterx());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_rotatecentery()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatecentery());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_rotatecenterz()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatecenterz());
    }
  }
}

void CameraSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.CameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSettings::CopyFrom(const CameraSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.CameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  if (has_cameraposition()) {
    if (!this->cameraposition_->IsInitialized()) return false;
  }
  if (has_view_eye()) {
    if (!this->view_eye_->IsInitialized()) return false;
  }
  if (has_view_center()) {
    if (!this->view_center_->IsInitialized()) return false;
  }
  if (has_view_up()) {
    if (!this->view_up_->IsInitialized()) return false;
  }
  if (has_positionx()) {
    if (!this->positionx_->IsInitialized()) return false;
  }
  if (has_positiony()) {
    if (!this->positiony_->IsInitialized()) return false;
  }
  if (has_positionz()) {
    if (!this->positionz_->IsInitialized()) return false;
  }
  if (has_rotatex()) {
    if (!this->rotatex_->IsInitialized()) return false;
  }
  if (has_rotatey()) {
    if (!this->rotatey_->IsInitialized()) return false;
  }
  if (has_rotatez()) {
    if (!this->rotatez_->IsInitialized()) return false;
  }
  if (has_rotatecenterx()) {
    if (!this->rotatecenterx_->IsInitialized()) return false;
  }
  if (has_rotatecentery()) {
    if (!this->rotatecentery_->IsInitialized()) return false;
  }
  if (has_rotatecenterz()) {
    if (!this->rotatecenterz_->IsInitialized()) return false;
  }
  return true;
}

void CameraSettings::InternalSwap(CameraSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cameraposition_, other->cameraposition_);
  swap(view_eye_, other->view_eye_);
  swap(view_center_, other->view_center_);
  swap(view_up_, other->view_up_);
  swap(positionx_, other->positionx_);
  swap(positiony_, other->positiony_);
  swap(positionz_, other->positionz_);
  swap(rotatex_, other->rotatex_);
  swap(rotatey_, other->rotatey_);
  swap(rotatez_, other->rotatez_);
  swap(rotatecenterx_, other->rotatecenterx_);
  swap(rotatecentery_, other->rotatecentery_);
  swap(rotatecenterz_, other->rotatecenterz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GridSettings::InitAsDefaultInstance() {
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->positionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->positiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->positionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->rotatex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->rotatey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->rotatez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->scalex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->scaley_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_GridSettings_default_instance_._instance.get_mutable()->scalez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
}
class GridSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<GridSettings>()._has_bits_);
  static void set_has_actasmirror(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gridsize(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::KuplungApp::ObjectCoordinate& positionx(const GridSettings* msg);
  static void set_has_positionx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KuplungApp::ObjectCoordinate& positiony(const GridSettings* msg);
  static void set_has_positiony(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KuplungApp::ObjectCoordinate& positionz(const GridSettings* msg);
  static void set_has_positionz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatex(const GridSettings* msg);
  static void set_has_rotatex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatey(const GridSettings* msg);
  static void set_has_rotatey(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatez(const GridSettings* msg);
  static void set_has_rotatez(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KuplungApp::ObjectCoordinate& scalex(const GridSettings* msg);
  static void set_has_scalex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::KuplungApp::ObjectCoordinate& scaley(const GridSettings* msg);
  static void set_has_scaley(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::KuplungApp::ObjectCoordinate& scalez(const GridSettings* msg);
  static void set_has_scalez(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_transparency(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_showgrid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::KuplungApp::ObjectCoordinate&
GridSettings::_Internal::positionx(const GridSettings* msg) {
  return *msg->positionx_;
}
const ::KuplungApp::ObjectCoordinate&
GridSettings::_Internal::positiony(const GridSettings* msg) {
  return *msg->positiony_;
}
const ::KuplungApp::ObjectCoordinate&
GridSettings::_Internal::positionz(const GridSettings* msg) {
  return *msg->positionz_;
}
const ::KuplungApp::ObjectCoordinate&
GridSettings::_Internal::rotatex(const GridSettings* msg) {
  return *msg->rotatex_;
}
const ::KuplungApp::ObjectCoordinate&
GridSettings::_Internal::rotatey(const GridSettings* msg) {
  return *msg->rotatey_;
}
const ::KuplungApp::ObjectCoordinate&
GridSettings::_Internal::rotatez(const GridSettings* msg) {
  return *msg->rotatez_;
}
const ::KuplungApp::ObjectCoordinate&
GridSettings::_Internal::scalex(const GridSettings* msg) {
  return *msg->scalex_;
}
const ::KuplungApp::ObjectCoordinate&
GridSettings::_Internal::scaley(const GridSettings* msg) {
  return *msg->scaley_;
}
const ::KuplungApp::ObjectCoordinate&
GridSettings::_Internal::scalez(const GridSettings* msg) {
  return *msg->scalez_;
}
void GridSettings::clear_positionx() {
  if (positionx_ != nullptr) positionx_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GridSettings::clear_positiony() {
  if (positiony_ != nullptr) positiony_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GridSettings::clear_positionz() {
  if (positionz_ != nullptr) positionz_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GridSettings::clear_rotatex() {
  if (rotatex_ != nullptr) rotatex_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GridSettings::clear_rotatey() {
  if (rotatey_ != nullptr) rotatey_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GridSettings::clear_rotatez() {
  if (rotatez_ != nullptr) rotatez_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GridSettings::clear_scalex() {
  if (scalex_ != nullptr) scalex_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GridSettings::clear_scaley() {
  if (scaley_ != nullptr) scaley_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void GridSettings::clear_scalez() {
  if (scalez_ != nullptr) scalez_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
GridSettings::GridSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.GridSettings)
}
GridSettings::GridSettings(const GridSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_positionx()) {
    positionx_ = new ::KuplungApp::ObjectCoordinate(*from.positionx_);
  } else {
    positionx_ = nullptr;
  }
  if (from._internal_has_positiony()) {
    positiony_ = new ::KuplungApp::ObjectCoordinate(*from.positiony_);
  } else {
    positiony_ = nullptr;
  }
  if (from._internal_has_positionz()) {
    positionz_ = new ::KuplungApp::ObjectCoordinate(*from.positionz_);
  } else {
    positionz_ = nullptr;
  }
  if (from._internal_has_rotatex()) {
    rotatex_ = new ::KuplungApp::ObjectCoordinate(*from.rotatex_);
  } else {
    rotatex_ = nullptr;
  }
  if (from._internal_has_rotatey()) {
    rotatey_ = new ::KuplungApp::ObjectCoordinate(*from.rotatey_);
  } else {
    rotatey_ = nullptr;
  }
  if (from._internal_has_rotatez()) {
    rotatez_ = new ::KuplungApp::ObjectCoordinate(*from.rotatez_);
  } else {
    rotatez_ = nullptr;
  }
  if (from._internal_has_scalex()) {
    scalex_ = new ::KuplungApp::ObjectCoordinate(*from.scalex_);
  } else {
    scalex_ = nullptr;
  }
  if (from._internal_has_scaley()) {
    scaley_ = new ::KuplungApp::ObjectCoordinate(*from.scaley_);
  } else {
    scaley_ = nullptr;
  }
  if (from._internal_has_scalez()) {
    scalez_ = new ::KuplungApp::ObjectCoordinate(*from.scalez_);
  } else {
    scalez_ = nullptr;
  }
  ::memcpy(&actasmirror_, &from.actasmirror_,
    static_cast<size_t>(reinterpret_cast<char*>(&showgrid_) -
    reinterpret_cast<char*>(&actasmirror_)) + sizeof(showgrid_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.GridSettings)
}

void GridSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GridSettings_KuplungAppSettings_2eproto.base);
  ::memset(&positionx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showgrid_) -
      reinterpret_cast<char*>(&positionx_)) + sizeof(showgrid_));
}

GridSettings::~GridSettings() {
  // @@protoc_insertion_point(destructor:KuplungApp.GridSettings)
  SharedDtor();
}

void GridSettings::SharedDtor() {
  if (this != internal_default_instance()) delete positionx_;
  if (this != internal_default_instance()) delete positiony_;
  if (this != internal_default_instance()) delete positionz_;
  if (this != internal_default_instance()) delete rotatex_;
  if (this != internal_default_instance()) delete rotatey_;
  if (this != internal_default_instance()) delete rotatez_;
  if (this != internal_default_instance()) delete scalex_;
  if (this != internal_default_instance()) delete scaley_;
  if (this != internal_default_instance()) delete scalez_;
}

void GridSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GridSettings& GridSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GridSettings_KuplungAppSettings_2eproto.base);
  return *internal_default_instance();
}


void GridSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.GridSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(positionx_ != nullptr);
      positionx_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(positiony_ != nullptr);
      positiony_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(positionz_ != nullptr);
      positionz_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rotatex_ != nullptr);
      rotatex_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(rotatey_ != nullptr);
      rotatey_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rotatez_ != nullptr);
      rotatez_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(scalex_ != nullptr);
      scalex_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(scaley_ != nullptr);
      scaley_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(scalez_ != nullptr);
    scalez_->Clear();
  }
  if (cached_has_bits & 0x00001e00u) {
    ::memset(&actasmirror_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&showgrid_) -
        reinterpret_cast<char*>(&actasmirror_)) + sizeof(showgrid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GridSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool actAsMirror = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_actasmirror(&has_bits);
          actasmirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 gridSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gridsize(&has_bits);
          gridsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiony(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionZ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateZ = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatez(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate scaleX = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate scaleY = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaley(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate scaleZ = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalez(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float transparency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_transparency(&has_bits);
          transparency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 showGrid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_showgrid(&has_bits);
          showgrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridSettings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.GridSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool actAsMirror = 1;
  if (cached_has_bits & 0x00000200u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_actasmirror(), target);
  }

  // required int32 gridSize = 2;
  if (cached_has_bits & 0x00000400u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gridsize(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 3;
  if (cached_has_bits & 0x00000001u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::positionx(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 4;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::positiony(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 5;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::positionz(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 6;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::rotatex(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 7;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::rotatey(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 8;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::rotatez(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 9;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::scalex(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 10;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::scaley(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 11;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::scalez(this), target, stream);
  }

  // required float transparency = 12;
  if (cached_has_bits & 0x00000800u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_transparency(), target);
  }

  // required int32 showGrid = 13;
  if (cached_has_bits & 0x00001000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_showgrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.GridSettings)
  return target;
}

size_t GridSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.GridSettings)
  size_t total_size = 0;

  if (has_positionx()) {
    // required .KuplungApp.ObjectCoordinate positionX = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionx_);
  }

  if (has_positiony()) {
    // required .KuplungApp.ObjectCoordinate positionY = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiony_);
  }

  if (has_positionz()) {
    // required .KuplungApp.ObjectCoordinate positionZ = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionz_);
  }

  if (has_rotatex()) {
    // required .KuplungApp.ObjectCoordinate rotateX = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatex_);
  }

  if (has_rotatey()) {
    // required .KuplungApp.ObjectCoordinate rotateY = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatey_);
  }

  if (has_rotatez()) {
    // required .KuplungApp.ObjectCoordinate rotateZ = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatez_);
  }

  if (has_scalex()) {
    // required .KuplungApp.ObjectCoordinate scaleX = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalex_);
  }

  if (has_scaley()) {
    // required .KuplungApp.ObjectCoordinate scaleY = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaley_);
  }

  if (has_scalez()) {
    // required .KuplungApp.ObjectCoordinate scaleZ = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalez_);
  }

  if (has_actasmirror()) {
    // required bool actAsMirror = 1;
    total_size += 1 + 1;
  }

  if (has_gridsize()) {
    // required int32 gridSize = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gridsize());
  }

  if (has_transparency()) {
    // required float transparency = 12;
    total_size += 1 + 4;
  }

  if (has_showgrid()) {
    // required int32 showGrid = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showgrid());
  }

  return total_size;
}
size_t GridSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.GridSettings)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required .KuplungApp.ObjectCoordinate positionX = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionx_);

    // required .KuplungApp.ObjectCoordinate positionY = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiony_);

    // required .KuplungApp.ObjectCoordinate positionZ = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionz_);

    // required .KuplungApp.ObjectCoordinate rotateX = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatex_);

    // required .KuplungApp.ObjectCoordinate rotateY = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatey_);

    // required .KuplungApp.ObjectCoordinate rotateZ = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatez_);

    // required .KuplungApp.ObjectCoordinate scaleX = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalex_);

    // required .KuplungApp.ObjectCoordinate scaleY = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaley_);

    // required .KuplungApp.ObjectCoordinate scaleZ = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalez_);

    // required bool actAsMirror = 1;
    total_size += 1 + 1;

    // required int32 gridSize = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gridsize());

    // required float transparency = 12;
    total_size += 1 + 4;

    // required int32 showGrid = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_showgrid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.GridSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const GridSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GridSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.GridSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.GridSettings)
    MergeFrom(*source);
  }
}

void GridSettings::MergeFrom(const GridSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.GridSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_positionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positionx());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_positiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positiony());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_positionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positionz());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rotatex()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatex());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rotatey()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatey());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rotatez()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatez());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_scalex()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_scalex());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_scaley()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_scaley());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_scalez()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_scalez());
    }
    if (cached_has_bits & 0x00000200u) {
      actasmirror_ = from.actasmirror_;
    }
    if (cached_has_bits & 0x00000400u) {
      gridsize_ = from.gridsize_;
    }
    if (cached_has_bits & 0x00000800u) {
      transparency_ = from.transparency_;
    }
    if (cached_has_bits & 0x00001000u) {
      showgrid_ = from.showgrid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GridSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.GridSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridSettings::CopyFrom(const GridSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.GridSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  if (has_positionx()) {
    if (!this->positionx_->IsInitialized()) return false;
  }
  if (has_positiony()) {
    if (!this->positiony_->IsInitialized()) return false;
  }
  if (has_positionz()) {
    if (!this->positionz_->IsInitialized()) return false;
  }
  if (has_rotatex()) {
    if (!this->rotatex_->IsInitialized()) return false;
  }
  if (has_rotatey()) {
    if (!this->rotatey_->IsInitialized()) return false;
  }
  if (has_rotatez()) {
    if (!this->rotatez_->IsInitialized()) return false;
  }
  if (has_scalex()) {
    if (!this->scalex_->IsInitialized()) return false;
  }
  if (has_scaley()) {
    if (!this->scaley_->IsInitialized()) return false;
  }
  if (has_scalez()) {
    if (!this->scalez_->IsInitialized()) return false;
  }
  return true;
}

void GridSettings::InternalSwap(GridSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(positionx_, other->positionx_);
  swap(positiony_, other->positiony_);
  swap(positionz_, other->positionz_);
  swap(rotatex_, other->rotatex_);
  swap(rotatey_, other->rotatey_);
  swap(rotatez_, other->rotatez_);
  swap(scalex_, other->scalex_);
  swap(scaley_, other->scaley_);
  swap(scalez_, other->scalez_);
  swap(actasmirror_, other->actasmirror_);
  swap(gridsize_, other->gridsize_);
  swap(transparency_, other->transparency_);
  swap(showgrid_, other->showgrid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GridSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LightObject::InitAsDefaultInstance() {
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->positionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->positiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->positionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->directionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->directiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->directionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->scalex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->scaley_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->scalez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatecenterx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatecentery_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->rotatecenterz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->ambient_ = const_cast< ::KuplungApp::MaterialColor*>(
      ::KuplungApp::MaterialColor::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->diffuse_ = const_cast< ::KuplungApp::MaterialColor*>(
      ::KuplungApp::MaterialColor::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->specular_ = const_cast< ::KuplungApp::MaterialColor*>(
      ::KuplungApp::MaterialColor::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->lcutoff_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->loutercutoff_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->lconstant_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->llinear_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
  ::KuplungApp::_LightObject_default_instance_._instance.get_mutable()->lquadratic_ = const_cast< ::KuplungApp::ObjectCoordinate*>(
      ::KuplungApp::ObjectCoordinate::internal_default_instance());
}
class LightObject::_Internal {
 public:
  using HasBits = decltype(std::declval<LightObject>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_showlampobject(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_showlampdirection(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_showinwire(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::KuplungApp::ObjectCoordinate& positionx(const LightObject* msg);
  static void set_has_positionx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KuplungApp::ObjectCoordinate& positiony(const LightObject* msg);
  static void set_has_positiony(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KuplungApp::ObjectCoordinate& positionz(const LightObject* msg);
  static void set_has_positionz(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KuplungApp::ObjectCoordinate& directionx(const LightObject* msg);
  static void set_has_directionx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KuplungApp::ObjectCoordinate& directiony(const LightObject* msg);
  static void set_has_directiony(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::KuplungApp::ObjectCoordinate& directionz(const LightObject* msg);
  static void set_has_directionz(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::KuplungApp::ObjectCoordinate& scalex(const LightObject* msg);
  static void set_has_scalex(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KuplungApp::ObjectCoordinate& scaley(const LightObject* msg);
  static void set_has_scaley(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::KuplungApp::ObjectCoordinate& scalez(const LightObject* msg);
  static void set_has_scalez(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatex(const LightObject* msg);
  static void set_has_rotatex(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatey(const LightObject* msg);
  static void set_has_rotatey(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatez(const LightObject* msg);
  static void set_has_rotatez(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatecenterx(const LightObject* msg);
  static void set_has_rotatecenterx(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatecentery(const LightObject* msg);
  static void set_has_rotatecentery(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::KuplungApp::ObjectCoordinate& rotatecenterz(const LightObject* msg);
  static void set_has_rotatecenterz(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::KuplungApp::MaterialColor& ambient(const LightObject* msg);
  static void set_has_ambient(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::KuplungApp::MaterialColor& diffuse(const LightObject* msg);
  static void set_has_diffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::KuplungApp::MaterialColor& specular(const LightObject* msg);
  static void set_has_specular(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::KuplungApp::ObjectCoordinate& lcutoff(const LightObject* msg);
  static void set_has_lcutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::KuplungApp::ObjectCoordinate& loutercutoff(const LightObject* msg);
  static void set_has_loutercutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::KuplungApp::ObjectCoordinate& lconstant(const LightObject* msg);
  static void set_has_lconstant(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::KuplungApp::ObjectCoordinate& llinear(const LightObject* msg);
  static void set_has_llinear(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::KuplungApp::ObjectCoordinate& lquadratic(const LightObject* msg);
  static void set_has_lquadratic(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::positionx(const LightObject* msg) {
  return *msg->positionx_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::positiony(const LightObject* msg) {
  return *msg->positiony_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::positionz(const LightObject* msg) {
  return *msg->positionz_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::directionx(const LightObject* msg) {
  return *msg->directionx_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::directiony(const LightObject* msg) {
  return *msg->directiony_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::directionz(const LightObject* msg) {
  return *msg->directionz_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::scalex(const LightObject* msg) {
  return *msg->scalex_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::scaley(const LightObject* msg) {
  return *msg->scaley_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::scalez(const LightObject* msg) {
  return *msg->scalez_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::rotatex(const LightObject* msg) {
  return *msg->rotatex_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::rotatey(const LightObject* msg) {
  return *msg->rotatey_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::rotatez(const LightObject* msg) {
  return *msg->rotatez_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::rotatecenterx(const LightObject* msg) {
  return *msg->rotatecenterx_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::rotatecentery(const LightObject* msg) {
  return *msg->rotatecentery_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::rotatecenterz(const LightObject* msg) {
  return *msg->rotatecenterz_;
}
const ::KuplungApp::MaterialColor&
LightObject::_Internal::ambient(const LightObject* msg) {
  return *msg->ambient_;
}
const ::KuplungApp::MaterialColor&
LightObject::_Internal::diffuse(const LightObject* msg) {
  return *msg->diffuse_;
}
const ::KuplungApp::MaterialColor&
LightObject::_Internal::specular(const LightObject* msg) {
  return *msg->specular_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::lcutoff(const LightObject* msg) {
  return *msg->lcutoff_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::loutercutoff(const LightObject* msg) {
  return *msg->loutercutoff_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::lconstant(const LightObject* msg) {
  return *msg->lconstant_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::llinear(const LightObject* msg) {
  return *msg->llinear_;
}
const ::KuplungApp::ObjectCoordinate&
LightObject::_Internal::lquadratic(const LightObject* msg) {
  return *msg->lquadratic_;
}
void LightObject::clear_positionx() {
  if (positionx_ != nullptr) positionx_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LightObject::clear_positiony() {
  if (positiony_ != nullptr) positiony_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LightObject::clear_positionz() {
  if (positionz_ != nullptr) positionz_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void LightObject::clear_directionx() {
  if (directionx_ != nullptr) directionx_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void LightObject::clear_directiony() {
  if (directiony_ != nullptr) directiony_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void LightObject::clear_directionz() {
  if (directionz_ != nullptr) directionz_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void LightObject::clear_scalex() {
  if (scalex_ != nullptr) scalex_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void LightObject::clear_scaley() {
  if (scaley_ != nullptr) scaley_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void LightObject::clear_scalez() {
  if (scalez_ != nullptr) scalez_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void LightObject::clear_rotatex() {
  if (rotatex_ != nullptr) rotatex_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void LightObject::clear_rotatey() {
  if (rotatey_ != nullptr) rotatey_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void LightObject::clear_rotatez() {
  if (rotatez_ != nullptr) rotatez_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void LightObject::clear_rotatecenterx() {
  if (rotatecenterx_ != nullptr) rotatecenterx_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void LightObject::clear_rotatecentery() {
  if (rotatecentery_ != nullptr) rotatecentery_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void LightObject::clear_rotatecenterz() {
  if (rotatecenterz_ != nullptr) rotatecenterz_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void LightObject::clear_ambient() {
  if (ambient_ != nullptr) ambient_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void LightObject::clear_diffuse() {
  if (diffuse_ != nullptr) diffuse_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void LightObject::clear_specular() {
  if (specular_ != nullptr) specular_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void LightObject::clear_lcutoff() {
  if (lcutoff_ != nullptr) lcutoff_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void LightObject::clear_loutercutoff() {
  if (loutercutoff_ != nullptr) loutercutoff_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void LightObject::clear_lconstant() {
  if (lconstant_ != nullptr) lconstant_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void LightObject::clear_llinear() {
  if (llinear_ != nullptr) llinear_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void LightObject::clear_lquadratic() {
  if (lquadratic_ != nullptr) lquadratic_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
LightObject::LightObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.LightObject)
}
LightObject::LightObject(const LightObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from._internal_has_positionx()) {
    positionx_ = new ::KuplungApp::ObjectCoordinate(*from.positionx_);
  } else {
    positionx_ = nullptr;
  }
  if (from._internal_has_positiony()) {
    positiony_ = new ::KuplungApp::ObjectCoordinate(*from.positiony_);
  } else {
    positiony_ = nullptr;
  }
  if (from._internal_has_positionz()) {
    positionz_ = new ::KuplungApp::ObjectCoordinate(*from.positionz_);
  } else {
    positionz_ = nullptr;
  }
  if (from._internal_has_directionx()) {
    directionx_ = new ::KuplungApp::ObjectCoordinate(*from.directionx_);
  } else {
    directionx_ = nullptr;
  }
  if (from._internal_has_directiony()) {
    directiony_ = new ::KuplungApp::ObjectCoordinate(*from.directiony_);
  } else {
    directiony_ = nullptr;
  }
  if (from._internal_has_directionz()) {
    directionz_ = new ::KuplungApp::ObjectCoordinate(*from.directionz_);
  } else {
    directionz_ = nullptr;
  }
  if (from._internal_has_scalex()) {
    scalex_ = new ::KuplungApp::ObjectCoordinate(*from.scalex_);
  } else {
    scalex_ = nullptr;
  }
  if (from._internal_has_scaley()) {
    scaley_ = new ::KuplungApp::ObjectCoordinate(*from.scaley_);
  } else {
    scaley_ = nullptr;
  }
  if (from._internal_has_scalez()) {
    scalez_ = new ::KuplungApp::ObjectCoordinate(*from.scalez_);
  } else {
    scalez_ = nullptr;
  }
  if (from._internal_has_rotatex()) {
    rotatex_ = new ::KuplungApp::ObjectCoordinate(*from.rotatex_);
  } else {
    rotatex_ = nullptr;
  }
  if (from._internal_has_rotatey()) {
    rotatey_ = new ::KuplungApp::ObjectCoordinate(*from.rotatey_);
  } else {
    rotatey_ = nullptr;
  }
  if (from._internal_has_rotatez()) {
    rotatez_ = new ::KuplungApp::ObjectCoordinate(*from.rotatez_);
  } else {
    rotatez_ = nullptr;
  }
  if (from._internal_has_rotatecenterx()) {
    rotatecenterx_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecenterx_);
  } else {
    rotatecenterx_ = nullptr;
  }
  if (from._internal_has_rotatecentery()) {
    rotatecentery_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecentery_);
  } else {
    rotatecentery_ = nullptr;
  }
  if (from._internal_has_rotatecenterz()) {
    rotatecenterz_ = new ::KuplungApp::ObjectCoordinate(*from.rotatecenterz_);
  } else {
    rotatecenterz_ = nullptr;
  }
  if (from._internal_has_ambient()) {
    ambient_ = new ::KuplungApp::MaterialColor(*from.ambient_);
  } else {
    ambient_ = nullptr;
  }
  if (from._internal_has_diffuse()) {
    diffuse_ = new ::KuplungApp::MaterialColor(*from.diffuse_);
  } else {
    diffuse_ = nullptr;
  }
  if (from._internal_has_specular()) {
    specular_ = new ::KuplungApp::MaterialColor(*from.specular_);
  } else {
    specular_ = nullptr;
  }
  if (from._internal_has_lcutoff()) {
    lcutoff_ = new ::KuplungApp::ObjectCoordinate(*from.lcutoff_);
  } else {
    lcutoff_ = nullptr;
  }
  if (from._internal_has_loutercutoff()) {
    loutercutoff_ = new ::KuplungApp::ObjectCoordinate(*from.loutercutoff_);
  } else {
    loutercutoff_ = nullptr;
  }
  if (from._internal_has_lconstant()) {
    lconstant_ = new ::KuplungApp::ObjectCoordinate(*from.lconstant_);
  } else {
    lconstant_ = nullptr;
  }
  if (from._internal_has_llinear()) {
    llinear_ = new ::KuplungApp::ObjectCoordinate(*from.llinear_);
  } else {
    llinear_ = nullptr;
  }
  if (from._internal_has_lquadratic()) {
    lquadratic_ = new ::KuplungApp::ObjectCoordinate(*from.lquadratic_);
  } else {
    lquadratic_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&showinwire_) -
    reinterpret_cast<char*>(&type_)) + sizeof(showinwire_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.LightObject)
}

void LightObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LightObject_KuplungAppSettings_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&positionx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showinwire_) -
      reinterpret_cast<char*>(&positionx_)) + sizeof(showinwire_));
}

LightObject::~LightObject() {
  // @@protoc_insertion_point(destructor:KuplungApp.LightObject)
  SharedDtor();
}

void LightObject::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete positionx_;
  if (this != internal_default_instance()) delete positiony_;
  if (this != internal_default_instance()) delete positionz_;
  if (this != internal_default_instance()) delete directionx_;
  if (this != internal_default_instance()) delete directiony_;
  if (this != internal_default_instance()) delete directionz_;
  if (this != internal_default_instance()) delete scalex_;
  if (this != internal_default_instance()) delete scaley_;
  if (this != internal_default_instance()) delete scalez_;
  if (this != internal_default_instance()) delete rotatex_;
  if (this != internal_default_instance()) delete rotatey_;
  if (this != internal_default_instance()) delete rotatez_;
  if (this != internal_default_instance()) delete rotatecenterx_;
  if (this != internal_default_instance()) delete rotatecentery_;
  if (this != internal_default_instance()) delete rotatecenterz_;
  if (this != internal_default_instance()) delete ambient_;
  if (this != internal_default_instance()) delete diffuse_;
  if (this != internal_default_instance()) delete specular_;
  if (this != internal_default_instance()) delete lcutoff_;
  if (this != internal_default_instance()) delete loutercutoff_;
  if (this != internal_default_instance()) delete lconstant_;
  if (this != internal_default_instance()) delete llinear_;
  if (this != internal_default_instance()) delete lquadratic_;
}

void LightObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightObject& LightObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightObject_KuplungAppSettings_2eproto.base);
  return *internal_default_instance();
}


void LightObject::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.LightObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(positionx_ != nullptr);
      positionx_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(positiony_ != nullptr);
      positiony_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(positionz_ != nullptr);
      positionz_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(directionx_ != nullptr);
      directionx_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(directiony_ != nullptr);
      directiony_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(directionz_ != nullptr);
      directionz_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(scalex_ != nullptr);
      scalex_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(scaley_ != nullptr);
      scaley_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(scalez_ != nullptr);
      scalez_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(rotatex_ != nullptr);
      rotatex_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(rotatey_ != nullptr);
      rotatey_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(rotatez_ != nullptr);
      rotatez_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(rotatecenterx_ != nullptr);
      rotatecenterx_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(rotatecentery_ != nullptr);
      rotatecentery_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(rotatecenterz_ != nullptr);
      rotatecenterz_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(ambient_ != nullptr);
      ambient_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(diffuse_ != nullptr);
      diffuse_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(specular_ != nullptr);
      specular_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(lcutoff_ != nullptr);
      lcutoff_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(loutercutoff_ != nullptr);
      loutercutoff_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(lconstant_ != nullptr);
      lconstant_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(llinear_ != nullptr);
      llinear_->Clear();
    }
  }
  if (cached_has_bits & 0x01000000u) {
    GOOGLE_DCHECK(lquadratic_ != nullptr);
    lquadratic_->Clear();
  }
  if (cached_has_bits & 0x1e000000u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&showinwire_) -
        reinterpret_cast<char*>(&type_)) + sizeof(showinwire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LightObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_title(), ptr, ctx, "KuplungApp.LightObject.title");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_description(), ptr, ctx, "KuplungApp.LightObject.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool showLampObject = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_showlampobject(&has_bits);
          showlampobject_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool showLampDirection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_showlampdirection(&has_bits);
          showlampdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool showInWire = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_showinwire(&has_bits);
          showinwire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiony(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate positionZ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate directionX = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_directionx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate directionY = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_directiony(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate directionZ = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_directionz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate scaleX = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate scaleY = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaley(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate scaleZ = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalez(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateX = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatex(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateY = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateZ = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatez(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatecenterx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatecentery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotatecenterz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MaterialColor ambient = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ambient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MaterialColor diffuse = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MaterialColor specular = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_specular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate lCutOff = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_lcutoff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_loutercutoff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate lConstant = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_lconstant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate lLinear = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_llinear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.ObjectCoordinate lQuadratic = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_lquadratic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.LightObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.LightObject.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.LightObject.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // required int32 type = 3;
  if (cached_has_bits & 0x02000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // required bool showLampObject = 4;
  if (cached_has_bits & 0x04000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_showlampobject(), target);
  }

  // required bool showLampDirection = 5;
  if (cached_has_bits & 0x08000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_showlampdirection(), target);
  }

  // required bool showInWire = 6;
  if (cached_has_bits & 0x10000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_showinwire(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 7;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::positionx(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 8;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::positiony(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 9;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::positionz(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate directionX = 10;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::directionx(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate directionY = 11;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::directiony(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate directionZ = 12;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::directionz(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 13;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::scalex(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 14;
  if (cached_has_bits & 0x00000200u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::scaley(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 15;
  if (cached_has_bits & 0x00000400u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::scalez(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 16;
  if (cached_has_bits & 0x00000800u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::rotatex(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 17;
  if (cached_has_bits & 0x00001000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, _Internal::rotatey(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 18;
  if (cached_has_bits & 0x00002000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, _Internal::rotatez(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
  if (cached_has_bits & 0x00004000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, _Internal::rotatecenterx(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
  if (cached_has_bits & 0x00008000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::rotatecentery(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
  if (cached_has_bits & 0x00010000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::rotatecenterz(this), target, stream);
  }

  // required .KuplungApp.MaterialColor ambient = 22;
  if (cached_has_bits & 0x00020000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, _Internal::ambient(this), target, stream);
  }

  // required .KuplungApp.MaterialColor diffuse = 23;
  if (cached_has_bits & 0x00040000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, _Internal::diffuse(this), target, stream);
  }

  // required .KuplungApp.MaterialColor specular = 24;
  if (cached_has_bits & 0x00080000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, _Internal::specular(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate lCutOff = 25;
  if (cached_has_bits & 0x00100000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::lcutoff(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
  if (cached_has_bits & 0x00200000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, _Internal::loutercutoff(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate lConstant = 27;
  if (cached_has_bits & 0x00400000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, _Internal::lconstant(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate lLinear = 28;
  if (cached_has_bits & 0x00800000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, _Internal::llinear(this), target, stream);
  }

  // required .KuplungApp.ObjectCoordinate lQuadratic = 29;
  if (cached_has_bits & 0x01000000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, _Internal::lquadratic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.LightObject)
  return target;
}

size_t LightObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.LightObject)
  size_t total_size = 0;

  if (has_title()) {
    // required string title = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (has_description()) {
    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (has_positionx()) {
    // required .KuplungApp.ObjectCoordinate positionX = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionx_);
  }

  if (has_positiony()) {
    // required .KuplungApp.ObjectCoordinate positionY = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiony_);
  }

  if (has_positionz()) {
    // required .KuplungApp.ObjectCoordinate positionZ = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionz_);
  }

  if (has_directionx()) {
    // required .KuplungApp.ObjectCoordinate directionX = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *directionx_);
  }

  if (has_directiony()) {
    // required .KuplungApp.ObjectCoordinate directionY = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *directiony_);
  }

  if (has_directionz()) {
    // required .KuplungApp.ObjectCoordinate directionZ = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *directionz_);
  }

  if (has_scalex()) {
    // required .KuplungApp.ObjectCoordinate scaleX = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalex_);
  }

  if (has_scaley()) {
    // required .KuplungApp.ObjectCoordinate scaleY = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaley_);
  }

  if (has_scalez()) {
    // required .KuplungApp.ObjectCoordinate scaleZ = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalez_);
  }

  if (has_rotatex()) {
    // required .KuplungApp.ObjectCoordinate rotateX = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatex_);
  }

  if (has_rotatey()) {
    // required .KuplungApp.ObjectCoordinate rotateY = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatey_);
  }

  if (has_rotatez()) {
    // required .KuplungApp.ObjectCoordinate rotateZ = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatez_);
  }

  if (has_rotatecenterx()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecenterx_);
  }

  if (has_rotatecentery()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecentery_);
  }

  if (has_rotatecenterz()) {
    // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecenterz_);
  }

  if (has_ambient()) {
    // required .KuplungApp.MaterialColor ambient = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ambient_);
  }

  if (has_diffuse()) {
    // required .KuplungApp.MaterialColor diffuse = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diffuse_);
  }

  if (has_specular()) {
    // required .KuplungApp.MaterialColor specular = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specular_);
  }

  if (has_lcutoff()) {
    // required .KuplungApp.ObjectCoordinate lCutOff = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lcutoff_);
  }

  if (has_loutercutoff()) {
    // required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loutercutoff_);
  }

  if (has_lconstant()) {
    // required .KuplungApp.ObjectCoordinate lConstant = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lconstant_);
  }

  if (has_llinear()) {
    // required .KuplungApp.ObjectCoordinate lLinear = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *llinear_);
  }

  if (has_lquadratic()) {
    // required .KuplungApp.ObjectCoordinate lQuadratic = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lquadratic_);
  }

  if (has_type()) {
    // required int32 type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (has_showlampobject()) {
    // required bool showLampObject = 4;
    total_size += 1 + 1;
  }

  if (has_showlampdirection()) {
    // required bool showLampDirection = 5;
    total_size += 1 + 1;
  }

  if (has_showinwire()) {
    // required bool showInWire = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t LightObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.LightObject)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x1fffffff) ^ 0x1fffffff) == 0) {  // All required fields are present.
    // required string title = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());

    // required string description = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

    // required .KuplungApp.ObjectCoordinate positionX = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionx_);

    // required .KuplungApp.ObjectCoordinate positionY = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiony_);

    // required .KuplungApp.ObjectCoordinate positionZ = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionz_);

    // required .KuplungApp.ObjectCoordinate directionX = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *directionx_);

    // required .KuplungApp.ObjectCoordinate directionY = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *directiony_);

    // required .KuplungApp.ObjectCoordinate directionZ = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *directionz_);

    // required .KuplungApp.ObjectCoordinate scaleX = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalex_);

    // required .KuplungApp.ObjectCoordinate scaleY = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaley_);

    // required .KuplungApp.ObjectCoordinate scaleZ = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalez_);

    // required .KuplungApp.ObjectCoordinate rotateX = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatex_);

    // required .KuplungApp.ObjectCoordinate rotateY = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatey_);

    // required .KuplungApp.ObjectCoordinate rotateZ = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatez_);

    // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecenterx_);

    // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecentery_);

    // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotatecenterz_);

    // required .KuplungApp.MaterialColor ambient = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ambient_);

    // required .KuplungApp.MaterialColor diffuse = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diffuse_);

    // required .KuplungApp.MaterialColor specular = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specular_);

    // required .KuplungApp.ObjectCoordinate lCutOff = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lcutoff_);

    // required .KuplungApp.ObjectCoordinate lOuterCutOff = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loutercutoff_);

    // required .KuplungApp.ObjectCoordinate lConstant = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lconstant_);

    // required .KuplungApp.ObjectCoordinate lLinear = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *llinear_);

    // required .KuplungApp.ObjectCoordinate lQuadratic = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lquadratic_);

    // required int32 type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());

    // required bool showLampObject = 4;
    total_size += 1 + 1;

    // required bool showLampDirection = 5;
    total_size += 1 + 1;

    // required bool showInWire = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.LightObject)
  GOOGLE_DCHECK_NE(&from, this);
  const LightObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.LightObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.LightObject)
    MergeFrom(*source);
  }
}

void LightObject::MergeFrom(const LightObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.LightObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_positionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positionx());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_positiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positiony());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_positionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_positionz());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_directionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_directionx());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_directiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_directiony());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_directionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_directionz());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_scalex()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_scalex());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_scaley()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_scaley());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_scalez()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_scalez());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_rotatex()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatex());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_rotatey()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatey());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_rotatez()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatez());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_rotatecenterx()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatecenterx());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_rotatecentery()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatecentery());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_rotatecenterz()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_rotatecenterz());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_ambient()->::KuplungApp::MaterialColor::MergeFrom(from._internal_ambient());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_diffuse()->::KuplungApp::MaterialColor::MergeFrom(from._internal_diffuse());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_specular()->::KuplungApp::MaterialColor::MergeFrom(from._internal_specular());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_lcutoff()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_lcutoff());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_loutercutoff()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_loutercutoff());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_lconstant()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_lconstant());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_llinear()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_llinear());
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_lquadratic()->::KuplungApp::ObjectCoordinate::MergeFrom(from._internal_lquadratic());
    }
    if (cached_has_bits & 0x02000000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x04000000u) {
      showlampobject_ = from.showlampobject_;
    }
    if (cached_has_bits & 0x08000000u) {
      showlampdirection_ = from.showlampdirection_;
    }
    if (cached_has_bits & 0x10000000u) {
      showinwire_ = from.showinwire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LightObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.LightObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightObject::CopyFrom(const LightObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.LightObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x1fffffff) != 0x1fffffff) return false;
  if (has_positionx()) {
    if (!this->positionx_->IsInitialized()) return false;
  }
  if (has_positiony()) {
    if (!this->positiony_->IsInitialized()) return false;
  }
  if (has_positionz()) {
    if (!this->positionz_->IsInitialized()) return false;
  }
  if (has_directionx()) {
    if (!this->directionx_->IsInitialized()) return false;
  }
  if (has_directiony()) {
    if (!this->directiony_->IsInitialized()) return false;
  }
  if (has_directionz()) {
    if (!this->directionz_->IsInitialized()) return false;
  }
  if (has_scalex()) {
    if (!this->scalex_->IsInitialized()) return false;
  }
  if (has_scaley()) {
    if (!this->scaley_->IsInitialized()) return false;
  }
  if (has_scalez()) {
    if (!this->scalez_->IsInitialized()) return false;
  }
  if (has_rotatex()) {
    if (!this->rotatex_->IsInitialized()) return false;
  }
  if (has_rotatey()) {
    if (!this->rotatey_->IsInitialized()) return false;
  }
  if (has_rotatez()) {
    if (!this->rotatez_->IsInitialized()) return false;
  }
  if (has_rotatecenterx()) {
    if (!this->rotatecenterx_->IsInitialized()) return false;
  }
  if (has_rotatecentery()) {
    if (!this->rotatecentery_->IsInitialized()) return false;
  }
  if (has_rotatecenterz()) {
    if (!this->rotatecenterz_->IsInitialized()) return false;
  }
  if (has_ambient()) {
    if (!this->ambient_->IsInitialized()) return false;
  }
  if (has_diffuse()) {
    if (!this->diffuse_->IsInitialized()) return false;
  }
  if (has_specular()) {
    if (!this->specular_->IsInitialized()) return false;
  }
  if (has_lcutoff()) {
    if (!this->lcutoff_->IsInitialized()) return false;
  }
  if (has_loutercutoff()) {
    if (!this->loutercutoff_->IsInitialized()) return false;
  }
  if (has_lconstant()) {
    if (!this->lconstant_->IsInitialized()) return false;
  }
  if (has_llinear()) {
    if (!this->llinear_->IsInitialized()) return false;
  }
  if (has_lquadratic()) {
    if (!this->lquadratic_->IsInitialized()) return false;
  }
  return true;
}

void LightObject::InternalSwap(LightObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(positionx_, other->positionx_);
  swap(positiony_, other->positiony_);
  swap(positionz_, other->positionz_);
  swap(directionx_, other->directionx_);
  swap(directiony_, other->directiony_);
  swap(directionz_, other->directionz_);
  swap(scalex_, other->scalex_);
  swap(scaley_, other->scaley_);
  swap(scalez_, other->scalez_);
  swap(rotatex_, other->rotatex_);
  swap(rotatey_, other->rotatey_);
  swap(rotatez_, other->rotatez_);
  swap(rotatecenterx_, other->rotatecenterx_);
  swap(rotatecentery_, other->rotatecentery_);
  swap(rotatecenterz_, other->rotatecenterz_);
  swap(ambient_, other->ambient_);
  swap(diffuse_, other->diffuse_);
  swap(specular_, other->specular_);
  swap(lcutoff_, other->lcutoff_);
  swap(loutercutoff_, other->loutercutoff_);
  swap(lconstant_, other->lconstant_);
  swap(llinear_, other->llinear_);
  swap(lquadratic_, other->lquadratic_);
  swap(type_, other->type_);
  swap(showlampobject_, other->showlampobject_);
  swap(showlampdirection_, other->showlampdirection_);
  swap(showinwire_, other->showinwire_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightObject::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KuplungApp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KuplungApp::GUISettings* Arena::CreateMaybeMessage< ::KuplungApp::GUISettings >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::GUISettings >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::CameraSettings* Arena::CreateMaybeMessage< ::KuplungApp::CameraSettings >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::CameraSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::GridSettings* Arena::CreateMaybeMessage< ::KuplungApp::GridSettings >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::GridSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::LightObject* Arena::CreateMaybeMessage< ::KuplungApp::LightObject >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::LightObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
