// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungAppSettings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KuplungAppSettings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KuplungApp {

namespace {

const ::google::protobuf::Descriptor* GUISettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GUISettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* LightObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightObject_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KuplungAppSettings_2eproto() {
  protobuf_AddDesc_KuplungAppSettings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KuplungAppSettings.proto");
  GOOGLE_CHECK(file != NULL);
  GUISettings_descriptor_ = file->message_type(0);
  static const int GUISettings_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_fov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_outlinethickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_ratiowidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_ratioheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_planeclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_planefar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_gridsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_skybox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_outlinecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_uiambientlight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_fixedgridworld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_outlinecolorpickeropen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_showaxishelpers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, settings_showzaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_deferredtestmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_deferredtestlights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_lightingpass_drawmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_deferredtestlightsnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_deferredambientstrength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, viewmodelskin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_materialcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_ambient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_diffuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_specular_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_ambient_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_diffuse_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_specular_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_materialcolor_colorpicker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_ambient_colorpicker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_diffuse_colorpicker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, solidlight_specular_colorpicker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_showterrain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_terrainmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_terrainanimatex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_terrainanimatey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, heightmapimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_terrainwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_terrainheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_showspaceship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, setting_generatespaceship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, lights_),
  };
  GUISettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GUISettings_descriptor_,
      GUISettings::default_instance_,
      GUISettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUISettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GUISettings));
  CameraSettings_descriptor_ = file->message_type(1);
  static const int CameraSettings_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, cameraposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, view_eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, view_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, view_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, positionz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, rotatex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, rotatey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, rotatez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, rotatecenterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, rotatecentery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, rotatecenterz_),
  };
  CameraSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraSettings_descriptor_,
      CameraSettings::default_instance_,
      CameraSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraSettings));
  GridSettings_descriptor_ = file->message_type(2);
  static const int GridSettings_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, actasmirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, gridsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, positionz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, rotatex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, rotatey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, rotatez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, scalex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, scaley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, scalez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, transparency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, showgrid_),
  };
  GridSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridSettings_descriptor_,
      GridSettings::default_instance_,
      GridSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridSettings));
  LightObject_descriptor_ = file->message_type(3);
  static const int LightObject_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, showlampobject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, showlampdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, showinwire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, positionz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, directionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, directiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, directionz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, scalex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, scaley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, scalez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, rotatex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, rotatey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, rotatez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, rotatecenterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, rotatecentery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, rotatecenterz_),
  };
  LightObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LightObject_descriptor_,
      LightObject::default_instance_,
      LightObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LightObject));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KuplungAppSettings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GUISettings_descriptor_, &GUISettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraSettings_descriptor_, &CameraSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridSettings_descriptor_, &GridSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LightObject_descriptor_, &LightObject::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KuplungAppSettings_2eproto() {
  delete GUISettings::default_instance_;
  delete GUISettings_reflection_;
  delete CameraSettings::default_instance_;
  delete CameraSettings_reflection_;
  delete GridSettings::default_instance_;
  delete GridSettings_reflection_;
  delete LightObject::default_instance_;
  delete LightObject_reflection_;
}

void protobuf_AddDesc_KuplungAppSettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KuplungApp::protobuf_AddDesc_KuplungDefinitions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030KuplungAppSettings.proto\022\nKuplungApp\032\030"
    "KuplungDefinitions.proto\"\272\014\n\013GUISettings"
    "\022\023\n\013Setting_FOV\030\001 \002(\002\022 \n\030Setting_Outline"
    "Thickness\030\002 \002(\002\022\032\n\022Setting_RatioWidth\030\003 "
    "\002(\002\022\033\n\023Setting_RatioHeight\030\004 \002(\002\022\032\n\022Sett"
    "ing_PlaneClose\030\005 \002(\002\022\030\n\020Setting_PlaneFar"
    "\030\006 \002(\002\022\030\n\020Setting_GridSize\030\007 \002(\005\022\026\n\016Sett"
    "ing_Skybox\030\010 \002(\005\022.\n\024Setting_OutlineColor"
    "\030\t \002(\0132\020.KuplungApp.Vec4\0220\n\026Setting_UIAm"
    "bientLight\030\n \002(\0132\020.KuplungApp.Vec3\022\036\n\026Se"
    "tting_FixedGridWorld\030\013 \002(\010\022&\n\036Setting_Ou"
    "tlineColorPickerOpen\030\014 \002(\010\022\037\n\027Setting_Sh"
    "owAxisHelpers\030\r \002(\010\022\032\n\022Settings_ShowZAxi"
    "s\030\016 \002(\010\022 \n\030Setting_DeferredTestMode\030\017 \002("
    "\010\022\"\n\032Setting_DeferredTestLights\030\020 \002(\010\022%\n"
    "\035Setting_LightingPass_DrawMode\030\021 \002(\005\022(\n "
    "Setting_DeferredTestLightsNumber\030\022 \002(\005\022\'"
    "\n\037Setting_DeferredAmbientStrength\030\023 \002(\002\022"
    "\025\n\rviewModelSkin\030\024 \002(\005\022.\n\024SolidLight_Dir"
    "ection\030\025 \002(\0132\020.KuplungApp.Vec3\0222\n\030SolidL"
    "ight_MaterialColor\030\026 \002(\0132\020.KuplungApp.Ve"
    "c3\022,\n\022SolidLight_Ambient\030\027 \002(\0132\020.Kuplung"
    "App.Vec3\022,\n\022SolidLight_Diffuse\030\030 \002(\0132\020.K"
    "uplungApp.Vec3\022-\n\023SolidLight_Specular\030\031 "
    "\002(\0132\020.KuplungApp.Vec3\022#\n\033SolidLight_Ambi"
    "ent_Strength\030\032 \002(\002\022#\n\033SolidLight_Diffuse"
    "_Strength\030\033 \002(\002\022$\n\034SolidLight_Specular_S"
    "trength\030\034 \002(\002\022,\n$SolidLight_MaterialColo"
    "r_ColorPicker\030\035 \002(\010\022&\n\036SolidLight_Ambien"
    "t_ColorPicker\030\036 \002(\010\022&\n\036SolidLight_Diffus"
    "e_ColorPicker\030\037 \002(\010\022\'\n\037SolidLight_Specul"
    "ar_ColorPicker\030  \002(\010\022\033\n\023Setting_ShowTerr"
    "ain\030! \002(\010\022\034\n\024Setting_TerrainModel\030\" \002(\010\022"
    "\037\n\027Setting_TerrainAnimateX\030# \002(\010\022\037\n\027Sett"
    "ing_TerrainAnimateY\030$ \002(\010\022\026\n\016heightmapIm"
    "age\030% \002(\t\022\034\n\024Setting_TerrainWidth\030& \002(\005\022"
    "\035\n\025Setting_TerrainHeight\030\' \002(\005\022\035\n\025Settin"
    "g_ShowSpaceship\030( \002(\010\022!\n\031Setting_Generat"
    "eSpaceship\030) \002(\010\022*\n\006camera\030* \002(\0132\032.Kuplu"
    "ngApp.CameraSettings\022&\n\004grid\030+ \002(\0132\030.Kup"
    "lungApp.GridSettings\022\'\n\006lights\030, \003(\0132\027.K"
    "uplungApp.LightObject\"\347\004\n\016CameraSettings"
    "\022(\n\016cameraPosition\030\001 \002(\0132\020.KuplungApp.Ve"
    "c3\022\"\n\010View_Eye\030\002 \002(\0132\020.KuplungApp.Vec3\022%"
    "\n\013View_Center\030\003 \002(\0132\020.KuplungApp.Vec3\022!\n"
    "\007View_Up\030\004 \002(\0132\020.KuplungApp.Vec3\022/\n\tposi"
    "tionX\030\005 \002(\0132\034.KuplungApp.ObjectCoordinat"
    "e\022/\n\tpositionY\030\006 \002(\0132\034.KuplungApp.Object"
    "Coordinate\022/\n\tpositionZ\030\007 \002(\0132\034.KuplungA"
    "pp.ObjectCoordinate\022-\n\007rotateX\030\010 \002(\0132\034.K"
    "uplungApp.ObjectCoordinate\022-\n\007rotateY\030\t "
    "\002(\0132\034.KuplungApp.ObjectCoordinate\022-\n\007rot"
    "ateZ\030\n \002(\0132\034.KuplungApp.ObjectCoordinate"
    "\0223\n\rrotateCenterX\030\013 \002(\0132\034.KuplungApp.Obj"
    "ectCoordinate\0223\n\rrotateCenterY\030\014 \002(\0132\034.K"
    "uplungApp.ObjectCoordinate\0223\n\rrotateCent"
    "erZ\030\r \002(\0132\034.KuplungApp.ObjectCoordinate\""
    "\207\004\n\014GridSettings\022\023\n\013actAsMirror\030\001 \002(\010\022\020\n"
    "\010gridSize\030\002 \002(\005\022/\n\tpositionX\030\003 \002(\0132\034.Kup"
    "lungApp.ObjectCoordinate\022/\n\tpositionY\030\004 "
    "\002(\0132\034.KuplungApp.ObjectCoordinate\022/\n\tpos"
    "itionZ\030\005 \002(\0132\034.KuplungApp.ObjectCoordina"
    "te\022-\n\007rotateX\030\006 \002(\0132\034.KuplungApp.ObjectC"
    "oordinate\022-\n\007rotateY\030\007 \002(\0132\034.KuplungApp."
    "ObjectCoordinate\022-\n\007rotateZ\030\010 \002(\0132\034.Kupl"
    "ungApp.ObjectCoordinate\022,\n\006scaleX\030\t \002(\0132"
    "\034.KuplungApp.ObjectCoordinate\022,\n\006scaleY\030"
    "\n \002(\0132\034.KuplungApp.ObjectCoordinate\022,\n\006s"
    "caleZ\030\013 \002(\0132\034.KuplungApp.ObjectCoordinat"
    "e\022\024\n\014transparency\030\014 \002(\002\022\020\n\010showGrid\030\r \002("
    "\005\"\345\006\n\013LightObject\022\r\n\005title\030\001 \002(\t\022\023\n\013desc"
    "ription\030\002 \002(\t\022\014\n\004type\030\003 \002(\005\022\026\n\016showLampO"
    "bject\030\004 \002(\010\022\031\n\021showLampDirection\030\005 \002(\010\022\022"
    "\n\nshowInWire\030\006 \002(\010\022/\n\tpositionX\030\007 \002(\0132\034."
    "KuplungApp.ObjectCoordinate\022/\n\tpositionY"
    "\030\010 \002(\0132\034.KuplungApp.ObjectCoordinate\022/\n\t"
    "positionZ\030\t \002(\0132\034.KuplungApp.ObjectCoord"
    "inate\0220\n\ndirectionX\030\n \002(\0132\034.KuplungApp.O"
    "bjectCoordinate\0220\n\ndirectionY\030\013 \002(\0132\034.Ku"
    "plungApp.ObjectCoordinate\0220\n\ndirectionZ\030"
    "\014 \002(\0132\034.KuplungApp.ObjectCoordinate\022,\n\006s"
    "caleX\030\r \002(\0132\034.KuplungApp.ObjectCoordinat"
    "e\022,\n\006scaleY\030\016 \002(\0132\034.KuplungApp.ObjectCoo"
    "rdinate\022,\n\006scaleZ\030\017 \002(\0132\034.KuplungApp.Obj"
    "ectCoordinate\022-\n\007rotateX\030\020 \002(\0132\034.Kuplung"
    "App.ObjectCoordinate\022-\n\007rotateY\030\021 \002(\0132\034."
    "KuplungApp.ObjectCoordinate\022-\n\007rotateZ\030\022"
    " \002(\0132\034.KuplungApp.ObjectCoordinate\0223\n\rro"
    "tateCenterX\030\023 \002(\0132\034.KuplungApp.ObjectCoo"
    "rdinate\0223\n\rrotateCenterY\030\024 \002(\0132\034.Kuplung"
    "App.ObjectCoordinate\0223\n\rrotateCenterZ\030\025 "
    "\002(\0132\034.KuplungApp.ObjectCoordinate", 3673);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KuplungAppSettings.proto", &protobuf_RegisterTypes);
  GUISettings::default_instance_ = new GUISettings();
  CameraSettings::default_instance_ = new CameraSettings();
  GridSettings::default_instance_ = new GridSettings();
  LightObject::default_instance_ = new LightObject();
  GUISettings::default_instance_->InitAsDefaultInstance();
  CameraSettings::default_instance_->InitAsDefaultInstance();
  GridSettings::default_instance_->InitAsDefaultInstance();
  LightObject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KuplungAppSettings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KuplungAppSettings_2eproto {
  StaticDescriptorInitializer_KuplungAppSettings_2eproto() {
    protobuf_AddDesc_KuplungAppSettings_2eproto();
  }
} static_descriptor_initializer_KuplungAppSettings_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GUISettings::kSettingFOVFieldNumber;
const int GUISettings::kSettingOutlineThicknessFieldNumber;
const int GUISettings::kSettingRatioWidthFieldNumber;
const int GUISettings::kSettingRatioHeightFieldNumber;
const int GUISettings::kSettingPlaneCloseFieldNumber;
const int GUISettings::kSettingPlaneFarFieldNumber;
const int GUISettings::kSettingGridSizeFieldNumber;
const int GUISettings::kSettingSkyboxFieldNumber;
const int GUISettings::kSettingOutlineColorFieldNumber;
const int GUISettings::kSettingUIAmbientLightFieldNumber;
const int GUISettings::kSettingFixedGridWorldFieldNumber;
const int GUISettings::kSettingOutlineColorPickerOpenFieldNumber;
const int GUISettings::kSettingShowAxisHelpersFieldNumber;
const int GUISettings::kSettingsShowZAxisFieldNumber;
const int GUISettings::kSettingDeferredTestModeFieldNumber;
const int GUISettings::kSettingDeferredTestLightsFieldNumber;
const int GUISettings::kSettingLightingPassDrawModeFieldNumber;
const int GUISettings::kSettingDeferredTestLightsNumberFieldNumber;
const int GUISettings::kSettingDeferredAmbientStrengthFieldNumber;
const int GUISettings::kViewModelSkinFieldNumber;
const int GUISettings::kSolidLightDirectionFieldNumber;
const int GUISettings::kSolidLightMaterialColorFieldNumber;
const int GUISettings::kSolidLightAmbientFieldNumber;
const int GUISettings::kSolidLightDiffuseFieldNumber;
const int GUISettings::kSolidLightSpecularFieldNumber;
const int GUISettings::kSolidLightAmbientStrengthFieldNumber;
const int GUISettings::kSolidLightDiffuseStrengthFieldNumber;
const int GUISettings::kSolidLightSpecularStrengthFieldNumber;
const int GUISettings::kSolidLightMaterialColorColorPickerFieldNumber;
const int GUISettings::kSolidLightAmbientColorPickerFieldNumber;
const int GUISettings::kSolidLightDiffuseColorPickerFieldNumber;
const int GUISettings::kSolidLightSpecularColorPickerFieldNumber;
const int GUISettings::kSettingShowTerrainFieldNumber;
const int GUISettings::kSettingTerrainModelFieldNumber;
const int GUISettings::kSettingTerrainAnimateXFieldNumber;
const int GUISettings::kSettingTerrainAnimateYFieldNumber;
const int GUISettings::kHeightmapImageFieldNumber;
const int GUISettings::kSettingTerrainWidthFieldNumber;
const int GUISettings::kSettingTerrainHeightFieldNumber;
const int GUISettings::kSettingShowSpaceshipFieldNumber;
const int GUISettings::kSettingGenerateSpaceshipFieldNumber;
const int GUISettings::kCameraFieldNumber;
const int GUISettings::kGridFieldNumber;
const int GUISettings::kLightsFieldNumber;
#endif  // !_MSC_VER

GUISettings::GUISettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.GUISettings)
}

void GUISettings::InitAsDefaultInstance() {
  setting_outlinecolor_ = const_cast< ::KuplungApp::Vec4*>(&::KuplungApp::Vec4::default_instance());
  setting_uiambientlight_ = const_cast< ::KuplungApp::Vec3*>(&::KuplungApp::Vec3::default_instance());
  solidlight_direction_ = const_cast< ::KuplungApp::Vec3*>(&::KuplungApp::Vec3::default_instance());
  solidlight_materialcolor_ = const_cast< ::KuplungApp::Vec3*>(&::KuplungApp::Vec3::default_instance());
  solidlight_ambient_ = const_cast< ::KuplungApp::Vec3*>(&::KuplungApp::Vec3::default_instance());
  solidlight_diffuse_ = const_cast< ::KuplungApp::Vec3*>(&::KuplungApp::Vec3::default_instance());
  solidlight_specular_ = const_cast< ::KuplungApp::Vec3*>(&::KuplungApp::Vec3::default_instance());
  camera_ = const_cast< ::KuplungApp::CameraSettings*>(&::KuplungApp::CameraSettings::default_instance());
  grid_ = const_cast< ::KuplungApp::GridSettings*>(&::KuplungApp::GridSettings::default_instance());
}

GUISettings::GUISettings(const GUISettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KuplungApp.GUISettings)
}

void GUISettings::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  setting_fov_ = 0;
  setting_outlinethickness_ = 0;
  setting_ratiowidth_ = 0;
  setting_ratioheight_ = 0;
  setting_planeclose_ = 0;
  setting_planefar_ = 0;
  setting_gridsize_ = 0;
  setting_skybox_ = 0;
  setting_outlinecolor_ = NULL;
  setting_uiambientlight_ = NULL;
  setting_fixedgridworld_ = false;
  setting_outlinecolorpickeropen_ = false;
  setting_showaxishelpers_ = false;
  settings_showzaxis_ = false;
  setting_deferredtestmode_ = false;
  setting_deferredtestlights_ = false;
  setting_lightingpass_drawmode_ = 0;
  setting_deferredtestlightsnumber_ = 0;
  setting_deferredambientstrength_ = 0;
  viewmodelskin_ = 0;
  solidlight_direction_ = NULL;
  solidlight_materialcolor_ = NULL;
  solidlight_ambient_ = NULL;
  solidlight_diffuse_ = NULL;
  solidlight_specular_ = NULL;
  solidlight_ambient_strength_ = 0;
  solidlight_diffuse_strength_ = 0;
  solidlight_specular_strength_ = 0;
  solidlight_materialcolor_colorpicker_ = false;
  solidlight_ambient_colorpicker_ = false;
  solidlight_diffuse_colorpicker_ = false;
  solidlight_specular_colorpicker_ = false;
  setting_showterrain_ = false;
  setting_terrainmodel_ = false;
  setting_terrainanimatex_ = false;
  setting_terrainanimatey_ = false;
  heightmapimage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  setting_terrainwidth_ = 0;
  setting_terrainheight_ = 0;
  setting_showspaceship_ = false;
  setting_generatespaceship_ = false;
  camera_ = NULL;
  grid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GUISettings::~GUISettings() {
  // @@protoc_insertion_point(destructor:KuplungApp.GUISettings)
  SharedDtor();
}

void GUISettings::SharedDtor() {
  if (heightmapimage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete heightmapimage_;
  }
  if (this != default_instance_) {
    delete setting_outlinecolor_;
    delete setting_uiambientlight_;
    delete solidlight_direction_;
    delete solidlight_materialcolor_;
    delete solidlight_ambient_;
    delete solidlight_diffuse_;
    delete solidlight_specular_;
    delete camera_;
    delete grid_;
  }
}

void GUISettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GUISettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GUISettings_descriptor_;
}

const GUISettings& GUISettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KuplungAppSettings_2eproto();
  return *default_instance_;
}

GUISettings* GUISettings::default_instance_ = NULL;

GUISettings* GUISettings::New() const {
  return new GUISettings;
}

void GUISettings::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GUISettings*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(setting_fov_, setting_skybox_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(setting_fixedgridworld_, settings_showzaxis_);
    ZR_(setting_deferredtestmode_, setting_deferredtestlights_);
    if (has_setting_outlinecolor()) {
      if (setting_outlinecolor_ != NULL) setting_outlinecolor_->::KuplungApp::Vec4::Clear();
    }
    if (has_setting_uiambientlight()) {
      if (setting_uiambientlight_ != NULL) setting_uiambientlight_->::KuplungApp::Vec3::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(setting_lightingpass_drawmode_, setting_deferredambientstrength_);
    viewmodelskin_ = 0;
    if (has_solidlight_direction()) {
      if (solidlight_direction_ != NULL) solidlight_direction_->::KuplungApp::Vec3::Clear();
    }
    if (has_solidlight_materialcolor()) {
      if (solidlight_materialcolor_ != NULL) solidlight_materialcolor_->::KuplungApp::Vec3::Clear();
    }
    if (has_solidlight_ambient()) {
      if (solidlight_ambient_ != NULL) solidlight_ambient_->::KuplungApp::Vec3::Clear();
    }
    if (has_solidlight_diffuse()) {
      if (solidlight_diffuse_ != NULL) solidlight_diffuse_->::KuplungApp::Vec3::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(solidlight_materialcolor_colorpicker_, solidlight_ambient_colorpicker_);
    ZR_(solidlight_ambient_strength_, solidlight_specular_colorpicker_);
    if (has_solidlight_specular()) {
      if (solidlight_specular_ != NULL) solidlight_specular_->::KuplungApp::Vec3::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(setting_showterrain_, setting_terrainmodel_);
    ZR_(setting_terrainwidth_, setting_showspaceship_);
    if (has_heightmapimage()) {
      if (heightmapimage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        heightmapimage_->clear();
      }
    }
    setting_terrainheight_ = 0;
  }
  if (_has_bits_[40 / 32] & 1792) {
    setting_generatespaceship_ = false;
    if (has_camera()) {
      if (camera_ != NULL) camera_->::KuplungApp::CameraSettings::Clear();
    }
    if (has_grid()) {
      if (grid_ != NULL) grid_->::KuplungApp::GridSettings::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  lights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GUISettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.GUISettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float Setting_FOV = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_fov_)));
          set_has_setting_fov();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Setting_OutlineThickness;
        break;
      }

      // required float Setting_OutlineThickness = 2;
      case 2: {
        if (tag == 21) {
         parse_Setting_OutlineThickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_outlinethickness_)));
          set_has_setting_outlinethickness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Setting_RatioWidth;
        break;
      }

      // required float Setting_RatioWidth = 3;
      case 3: {
        if (tag == 29) {
         parse_Setting_RatioWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_ratiowidth_)));
          set_has_setting_ratiowidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_Setting_RatioHeight;
        break;
      }

      // required float Setting_RatioHeight = 4;
      case 4: {
        if (tag == 37) {
         parse_Setting_RatioHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_ratioheight_)));
          set_has_setting_ratioheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Setting_PlaneClose;
        break;
      }

      // required float Setting_PlaneClose = 5;
      case 5: {
        if (tag == 45) {
         parse_Setting_PlaneClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_planeclose_)));
          set_has_setting_planeclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_Setting_PlaneFar;
        break;
      }

      // required float Setting_PlaneFar = 6;
      case 6: {
        if (tag == 53) {
         parse_Setting_PlaneFar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_planefar_)));
          set_has_setting_planefar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Setting_GridSize;
        break;
      }

      // required int32 Setting_GridSize = 7;
      case 7: {
        if (tag == 56) {
         parse_Setting_GridSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_gridsize_)));
          set_has_setting_gridsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Setting_Skybox;
        break;
      }

      // required int32 Setting_Skybox = 8;
      case 8: {
        if (tag == 64) {
         parse_Setting_Skybox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_skybox_)));
          set_has_setting_skybox();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Setting_OutlineColor;
        break;
      }

      // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
      case 9: {
        if (tag == 74) {
         parse_Setting_OutlineColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting_outlinecolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Setting_UIAmbientLight;
        break;
      }

      // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
      case 10: {
        if (tag == 82) {
         parse_Setting_UIAmbientLight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting_uiambientlight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Setting_FixedGridWorld;
        break;
      }

      // required bool Setting_FixedGridWorld = 11;
      case 11: {
        if (tag == 88) {
         parse_Setting_FixedGridWorld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_fixedgridworld_)));
          set_has_setting_fixedgridworld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Setting_OutlineColorPickerOpen;
        break;
      }

      // required bool Setting_OutlineColorPickerOpen = 12;
      case 12: {
        if (tag == 96) {
         parse_Setting_OutlineColorPickerOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_outlinecolorpickeropen_)));
          set_has_setting_outlinecolorpickeropen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Setting_ShowAxisHelpers;
        break;
      }

      // required bool Setting_ShowAxisHelpers = 13;
      case 13: {
        if (tag == 104) {
         parse_Setting_ShowAxisHelpers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_showaxishelpers_)));
          set_has_setting_showaxishelpers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Settings_ShowZAxis;
        break;
      }

      // required bool Settings_ShowZAxis = 14;
      case 14: {
        if (tag == 112) {
         parse_Settings_ShowZAxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &settings_showzaxis_)));
          set_has_settings_showzaxis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_Setting_DeferredTestMode;
        break;
      }

      // required bool Setting_DeferredTestMode = 15;
      case 15: {
        if (tag == 120) {
         parse_Setting_DeferredTestMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_deferredtestmode_)));
          set_has_setting_deferredtestmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_Setting_DeferredTestLights;
        break;
      }

      // required bool Setting_DeferredTestLights = 16;
      case 16: {
        if (tag == 128) {
         parse_Setting_DeferredTestLights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_deferredtestlights_)));
          set_has_setting_deferredtestlights();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_Setting_LightingPass_DrawMode;
        break;
      }

      // required int32 Setting_LightingPass_DrawMode = 17;
      case 17: {
        if (tag == 136) {
         parse_Setting_LightingPass_DrawMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_lightingpass_drawmode_)));
          set_has_setting_lightingpass_drawmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_Setting_DeferredTestLightsNumber;
        break;
      }

      // required int32 Setting_DeferredTestLightsNumber = 18;
      case 18: {
        if (tag == 144) {
         parse_Setting_DeferredTestLightsNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_deferredtestlightsnumber_)));
          set_has_setting_deferredtestlightsnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_Setting_DeferredAmbientStrength;
        break;
      }

      // required float Setting_DeferredAmbientStrength = 19;
      case 19: {
        if (tag == 157) {
         parse_Setting_DeferredAmbientStrength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &setting_deferredambientstrength_)));
          set_has_setting_deferredambientstrength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_viewModelSkin;
        break;
      }

      // required int32 viewModelSkin = 20;
      case 20: {
        if (tag == 160) {
         parse_viewModelSkin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewmodelskin_)));
          set_has_viewmodelskin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_SolidLight_Direction;
        break;
      }

      // required .KuplungApp.Vec3 SolidLight_Direction = 21;
      case 21: {
        if (tag == 170) {
         parse_SolidLight_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solidlight_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_SolidLight_MaterialColor;
        break;
      }

      // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
      case 22: {
        if (tag == 178) {
         parse_SolidLight_MaterialColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solidlight_materialcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_SolidLight_Ambient;
        break;
      }

      // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
      case 23: {
        if (tag == 186) {
         parse_SolidLight_Ambient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solidlight_ambient()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_SolidLight_Diffuse;
        break;
      }

      // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
      case 24: {
        if (tag == 194) {
         parse_SolidLight_Diffuse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solidlight_diffuse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_SolidLight_Specular;
        break;
      }

      // required .KuplungApp.Vec3 SolidLight_Specular = 25;
      case 25: {
        if (tag == 202) {
         parse_SolidLight_Specular:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solidlight_specular()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_SolidLight_Ambient_Strength;
        break;
      }

      // required float SolidLight_Ambient_Strength = 26;
      case 26: {
        if (tag == 213) {
         parse_SolidLight_Ambient_Strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &solidlight_ambient_strength_)));
          set_has_solidlight_ambient_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_SolidLight_Diffuse_Strength;
        break;
      }

      // required float SolidLight_Diffuse_Strength = 27;
      case 27: {
        if (tag == 221) {
         parse_SolidLight_Diffuse_Strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &solidlight_diffuse_strength_)));
          set_has_solidlight_diffuse_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_SolidLight_Specular_Strength;
        break;
      }

      // required float SolidLight_Specular_Strength = 28;
      case 28: {
        if (tag == 229) {
         parse_SolidLight_Specular_Strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &solidlight_specular_strength_)));
          set_has_solidlight_specular_strength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_SolidLight_MaterialColor_ColorPicker;
        break;
      }

      // required bool SolidLight_MaterialColor_ColorPicker = 29;
      case 29: {
        if (tag == 232) {
         parse_SolidLight_MaterialColor_ColorPicker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solidlight_materialcolor_colorpicker_)));
          set_has_solidlight_materialcolor_colorpicker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_SolidLight_Ambient_ColorPicker;
        break;
      }

      // required bool SolidLight_Ambient_ColorPicker = 30;
      case 30: {
        if (tag == 240) {
         parse_SolidLight_Ambient_ColorPicker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solidlight_ambient_colorpicker_)));
          set_has_solidlight_ambient_colorpicker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_SolidLight_Diffuse_ColorPicker;
        break;
      }

      // required bool SolidLight_Diffuse_ColorPicker = 31;
      case 31: {
        if (tag == 248) {
         parse_SolidLight_Diffuse_ColorPicker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solidlight_diffuse_colorpicker_)));
          set_has_solidlight_diffuse_colorpicker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_SolidLight_Specular_ColorPicker;
        break;
      }

      // required bool SolidLight_Specular_ColorPicker = 32;
      case 32: {
        if (tag == 256) {
         parse_SolidLight_Specular_ColorPicker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solidlight_specular_colorpicker_)));
          set_has_solidlight_specular_colorpicker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_Setting_ShowTerrain;
        break;
      }

      // required bool Setting_ShowTerrain = 33;
      case 33: {
        if (tag == 264) {
         parse_Setting_ShowTerrain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_showterrain_)));
          set_has_setting_showterrain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_Setting_TerrainModel;
        break;
      }

      // required bool Setting_TerrainModel = 34;
      case 34: {
        if (tag == 272) {
         parse_Setting_TerrainModel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_terrainmodel_)));
          set_has_setting_terrainmodel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_Setting_TerrainAnimateX;
        break;
      }

      // required bool Setting_TerrainAnimateX = 35;
      case 35: {
        if (tag == 280) {
         parse_Setting_TerrainAnimateX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_terrainanimatex_)));
          set_has_setting_terrainanimatex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_Setting_TerrainAnimateY;
        break;
      }

      // required bool Setting_TerrainAnimateY = 36;
      case 36: {
        if (tag == 288) {
         parse_Setting_TerrainAnimateY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_terrainanimatey_)));
          set_has_setting_terrainanimatey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_heightmapImage;
        break;
      }

      // required string heightmapImage = 37;
      case 37: {
        if (tag == 298) {
         parse_heightmapImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heightmapimage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->heightmapimage().data(), this->heightmapimage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "heightmapimage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_Setting_TerrainWidth;
        break;
      }

      // required int32 Setting_TerrainWidth = 38;
      case 38: {
        if (tag == 304) {
         parse_Setting_TerrainWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_terrainwidth_)));
          set_has_setting_terrainwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_Setting_TerrainHeight;
        break;
      }

      // required int32 Setting_TerrainHeight = 39;
      case 39: {
        if (tag == 312) {
         parse_Setting_TerrainHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setting_terrainheight_)));
          set_has_setting_terrainheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_Setting_ShowSpaceship;
        break;
      }

      // required bool Setting_ShowSpaceship = 40;
      case 40: {
        if (tag == 320) {
         parse_Setting_ShowSpaceship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_showspaceship_)));
          set_has_setting_showspaceship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_Setting_GenerateSpaceship;
        break;
      }

      // required bool Setting_GenerateSpaceship = 41;
      case 41: {
        if (tag == 328) {
         parse_Setting_GenerateSpaceship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setting_generatespaceship_)));
          set_has_setting_generatespaceship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_camera;
        break;
      }

      // required .KuplungApp.CameraSettings camera = 42;
      case 42: {
        if (tag == 338) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_grid;
        break;
      }

      // required .KuplungApp.GridSettings grid = 43;
      case 43: {
        if (tag == 346) {
         parse_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_lights;
        break;
      }

      // repeated .KuplungApp.LightObject lights = 44;
      case 44: {
        if (tag == 354) {
         parse_lights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_lights;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.GUISettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.GUISettings)
  return false;
#undef DO_
}

void GUISettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.GUISettings)
  // required float Setting_FOV = 1;
  if (has_setting_fov()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->setting_fov(), output);
  }

  // required float Setting_OutlineThickness = 2;
  if (has_setting_outlinethickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->setting_outlinethickness(), output);
  }

  // required float Setting_RatioWidth = 3;
  if (has_setting_ratiowidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->setting_ratiowidth(), output);
  }

  // required float Setting_RatioHeight = 4;
  if (has_setting_ratioheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->setting_ratioheight(), output);
  }

  // required float Setting_PlaneClose = 5;
  if (has_setting_planeclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->setting_planeclose(), output);
  }

  // required float Setting_PlaneFar = 6;
  if (has_setting_planefar()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->setting_planefar(), output);
  }

  // required int32 Setting_GridSize = 7;
  if (has_setting_gridsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->setting_gridsize(), output);
  }

  // required int32 Setting_Skybox = 8;
  if (has_setting_skybox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->setting_skybox(), output);
  }

  // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
  if (has_setting_outlinecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->setting_outlinecolor(), output);
  }

  // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
  if (has_setting_uiambientlight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->setting_uiambientlight(), output);
  }

  // required bool Setting_FixedGridWorld = 11;
  if (has_setting_fixedgridworld()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->setting_fixedgridworld(), output);
  }

  // required bool Setting_OutlineColorPickerOpen = 12;
  if (has_setting_outlinecolorpickeropen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->setting_outlinecolorpickeropen(), output);
  }

  // required bool Setting_ShowAxisHelpers = 13;
  if (has_setting_showaxishelpers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->setting_showaxishelpers(), output);
  }

  // required bool Settings_ShowZAxis = 14;
  if (has_settings_showzaxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->settings_showzaxis(), output);
  }

  // required bool Setting_DeferredTestMode = 15;
  if (has_setting_deferredtestmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->setting_deferredtestmode(), output);
  }

  // required bool Setting_DeferredTestLights = 16;
  if (has_setting_deferredtestlights()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->setting_deferredtestlights(), output);
  }

  // required int32 Setting_LightingPass_DrawMode = 17;
  if (has_setting_lightingpass_drawmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->setting_lightingpass_drawmode(), output);
  }

  // required int32 Setting_DeferredTestLightsNumber = 18;
  if (has_setting_deferredtestlightsnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->setting_deferredtestlightsnumber(), output);
  }

  // required float Setting_DeferredAmbientStrength = 19;
  if (has_setting_deferredambientstrength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->setting_deferredambientstrength(), output);
  }

  // required int32 viewModelSkin = 20;
  if (has_viewmodelskin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->viewmodelskin(), output);
  }

  // required .KuplungApp.Vec3 SolidLight_Direction = 21;
  if (has_solidlight_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->solidlight_direction(), output);
  }

  // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
  if (has_solidlight_materialcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->solidlight_materialcolor(), output);
  }

  // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
  if (has_solidlight_ambient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->solidlight_ambient(), output);
  }

  // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
  if (has_solidlight_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->solidlight_diffuse(), output);
  }

  // required .KuplungApp.Vec3 SolidLight_Specular = 25;
  if (has_solidlight_specular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->solidlight_specular(), output);
  }

  // required float SolidLight_Ambient_Strength = 26;
  if (has_solidlight_ambient_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->solidlight_ambient_strength(), output);
  }

  // required float SolidLight_Diffuse_Strength = 27;
  if (has_solidlight_diffuse_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->solidlight_diffuse_strength(), output);
  }

  // required float SolidLight_Specular_Strength = 28;
  if (has_solidlight_specular_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->solidlight_specular_strength(), output);
  }

  // required bool SolidLight_MaterialColor_ColorPicker = 29;
  if (has_solidlight_materialcolor_colorpicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->solidlight_materialcolor_colorpicker(), output);
  }

  // required bool SolidLight_Ambient_ColorPicker = 30;
  if (has_solidlight_ambient_colorpicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->solidlight_ambient_colorpicker(), output);
  }

  // required bool SolidLight_Diffuse_ColorPicker = 31;
  if (has_solidlight_diffuse_colorpicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->solidlight_diffuse_colorpicker(), output);
  }

  // required bool SolidLight_Specular_ColorPicker = 32;
  if (has_solidlight_specular_colorpicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->solidlight_specular_colorpicker(), output);
  }

  // required bool Setting_ShowTerrain = 33;
  if (has_setting_showterrain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->setting_showterrain(), output);
  }

  // required bool Setting_TerrainModel = 34;
  if (has_setting_terrainmodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->setting_terrainmodel(), output);
  }

  // required bool Setting_TerrainAnimateX = 35;
  if (has_setting_terrainanimatex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->setting_terrainanimatex(), output);
  }

  // required bool Setting_TerrainAnimateY = 36;
  if (has_setting_terrainanimatey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->setting_terrainanimatey(), output);
  }

  // required string heightmapImage = 37;
  if (has_heightmapimage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heightmapimage().data(), this->heightmapimage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "heightmapimage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->heightmapimage(), output);
  }

  // required int32 Setting_TerrainWidth = 38;
  if (has_setting_terrainwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->setting_terrainwidth(), output);
  }

  // required int32 Setting_TerrainHeight = 39;
  if (has_setting_terrainheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->setting_terrainheight(), output);
  }

  // required bool Setting_ShowSpaceship = 40;
  if (has_setting_showspaceship()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->setting_showspaceship(), output);
  }

  // required bool Setting_GenerateSpaceship = 41;
  if (has_setting_generatespaceship()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->setting_generatespaceship(), output);
  }

  // required .KuplungApp.CameraSettings camera = 42;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->camera(), output);
  }

  // required .KuplungApp.GridSettings grid = 43;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->grid(), output);
  }

  // repeated .KuplungApp.LightObject lights = 44;
  for (int i = 0; i < this->lights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->lights(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.GUISettings)
}

::google::protobuf::uint8* GUISettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.GUISettings)
  // required float Setting_FOV = 1;
  if (has_setting_fov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->setting_fov(), target);
  }

  // required float Setting_OutlineThickness = 2;
  if (has_setting_outlinethickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->setting_outlinethickness(), target);
  }

  // required float Setting_RatioWidth = 3;
  if (has_setting_ratiowidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->setting_ratiowidth(), target);
  }

  // required float Setting_RatioHeight = 4;
  if (has_setting_ratioheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->setting_ratioheight(), target);
  }

  // required float Setting_PlaneClose = 5;
  if (has_setting_planeclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->setting_planeclose(), target);
  }

  // required float Setting_PlaneFar = 6;
  if (has_setting_planefar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->setting_planefar(), target);
  }

  // required int32 Setting_GridSize = 7;
  if (has_setting_gridsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->setting_gridsize(), target);
  }

  // required int32 Setting_Skybox = 8;
  if (has_setting_skybox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->setting_skybox(), target);
  }

  // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
  if (has_setting_outlinecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->setting_outlinecolor(), target);
  }

  // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
  if (has_setting_uiambientlight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->setting_uiambientlight(), target);
  }

  // required bool Setting_FixedGridWorld = 11;
  if (has_setting_fixedgridworld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->setting_fixedgridworld(), target);
  }

  // required bool Setting_OutlineColorPickerOpen = 12;
  if (has_setting_outlinecolorpickeropen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->setting_outlinecolorpickeropen(), target);
  }

  // required bool Setting_ShowAxisHelpers = 13;
  if (has_setting_showaxishelpers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->setting_showaxishelpers(), target);
  }

  // required bool Settings_ShowZAxis = 14;
  if (has_settings_showzaxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->settings_showzaxis(), target);
  }

  // required bool Setting_DeferredTestMode = 15;
  if (has_setting_deferredtestmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->setting_deferredtestmode(), target);
  }

  // required bool Setting_DeferredTestLights = 16;
  if (has_setting_deferredtestlights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->setting_deferredtestlights(), target);
  }

  // required int32 Setting_LightingPass_DrawMode = 17;
  if (has_setting_lightingpass_drawmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->setting_lightingpass_drawmode(), target);
  }

  // required int32 Setting_DeferredTestLightsNumber = 18;
  if (has_setting_deferredtestlightsnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->setting_deferredtestlightsnumber(), target);
  }

  // required float Setting_DeferredAmbientStrength = 19;
  if (has_setting_deferredambientstrength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->setting_deferredambientstrength(), target);
  }

  // required int32 viewModelSkin = 20;
  if (has_viewmodelskin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->viewmodelskin(), target);
  }

  // required .KuplungApp.Vec3 SolidLight_Direction = 21;
  if (has_solidlight_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->solidlight_direction(), target);
  }

  // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
  if (has_solidlight_materialcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->solidlight_materialcolor(), target);
  }

  // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
  if (has_solidlight_ambient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->solidlight_ambient(), target);
  }

  // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
  if (has_solidlight_diffuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->solidlight_diffuse(), target);
  }

  // required .KuplungApp.Vec3 SolidLight_Specular = 25;
  if (has_solidlight_specular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->solidlight_specular(), target);
  }

  // required float SolidLight_Ambient_Strength = 26;
  if (has_solidlight_ambient_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->solidlight_ambient_strength(), target);
  }

  // required float SolidLight_Diffuse_Strength = 27;
  if (has_solidlight_diffuse_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->solidlight_diffuse_strength(), target);
  }

  // required float SolidLight_Specular_Strength = 28;
  if (has_solidlight_specular_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->solidlight_specular_strength(), target);
  }

  // required bool SolidLight_MaterialColor_ColorPicker = 29;
  if (has_solidlight_materialcolor_colorpicker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->solidlight_materialcolor_colorpicker(), target);
  }

  // required bool SolidLight_Ambient_ColorPicker = 30;
  if (has_solidlight_ambient_colorpicker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->solidlight_ambient_colorpicker(), target);
  }

  // required bool SolidLight_Diffuse_ColorPicker = 31;
  if (has_solidlight_diffuse_colorpicker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->solidlight_diffuse_colorpicker(), target);
  }

  // required bool SolidLight_Specular_ColorPicker = 32;
  if (has_solidlight_specular_colorpicker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->solidlight_specular_colorpicker(), target);
  }

  // required bool Setting_ShowTerrain = 33;
  if (has_setting_showterrain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->setting_showterrain(), target);
  }

  // required bool Setting_TerrainModel = 34;
  if (has_setting_terrainmodel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->setting_terrainmodel(), target);
  }

  // required bool Setting_TerrainAnimateX = 35;
  if (has_setting_terrainanimatex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->setting_terrainanimatex(), target);
  }

  // required bool Setting_TerrainAnimateY = 36;
  if (has_setting_terrainanimatey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->setting_terrainanimatey(), target);
  }

  // required string heightmapImage = 37;
  if (has_heightmapimage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heightmapimage().data(), this->heightmapimage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "heightmapimage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->heightmapimage(), target);
  }

  // required int32 Setting_TerrainWidth = 38;
  if (has_setting_terrainwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->setting_terrainwidth(), target);
  }

  // required int32 Setting_TerrainHeight = 39;
  if (has_setting_terrainheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->setting_terrainheight(), target);
  }

  // required bool Setting_ShowSpaceship = 40;
  if (has_setting_showspaceship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->setting_showspaceship(), target);
  }

  // required bool Setting_GenerateSpaceship = 41;
  if (has_setting_generatespaceship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->setting_generatespaceship(), target);
  }

  // required .KuplungApp.CameraSettings camera = 42;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->camera(), target);
  }

  // required .KuplungApp.GridSettings grid = 43;
  if (has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->grid(), target);
  }

  // repeated .KuplungApp.LightObject lights = 44;
  for (int i = 0; i < this->lights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->lights(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.GUISettings)
  return target;
}

int GUISettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float Setting_FOV = 1;
    if (has_setting_fov()) {
      total_size += 1 + 4;
    }

    // required float Setting_OutlineThickness = 2;
    if (has_setting_outlinethickness()) {
      total_size += 1 + 4;
    }

    // required float Setting_RatioWidth = 3;
    if (has_setting_ratiowidth()) {
      total_size += 1 + 4;
    }

    // required float Setting_RatioHeight = 4;
    if (has_setting_ratioheight()) {
      total_size += 1 + 4;
    }

    // required float Setting_PlaneClose = 5;
    if (has_setting_planeclose()) {
      total_size += 1 + 4;
    }

    // required float Setting_PlaneFar = 6;
    if (has_setting_planefar()) {
      total_size += 1 + 4;
    }

    // required int32 Setting_GridSize = 7;
    if (has_setting_gridsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setting_gridsize());
    }

    // required int32 Setting_Skybox = 8;
    if (has_setting_skybox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setting_skybox());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .KuplungApp.Vec4 Setting_OutlineColor = 9;
    if (has_setting_outlinecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setting_outlinecolor());
    }

    // required .KuplungApp.Vec3 Setting_UIAmbientLight = 10;
    if (has_setting_uiambientlight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setting_uiambientlight());
    }

    // required bool Setting_FixedGridWorld = 11;
    if (has_setting_fixedgridworld()) {
      total_size += 1 + 1;
    }

    // required bool Setting_OutlineColorPickerOpen = 12;
    if (has_setting_outlinecolorpickeropen()) {
      total_size += 1 + 1;
    }

    // required bool Setting_ShowAxisHelpers = 13;
    if (has_setting_showaxishelpers()) {
      total_size += 1 + 1;
    }

    // required bool Settings_ShowZAxis = 14;
    if (has_settings_showzaxis()) {
      total_size += 1 + 1;
    }

    // required bool Setting_DeferredTestMode = 15;
    if (has_setting_deferredtestmode()) {
      total_size += 1 + 1;
    }

    // required bool Setting_DeferredTestLights = 16;
    if (has_setting_deferredtestlights()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 Setting_LightingPass_DrawMode = 17;
    if (has_setting_lightingpass_drawmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setting_lightingpass_drawmode());
    }

    // required int32 Setting_DeferredTestLightsNumber = 18;
    if (has_setting_deferredtestlightsnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setting_deferredtestlightsnumber());
    }

    // required float Setting_DeferredAmbientStrength = 19;
    if (has_setting_deferredambientstrength()) {
      total_size += 2 + 4;
    }

    // required int32 viewModelSkin = 20;
    if (has_viewmodelskin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewmodelskin());
    }

    // required .KuplungApp.Vec3 SolidLight_Direction = 21;
    if (has_solidlight_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solidlight_direction());
    }

    // required .KuplungApp.Vec3 SolidLight_MaterialColor = 22;
    if (has_solidlight_materialcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solidlight_materialcolor());
    }

    // required .KuplungApp.Vec3 SolidLight_Ambient = 23;
    if (has_solidlight_ambient()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solidlight_ambient());
    }

    // required .KuplungApp.Vec3 SolidLight_Diffuse = 24;
    if (has_solidlight_diffuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solidlight_diffuse());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required .KuplungApp.Vec3 SolidLight_Specular = 25;
    if (has_solidlight_specular()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solidlight_specular());
    }

    // required float SolidLight_Ambient_Strength = 26;
    if (has_solidlight_ambient_strength()) {
      total_size += 2 + 4;
    }

    // required float SolidLight_Diffuse_Strength = 27;
    if (has_solidlight_diffuse_strength()) {
      total_size += 2 + 4;
    }

    // required float SolidLight_Specular_Strength = 28;
    if (has_solidlight_specular_strength()) {
      total_size += 2 + 4;
    }

    // required bool SolidLight_MaterialColor_ColorPicker = 29;
    if (has_solidlight_materialcolor_colorpicker()) {
      total_size += 2 + 1;
    }

    // required bool SolidLight_Ambient_ColorPicker = 30;
    if (has_solidlight_ambient_colorpicker()) {
      total_size += 2 + 1;
    }

    // required bool SolidLight_Diffuse_ColorPicker = 31;
    if (has_solidlight_diffuse_colorpicker()) {
      total_size += 2 + 1;
    }

    // required bool SolidLight_Specular_ColorPicker = 32;
    if (has_solidlight_specular_colorpicker()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required bool Setting_ShowTerrain = 33;
    if (has_setting_showterrain()) {
      total_size += 2 + 1;
    }

    // required bool Setting_TerrainModel = 34;
    if (has_setting_terrainmodel()) {
      total_size += 2 + 1;
    }

    // required bool Setting_TerrainAnimateX = 35;
    if (has_setting_terrainanimatex()) {
      total_size += 2 + 1;
    }

    // required bool Setting_TerrainAnimateY = 36;
    if (has_setting_terrainanimatey()) {
      total_size += 2 + 1;
    }

    // required string heightmapImage = 37;
    if (has_heightmapimage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->heightmapimage());
    }

    // required int32 Setting_TerrainWidth = 38;
    if (has_setting_terrainwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setting_terrainwidth());
    }

    // required int32 Setting_TerrainHeight = 39;
    if (has_setting_terrainheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setting_terrainheight());
    }

    // required bool Setting_ShowSpaceship = 40;
    if (has_setting_showspaceship()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required bool Setting_GenerateSpaceship = 41;
    if (has_setting_generatespaceship()) {
      total_size += 2 + 1;
    }

    // required .KuplungApp.CameraSettings camera = 42;
    if (has_camera()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera());
    }

    // required .KuplungApp.GridSettings grid = 43;
    if (has_grid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grid());
    }

  }
  // repeated .KuplungApp.LightObject lights = 44;
  total_size += 2 * this->lights_size();
  for (int i = 0; i < this->lights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lights(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GUISettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GUISettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GUISettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GUISettings::MergeFrom(const GUISettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  lights_.MergeFrom(from.lights_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_setting_fov()) {
      set_setting_fov(from.setting_fov());
    }
    if (from.has_setting_outlinethickness()) {
      set_setting_outlinethickness(from.setting_outlinethickness());
    }
    if (from.has_setting_ratiowidth()) {
      set_setting_ratiowidth(from.setting_ratiowidth());
    }
    if (from.has_setting_ratioheight()) {
      set_setting_ratioheight(from.setting_ratioheight());
    }
    if (from.has_setting_planeclose()) {
      set_setting_planeclose(from.setting_planeclose());
    }
    if (from.has_setting_planefar()) {
      set_setting_planefar(from.setting_planefar());
    }
    if (from.has_setting_gridsize()) {
      set_setting_gridsize(from.setting_gridsize());
    }
    if (from.has_setting_skybox()) {
      set_setting_skybox(from.setting_skybox());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_setting_outlinecolor()) {
      mutable_setting_outlinecolor()->::KuplungApp::Vec4::MergeFrom(from.setting_outlinecolor());
    }
    if (from.has_setting_uiambientlight()) {
      mutable_setting_uiambientlight()->::KuplungApp::Vec3::MergeFrom(from.setting_uiambientlight());
    }
    if (from.has_setting_fixedgridworld()) {
      set_setting_fixedgridworld(from.setting_fixedgridworld());
    }
    if (from.has_setting_outlinecolorpickeropen()) {
      set_setting_outlinecolorpickeropen(from.setting_outlinecolorpickeropen());
    }
    if (from.has_setting_showaxishelpers()) {
      set_setting_showaxishelpers(from.setting_showaxishelpers());
    }
    if (from.has_settings_showzaxis()) {
      set_settings_showzaxis(from.settings_showzaxis());
    }
    if (from.has_setting_deferredtestmode()) {
      set_setting_deferredtestmode(from.setting_deferredtestmode());
    }
    if (from.has_setting_deferredtestlights()) {
      set_setting_deferredtestlights(from.setting_deferredtestlights());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_setting_lightingpass_drawmode()) {
      set_setting_lightingpass_drawmode(from.setting_lightingpass_drawmode());
    }
    if (from.has_setting_deferredtestlightsnumber()) {
      set_setting_deferredtestlightsnumber(from.setting_deferredtestlightsnumber());
    }
    if (from.has_setting_deferredambientstrength()) {
      set_setting_deferredambientstrength(from.setting_deferredambientstrength());
    }
    if (from.has_viewmodelskin()) {
      set_viewmodelskin(from.viewmodelskin());
    }
    if (from.has_solidlight_direction()) {
      mutable_solidlight_direction()->::KuplungApp::Vec3::MergeFrom(from.solidlight_direction());
    }
    if (from.has_solidlight_materialcolor()) {
      mutable_solidlight_materialcolor()->::KuplungApp::Vec3::MergeFrom(from.solidlight_materialcolor());
    }
    if (from.has_solidlight_ambient()) {
      mutable_solidlight_ambient()->::KuplungApp::Vec3::MergeFrom(from.solidlight_ambient());
    }
    if (from.has_solidlight_diffuse()) {
      mutable_solidlight_diffuse()->::KuplungApp::Vec3::MergeFrom(from.solidlight_diffuse());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_solidlight_specular()) {
      mutable_solidlight_specular()->::KuplungApp::Vec3::MergeFrom(from.solidlight_specular());
    }
    if (from.has_solidlight_ambient_strength()) {
      set_solidlight_ambient_strength(from.solidlight_ambient_strength());
    }
    if (from.has_solidlight_diffuse_strength()) {
      set_solidlight_diffuse_strength(from.solidlight_diffuse_strength());
    }
    if (from.has_solidlight_specular_strength()) {
      set_solidlight_specular_strength(from.solidlight_specular_strength());
    }
    if (from.has_solidlight_materialcolor_colorpicker()) {
      set_solidlight_materialcolor_colorpicker(from.solidlight_materialcolor_colorpicker());
    }
    if (from.has_solidlight_ambient_colorpicker()) {
      set_solidlight_ambient_colorpicker(from.solidlight_ambient_colorpicker());
    }
    if (from.has_solidlight_diffuse_colorpicker()) {
      set_solidlight_diffuse_colorpicker(from.solidlight_diffuse_colorpicker());
    }
    if (from.has_solidlight_specular_colorpicker()) {
      set_solidlight_specular_colorpicker(from.solidlight_specular_colorpicker());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_setting_showterrain()) {
      set_setting_showterrain(from.setting_showterrain());
    }
    if (from.has_setting_terrainmodel()) {
      set_setting_terrainmodel(from.setting_terrainmodel());
    }
    if (from.has_setting_terrainanimatex()) {
      set_setting_terrainanimatex(from.setting_terrainanimatex());
    }
    if (from.has_setting_terrainanimatey()) {
      set_setting_terrainanimatey(from.setting_terrainanimatey());
    }
    if (from.has_heightmapimage()) {
      set_heightmapimage(from.heightmapimage());
    }
    if (from.has_setting_terrainwidth()) {
      set_setting_terrainwidth(from.setting_terrainwidth());
    }
    if (from.has_setting_terrainheight()) {
      set_setting_terrainheight(from.setting_terrainheight());
    }
    if (from.has_setting_showspaceship()) {
      set_setting_showspaceship(from.setting_showspaceship());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_setting_generatespaceship()) {
      set_setting_generatespaceship(from.setting_generatespaceship());
    }
    if (from.has_camera()) {
      mutable_camera()->::KuplungApp::CameraSettings::MergeFrom(from.camera());
    }
    if (from.has_grid()) {
      mutable_grid()->::KuplungApp::GridSettings::MergeFrom(from.grid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GUISettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUISettings::CopyFrom(const GUISettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUISettings::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000007ff) != 0x000007ff) return false;

  if (has_setting_outlinecolor()) {
    if (!this->setting_outlinecolor().IsInitialized()) return false;
  }
  if (has_setting_uiambientlight()) {
    if (!this->setting_uiambientlight().IsInitialized()) return false;
  }
  if (has_solidlight_direction()) {
    if (!this->solidlight_direction().IsInitialized()) return false;
  }
  if (has_solidlight_materialcolor()) {
    if (!this->solidlight_materialcolor().IsInitialized()) return false;
  }
  if (has_solidlight_ambient()) {
    if (!this->solidlight_ambient().IsInitialized()) return false;
  }
  if (has_solidlight_diffuse()) {
    if (!this->solidlight_diffuse().IsInitialized()) return false;
  }
  if (has_solidlight_specular()) {
    if (!this->solidlight_specular().IsInitialized()) return false;
  }
  if (has_camera()) {
    if (!this->camera().IsInitialized()) return false;
  }
  if (has_grid()) {
    if (!this->grid().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->lights())) return false;
  return true;
}

void GUISettings::Swap(GUISettings* other) {
  if (other != this) {
    std::swap(setting_fov_, other->setting_fov_);
    std::swap(setting_outlinethickness_, other->setting_outlinethickness_);
    std::swap(setting_ratiowidth_, other->setting_ratiowidth_);
    std::swap(setting_ratioheight_, other->setting_ratioheight_);
    std::swap(setting_planeclose_, other->setting_planeclose_);
    std::swap(setting_planefar_, other->setting_planefar_);
    std::swap(setting_gridsize_, other->setting_gridsize_);
    std::swap(setting_skybox_, other->setting_skybox_);
    std::swap(setting_outlinecolor_, other->setting_outlinecolor_);
    std::swap(setting_uiambientlight_, other->setting_uiambientlight_);
    std::swap(setting_fixedgridworld_, other->setting_fixedgridworld_);
    std::swap(setting_outlinecolorpickeropen_, other->setting_outlinecolorpickeropen_);
    std::swap(setting_showaxishelpers_, other->setting_showaxishelpers_);
    std::swap(settings_showzaxis_, other->settings_showzaxis_);
    std::swap(setting_deferredtestmode_, other->setting_deferredtestmode_);
    std::swap(setting_deferredtestlights_, other->setting_deferredtestlights_);
    std::swap(setting_lightingpass_drawmode_, other->setting_lightingpass_drawmode_);
    std::swap(setting_deferredtestlightsnumber_, other->setting_deferredtestlightsnumber_);
    std::swap(setting_deferredambientstrength_, other->setting_deferredambientstrength_);
    std::swap(viewmodelskin_, other->viewmodelskin_);
    std::swap(solidlight_direction_, other->solidlight_direction_);
    std::swap(solidlight_materialcolor_, other->solidlight_materialcolor_);
    std::swap(solidlight_ambient_, other->solidlight_ambient_);
    std::swap(solidlight_diffuse_, other->solidlight_diffuse_);
    std::swap(solidlight_specular_, other->solidlight_specular_);
    std::swap(solidlight_ambient_strength_, other->solidlight_ambient_strength_);
    std::swap(solidlight_diffuse_strength_, other->solidlight_diffuse_strength_);
    std::swap(solidlight_specular_strength_, other->solidlight_specular_strength_);
    std::swap(solidlight_materialcolor_colorpicker_, other->solidlight_materialcolor_colorpicker_);
    std::swap(solidlight_ambient_colorpicker_, other->solidlight_ambient_colorpicker_);
    std::swap(solidlight_diffuse_colorpicker_, other->solidlight_diffuse_colorpicker_);
    std::swap(solidlight_specular_colorpicker_, other->solidlight_specular_colorpicker_);
    std::swap(setting_showterrain_, other->setting_showterrain_);
    std::swap(setting_terrainmodel_, other->setting_terrainmodel_);
    std::swap(setting_terrainanimatex_, other->setting_terrainanimatex_);
    std::swap(setting_terrainanimatey_, other->setting_terrainanimatey_);
    std::swap(heightmapimage_, other->heightmapimage_);
    std::swap(setting_terrainwidth_, other->setting_terrainwidth_);
    std::swap(setting_terrainheight_, other->setting_terrainheight_);
    std::swap(setting_showspaceship_, other->setting_showspaceship_);
    std::swap(setting_generatespaceship_, other->setting_generatespaceship_);
    std::swap(camera_, other->camera_);
    std::swap(grid_, other->grid_);
    lights_.Swap(&other->lights_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GUISettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GUISettings_descriptor_;
  metadata.reflection = GUISettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraSettings::kCameraPositionFieldNumber;
const int CameraSettings::kViewEyeFieldNumber;
const int CameraSettings::kViewCenterFieldNumber;
const int CameraSettings::kViewUpFieldNumber;
const int CameraSettings::kPositionXFieldNumber;
const int CameraSettings::kPositionYFieldNumber;
const int CameraSettings::kPositionZFieldNumber;
const int CameraSettings::kRotateXFieldNumber;
const int CameraSettings::kRotateYFieldNumber;
const int CameraSettings::kRotateZFieldNumber;
const int CameraSettings::kRotateCenterXFieldNumber;
const int CameraSettings::kRotateCenterYFieldNumber;
const int CameraSettings::kRotateCenterZFieldNumber;
#endif  // !_MSC_VER

CameraSettings::CameraSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.CameraSettings)
}

void CameraSettings::InitAsDefaultInstance() {
  cameraposition_ = const_cast< ::KuplungApp::Vec3*>(&::KuplungApp::Vec3::default_instance());
  view_eye_ = const_cast< ::KuplungApp::Vec3*>(&::KuplungApp::Vec3::default_instance());
  view_center_ = const_cast< ::KuplungApp::Vec3*>(&::KuplungApp::Vec3::default_instance());
  view_up_ = const_cast< ::KuplungApp::Vec3*>(&::KuplungApp::Vec3::default_instance());
  positionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  positiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  positionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatecenterx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatecentery_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatecenterz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
}

CameraSettings::CameraSettings(const CameraSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KuplungApp.CameraSettings)
}

void CameraSettings::SharedCtor() {
  _cached_size_ = 0;
  cameraposition_ = NULL;
  view_eye_ = NULL;
  view_center_ = NULL;
  view_up_ = NULL;
  positionx_ = NULL;
  positiony_ = NULL;
  positionz_ = NULL;
  rotatex_ = NULL;
  rotatey_ = NULL;
  rotatez_ = NULL;
  rotatecenterx_ = NULL;
  rotatecentery_ = NULL;
  rotatecenterz_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraSettings::~CameraSettings() {
  // @@protoc_insertion_point(destructor:KuplungApp.CameraSettings)
  SharedDtor();
}

void CameraSettings::SharedDtor() {
  if (this != default_instance_) {
    delete cameraposition_;
    delete view_eye_;
    delete view_center_;
    delete view_up_;
    delete positionx_;
    delete positiony_;
    delete positionz_;
    delete rotatex_;
    delete rotatey_;
    delete rotatez_;
    delete rotatecenterx_;
    delete rotatecentery_;
    delete rotatecenterz_;
  }
}

void CameraSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraSettings_descriptor_;
}

const CameraSettings& CameraSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KuplungAppSettings_2eproto();
  return *default_instance_;
}

CameraSettings* CameraSettings::default_instance_ = NULL;

CameraSettings* CameraSettings::New() const {
  return new CameraSettings;
}

void CameraSettings::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_cameraposition()) {
      if (cameraposition_ != NULL) cameraposition_->::KuplungApp::Vec3::Clear();
    }
    if (has_view_eye()) {
      if (view_eye_ != NULL) view_eye_->::KuplungApp::Vec3::Clear();
    }
    if (has_view_center()) {
      if (view_center_ != NULL) view_center_->::KuplungApp::Vec3::Clear();
    }
    if (has_view_up()) {
      if (view_up_ != NULL) view_up_->::KuplungApp::Vec3::Clear();
    }
    if (has_positionx()) {
      if (positionx_ != NULL) positionx_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_positiony()) {
      if (positiony_ != NULL) positiony_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_positionz()) {
      if (positionz_ != NULL) positionz_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatex()) {
      if (rotatex_ != NULL) rotatex_->::KuplungApp::ObjectCoordinate::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_rotatey()) {
      if (rotatey_ != NULL) rotatey_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatez()) {
      if (rotatez_ != NULL) rotatez_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatecenterx()) {
      if (rotatecenterx_ != NULL) rotatecenterx_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatecentery()) {
      if (rotatecentery_ != NULL) rotatecentery_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatecenterz()) {
      if (rotatecenterz_ != NULL) rotatecenterz_->::KuplungApp::ObjectCoordinate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.CameraSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KuplungApp.Vec3 cameraPosition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_View_Eye;
        break;
      }

      // required .KuplungApp.Vec3 View_Eye = 2;
      case 2: {
        if (tag == 18) {
         parse_View_Eye:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_eye()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_View_Center;
        break;
      }

      // required .KuplungApp.Vec3 View_Center = 3;
      case 3: {
        if (tag == 26) {
         parse_View_Center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_View_Up;
        break;
      }

      // required .KuplungApp.Vec3 View_Up = 4;
      case 4: {
        if (tag == 34) {
         parse_View_Up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_up()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_positionX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionX = 5;
      case 5: {
        if (tag == 42) {
         parse_positionX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_positionY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionY = 6;
      case 6: {
        if (tag == 50) {
         parse_positionY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positiony()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_positionZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionZ = 7;
      case 7: {
        if (tag == 58) {
         parse_positionZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionz()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rotateX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateX = 8;
      case 8: {
        if (tag == 66) {
         parse_rotateX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rotateY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateY = 9;
      case 9: {
        if (tag == 74) {
         parse_rotateY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rotateZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateZ = 10;
      case 10: {
        if (tag == 82) {
         parse_rotateZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatez()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_rotateCenterX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
      case 11: {
        if (tag == 90) {
         parse_rotateCenterX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatecenterx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_rotateCenterY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
      case 12: {
        if (tag == 98) {
         parse_rotateCenterY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatecentery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_rotateCenterZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
      case 13: {
        if (tag == 106) {
         parse_rotateCenterZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatecenterz()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.CameraSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.CameraSettings)
  return false;
#undef DO_
}

void CameraSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.CameraSettings)
  // required .KuplungApp.Vec3 cameraPosition = 1;
  if (has_cameraposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cameraposition(), output);
  }

  // required .KuplungApp.Vec3 View_Eye = 2;
  if (has_view_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->view_eye(), output);
  }

  // required .KuplungApp.Vec3 View_Center = 3;
  if (has_view_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->view_center(), output);
  }

  // required .KuplungApp.Vec3 View_Up = 4;
  if (has_view_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->view_up(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 5;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->positionx(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 6;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->positiony(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 7;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->positionz(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 8;
  if (has_rotatex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rotatex(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 9;
  if (has_rotatey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rotatey(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 10;
  if (has_rotatez()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rotatez(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
  if (has_rotatecenterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->rotatecenterx(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
  if (has_rotatecentery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->rotatecentery(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
  if (has_rotatecenterz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->rotatecenterz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.CameraSettings)
}

::google::protobuf::uint8* CameraSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.CameraSettings)
  // required .KuplungApp.Vec3 cameraPosition = 1;
  if (has_cameraposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cameraposition(), target);
  }

  // required .KuplungApp.Vec3 View_Eye = 2;
  if (has_view_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->view_eye(), target);
  }

  // required .KuplungApp.Vec3 View_Center = 3;
  if (has_view_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->view_center(), target);
  }

  // required .KuplungApp.Vec3 View_Up = 4;
  if (has_view_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->view_up(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 5;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->positionx(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 6;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->positiony(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 7;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->positionz(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 8;
  if (has_rotatex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rotatex(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 9;
  if (has_rotatey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rotatey(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 10;
  if (has_rotatez()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rotatez(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
  if (has_rotatecenterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->rotatecenterx(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
  if (has_rotatecentery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->rotatecentery(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
  if (has_rotatecenterz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->rotatecenterz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.CameraSettings)
  return target;
}

int CameraSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KuplungApp.Vec3 cameraPosition = 1;
    if (has_cameraposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameraposition());
    }

    // required .KuplungApp.Vec3 View_Eye = 2;
    if (has_view_eye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view_eye());
    }

    // required .KuplungApp.Vec3 View_Center = 3;
    if (has_view_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view_center());
    }

    // required .KuplungApp.Vec3 View_Up = 4;
    if (has_view_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view_up());
    }

    // required .KuplungApp.ObjectCoordinate positionX = 5;
    if (has_positionx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positionx());
    }

    // required .KuplungApp.ObjectCoordinate positionY = 6;
    if (has_positiony()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positiony());
    }

    // required .KuplungApp.ObjectCoordinate positionZ = 7;
    if (has_positionz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positionz());
    }

    // required .KuplungApp.ObjectCoordinate rotateX = 8;
    if (has_rotatex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .KuplungApp.ObjectCoordinate rotateY = 9;
    if (has_rotatey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatey());
    }

    // required .KuplungApp.ObjectCoordinate rotateZ = 10;
    if (has_rotatez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatez());
    }

    // required .KuplungApp.ObjectCoordinate rotateCenterX = 11;
    if (has_rotatecenterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatecenterx());
    }

    // required .KuplungApp.ObjectCoordinate rotateCenterY = 12;
    if (has_rotatecentery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatecentery());
    }

    // required .KuplungApp.ObjectCoordinate rotateCenterZ = 13;
    if (has_rotatecenterz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatecenterz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraSettings::MergeFrom(const CameraSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cameraposition()) {
      mutable_cameraposition()->::KuplungApp::Vec3::MergeFrom(from.cameraposition());
    }
    if (from.has_view_eye()) {
      mutable_view_eye()->::KuplungApp::Vec3::MergeFrom(from.view_eye());
    }
    if (from.has_view_center()) {
      mutable_view_center()->::KuplungApp::Vec3::MergeFrom(from.view_center());
    }
    if (from.has_view_up()) {
      mutable_view_up()->::KuplungApp::Vec3::MergeFrom(from.view_up());
    }
    if (from.has_positionx()) {
      mutable_positionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionx());
    }
    if (from.has_positiony()) {
      mutable_positiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positiony());
    }
    if (from.has_positionz()) {
      mutable_positionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionz());
    }
    if (from.has_rotatex()) {
      mutable_rotatex()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rotatey()) {
      mutable_rotatey()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatey());
    }
    if (from.has_rotatez()) {
      mutable_rotatez()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatez());
    }
    if (from.has_rotatecenterx()) {
      mutable_rotatecenterx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecenterx());
    }
    if (from.has_rotatecentery()) {
      mutable_rotatecentery()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecentery());
    }
    if (from.has_rotatecenterz()) {
      mutable_rotatecenterz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecenterz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSettings::CopyFrom(const CameraSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  if (has_cameraposition()) {
    if (!this->cameraposition().IsInitialized()) return false;
  }
  if (has_view_eye()) {
    if (!this->view_eye().IsInitialized()) return false;
  }
  if (has_view_center()) {
    if (!this->view_center().IsInitialized()) return false;
  }
  if (has_view_up()) {
    if (!this->view_up().IsInitialized()) return false;
  }
  if (has_positionx()) {
    if (!this->positionx().IsInitialized()) return false;
  }
  if (has_positiony()) {
    if (!this->positiony().IsInitialized()) return false;
  }
  if (has_positionz()) {
    if (!this->positionz().IsInitialized()) return false;
  }
  if (has_rotatex()) {
    if (!this->rotatex().IsInitialized()) return false;
  }
  if (has_rotatey()) {
    if (!this->rotatey().IsInitialized()) return false;
  }
  if (has_rotatez()) {
    if (!this->rotatez().IsInitialized()) return false;
  }
  if (has_rotatecenterx()) {
    if (!this->rotatecenterx().IsInitialized()) return false;
  }
  if (has_rotatecentery()) {
    if (!this->rotatecentery().IsInitialized()) return false;
  }
  if (has_rotatecenterz()) {
    if (!this->rotatecenterz().IsInitialized()) return false;
  }
  return true;
}

void CameraSettings::Swap(CameraSettings* other) {
  if (other != this) {
    std::swap(cameraposition_, other->cameraposition_);
    std::swap(view_eye_, other->view_eye_);
    std::swap(view_center_, other->view_center_);
    std::swap(view_up_, other->view_up_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(rotatex_, other->rotatex_);
    std::swap(rotatey_, other->rotatey_);
    std::swap(rotatez_, other->rotatez_);
    std::swap(rotatecenterx_, other->rotatecenterx_);
    std::swap(rotatecentery_, other->rotatecentery_);
    std::swap(rotatecenterz_, other->rotatecenterz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraSettings_descriptor_;
  metadata.reflection = CameraSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridSettings::kActAsMirrorFieldNumber;
const int GridSettings::kGridSizeFieldNumber;
const int GridSettings::kPositionXFieldNumber;
const int GridSettings::kPositionYFieldNumber;
const int GridSettings::kPositionZFieldNumber;
const int GridSettings::kRotateXFieldNumber;
const int GridSettings::kRotateYFieldNumber;
const int GridSettings::kRotateZFieldNumber;
const int GridSettings::kScaleXFieldNumber;
const int GridSettings::kScaleYFieldNumber;
const int GridSettings::kScaleZFieldNumber;
const int GridSettings::kTransparencyFieldNumber;
const int GridSettings::kShowGridFieldNumber;
#endif  // !_MSC_VER

GridSettings::GridSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.GridSettings)
}

void GridSettings::InitAsDefaultInstance() {
  positionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  positiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  positionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  scalex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  scaley_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  scalez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
}

GridSettings::GridSettings(const GridSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KuplungApp.GridSettings)
}

void GridSettings::SharedCtor() {
  _cached_size_ = 0;
  actasmirror_ = false;
  gridsize_ = 0;
  positionx_ = NULL;
  positiony_ = NULL;
  positionz_ = NULL;
  rotatex_ = NULL;
  rotatey_ = NULL;
  rotatez_ = NULL;
  scalex_ = NULL;
  scaley_ = NULL;
  scalez_ = NULL;
  transparency_ = 0;
  showgrid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridSettings::~GridSettings() {
  // @@protoc_insertion_point(destructor:KuplungApp.GridSettings)
  SharedDtor();
}

void GridSettings::SharedDtor() {
  if (this != default_instance_) {
    delete positionx_;
    delete positiony_;
    delete positionz_;
    delete rotatex_;
    delete rotatey_;
    delete rotatez_;
    delete scalex_;
    delete scaley_;
    delete scalez_;
  }
}

void GridSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridSettings_descriptor_;
}

const GridSettings& GridSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KuplungAppSettings_2eproto();
  return *default_instance_;
}

GridSettings* GridSettings::default_instance_ = NULL;

GridSettings* GridSettings::New() const {
  return new GridSettings;
}

void GridSettings::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GridSettings*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(actasmirror_, gridsize_);
    if (has_positionx()) {
      if (positionx_ != NULL) positionx_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_positiony()) {
      if (positiony_ != NULL) positiony_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_positionz()) {
      if (positionz_ != NULL) positionz_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatex()) {
      if (rotatex_ != NULL) rotatex_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatey()) {
      if (rotatey_ != NULL) rotatey_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatez()) {
      if (rotatez_ != NULL) rotatez_->::KuplungApp::ObjectCoordinate::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(transparency_, showgrid_);
    if (has_scalex()) {
      if (scalex_ != NULL) scalex_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_scaley()) {
      if (scaley_ != NULL) scaley_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_scalez()) {
      if (scalez_ != NULL) scalez_->::KuplungApp::ObjectCoordinate::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.GridSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool actAsMirror = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &actasmirror_)));
          set_has_actasmirror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gridSize;
        break;
      }

      // required int32 gridSize = 2;
      case 2: {
        if (tag == 16) {
         parse_gridSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridsize_)));
          set_has_gridsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_positionX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionX = 3;
      case 3: {
        if (tag == 26) {
         parse_positionX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_positionY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionY = 4;
      case 4: {
        if (tag == 34) {
         parse_positionY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positiony()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_positionZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionZ = 5;
      case 5: {
        if (tag == 42) {
         parse_positionZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionz()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rotateX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateX = 6;
      case 6: {
        if (tag == 50) {
         parse_rotateX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rotateY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateY = 7;
      case 7: {
        if (tag == 58) {
         parse_rotateY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rotateZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateZ = 8;
      case 8: {
        if (tag == 66) {
         parse_rotateZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatez()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_scaleX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleX = 9;
      case 9: {
        if (tag == 74) {
         parse_scaleX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_scaleY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleY = 10;
      case 10: {
        if (tag == 82) {
         parse_scaleY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scaley()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_scaleZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleZ = 11;
      case 11: {
        if (tag == 90) {
         parse_scaleZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalez()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_transparency;
        break;
      }

      // required float transparency = 12;
      case 12: {
        if (tag == 101) {
         parse_transparency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparency_)));
          set_has_transparency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_showGrid;
        break;
      }

      // required int32 showGrid = 13;
      case 13: {
        if (tag == 104) {
         parse_showGrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showgrid_)));
          set_has_showgrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.GridSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.GridSettings)
  return false;
#undef DO_
}

void GridSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.GridSettings)
  // required bool actAsMirror = 1;
  if (has_actasmirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->actasmirror(), output);
  }

  // required int32 gridSize = 2;
  if (has_gridsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gridsize(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 3;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->positionx(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 4;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->positiony(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 5;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->positionz(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 6;
  if (has_rotatex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rotatex(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 7;
  if (has_rotatey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rotatey(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 8;
  if (has_rotatez()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rotatez(), output);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 9;
  if (has_scalex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->scalex(), output);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 10;
  if (has_scaley()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->scaley(), output);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 11;
  if (has_scalez()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->scalez(), output);
  }

  // required float transparency = 12;
  if (has_transparency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->transparency(), output);
  }

  // required int32 showGrid = 13;
  if (has_showgrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->showgrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.GridSettings)
}

::google::protobuf::uint8* GridSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.GridSettings)
  // required bool actAsMirror = 1;
  if (has_actasmirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->actasmirror(), target);
  }

  // required int32 gridSize = 2;
  if (has_gridsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gridsize(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 3;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->positionx(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 4;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->positiony(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 5;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->positionz(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 6;
  if (has_rotatex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rotatex(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 7;
  if (has_rotatey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rotatey(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 8;
  if (has_rotatez()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rotatez(), target);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 9;
  if (has_scalex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->scalex(), target);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 10;
  if (has_scaley()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->scaley(), target);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 11;
  if (has_scalez()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->scalez(), target);
  }

  // required float transparency = 12;
  if (has_transparency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->transparency(), target);
  }

  // required int32 showGrid = 13;
  if (has_showgrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->showgrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.GridSettings)
  return target;
}

int GridSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool actAsMirror = 1;
    if (has_actasmirror()) {
      total_size += 1 + 1;
    }

    // required int32 gridSize = 2;
    if (has_gridsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridsize());
    }

    // required .KuplungApp.ObjectCoordinate positionX = 3;
    if (has_positionx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positionx());
    }

    // required .KuplungApp.ObjectCoordinate positionY = 4;
    if (has_positiony()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positiony());
    }

    // required .KuplungApp.ObjectCoordinate positionZ = 5;
    if (has_positionz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positionz());
    }

    // required .KuplungApp.ObjectCoordinate rotateX = 6;
    if (has_rotatex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatex());
    }

    // required .KuplungApp.ObjectCoordinate rotateY = 7;
    if (has_rotatey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatey());
    }

    // required .KuplungApp.ObjectCoordinate rotateZ = 8;
    if (has_rotatez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatez());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .KuplungApp.ObjectCoordinate scaleX = 9;
    if (has_scalex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalex());
    }

    // required .KuplungApp.ObjectCoordinate scaleY = 10;
    if (has_scaley()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scaley());
    }

    // required .KuplungApp.ObjectCoordinate scaleZ = 11;
    if (has_scalez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalez());
    }

    // required float transparency = 12;
    if (has_transparency()) {
      total_size += 1 + 4;
    }

    // required int32 showGrid = 13;
    if (has_showgrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showgrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridSettings::MergeFrom(const GridSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actasmirror()) {
      set_actasmirror(from.actasmirror());
    }
    if (from.has_gridsize()) {
      set_gridsize(from.gridsize());
    }
    if (from.has_positionx()) {
      mutable_positionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionx());
    }
    if (from.has_positiony()) {
      mutable_positiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positiony());
    }
    if (from.has_positionz()) {
      mutable_positionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionz());
    }
    if (from.has_rotatex()) {
      mutable_rotatex()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatex());
    }
    if (from.has_rotatey()) {
      mutable_rotatey()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatey());
    }
    if (from.has_rotatez()) {
      mutable_rotatez()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatez());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scalex()) {
      mutable_scalex()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scalex());
    }
    if (from.has_scaley()) {
      mutable_scaley()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scaley());
    }
    if (from.has_scalez()) {
      mutable_scalez()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scalez());
    }
    if (from.has_transparency()) {
      set_transparency(from.transparency());
    }
    if (from.has_showgrid()) {
      set_showgrid(from.showgrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridSettings::CopyFrom(const GridSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  if (has_positionx()) {
    if (!this->positionx().IsInitialized()) return false;
  }
  if (has_positiony()) {
    if (!this->positiony().IsInitialized()) return false;
  }
  if (has_positionz()) {
    if (!this->positionz().IsInitialized()) return false;
  }
  if (has_rotatex()) {
    if (!this->rotatex().IsInitialized()) return false;
  }
  if (has_rotatey()) {
    if (!this->rotatey().IsInitialized()) return false;
  }
  if (has_rotatez()) {
    if (!this->rotatez().IsInitialized()) return false;
  }
  if (has_scalex()) {
    if (!this->scalex().IsInitialized()) return false;
  }
  if (has_scaley()) {
    if (!this->scaley().IsInitialized()) return false;
  }
  if (has_scalez()) {
    if (!this->scalez().IsInitialized()) return false;
  }
  return true;
}

void GridSettings::Swap(GridSettings* other) {
  if (other != this) {
    std::swap(actasmirror_, other->actasmirror_);
    std::swap(gridsize_, other->gridsize_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(rotatex_, other->rotatex_);
    std::swap(rotatey_, other->rotatey_);
    std::swap(rotatez_, other->rotatez_);
    std::swap(scalex_, other->scalex_);
    std::swap(scaley_, other->scaley_);
    std::swap(scalez_, other->scalez_);
    std::swap(transparency_, other->transparency_);
    std::swap(showgrid_, other->showgrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridSettings_descriptor_;
  metadata.reflection = GridSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LightObject::kTitleFieldNumber;
const int LightObject::kDescriptionFieldNumber;
const int LightObject::kTypeFieldNumber;
const int LightObject::kShowLampObjectFieldNumber;
const int LightObject::kShowLampDirectionFieldNumber;
const int LightObject::kShowInWireFieldNumber;
const int LightObject::kPositionXFieldNumber;
const int LightObject::kPositionYFieldNumber;
const int LightObject::kPositionZFieldNumber;
const int LightObject::kDirectionXFieldNumber;
const int LightObject::kDirectionYFieldNumber;
const int LightObject::kDirectionZFieldNumber;
const int LightObject::kScaleXFieldNumber;
const int LightObject::kScaleYFieldNumber;
const int LightObject::kScaleZFieldNumber;
const int LightObject::kRotateXFieldNumber;
const int LightObject::kRotateYFieldNumber;
const int LightObject::kRotateZFieldNumber;
const int LightObject::kRotateCenterXFieldNumber;
const int LightObject::kRotateCenterYFieldNumber;
const int LightObject::kRotateCenterZFieldNumber;
#endif  // !_MSC_VER

LightObject::LightObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.LightObject)
}

void LightObject::InitAsDefaultInstance() {
  positionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  positiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  positionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  directionx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  directiony_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  directionz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  scalex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  scaley_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  scalez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatex_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatey_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatez_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatecenterx_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatecentery_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
  rotatecenterz_ = const_cast< ::KuplungApp::ObjectCoordinate*>(&::KuplungApp::ObjectCoordinate::default_instance());
}

LightObject::LightObject(const LightObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KuplungApp.LightObject)
}

void LightObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  showlampobject_ = false;
  showlampdirection_ = false;
  showinwire_ = false;
  positionx_ = NULL;
  positiony_ = NULL;
  positionz_ = NULL;
  directionx_ = NULL;
  directiony_ = NULL;
  directionz_ = NULL;
  scalex_ = NULL;
  scaley_ = NULL;
  scalez_ = NULL;
  rotatex_ = NULL;
  rotatey_ = NULL;
  rotatez_ = NULL;
  rotatecenterx_ = NULL;
  rotatecentery_ = NULL;
  rotatecenterz_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LightObject::~LightObject() {
  // @@protoc_insertion_point(destructor:KuplungApp.LightObject)
  SharedDtor();
}

void LightObject::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
    delete positionx_;
    delete positiony_;
    delete positionz_;
    delete directionx_;
    delete directiony_;
    delete directionz_;
    delete scalex_;
    delete scaley_;
    delete scalez_;
    delete rotatex_;
    delete rotatey_;
    delete rotatez_;
    delete rotatecenterx_;
    delete rotatecentery_;
    delete rotatecenterz_;
  }
}

void LightObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightObject_descriptor_;
}

const LightObject& LightObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KuplungAppSettings_2eproto();
  return *default_instance_;
}

LightObject* LightObject::default_instance_ = NULL;

LightObject* LightObject::New() const {
  return new LightObject;
}

void LightObject::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LightObject*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, showinwire_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_positionx()) {
      if (positionx_ != NULL) positionx_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_positiony()) {
      if (positiony_ != NULL) positiony_->::KuplungApp::ObjectCoordinate::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_positionz()) {
      if (positionz_ != NULL) positionz_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_directionx()) {
      if (directionx_ != NULL) directionx_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_directiony()) {
      if (directiony_ != NULL) directiony_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_directionz()) {
      if (directionz_ != NULL) directionz_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_scalex()) {
      if (scalex_ != NULL) scalex_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_scaley()) {
      if (scaley_ != NULL) scaley_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_scalez()) {
      if (scalez_ != NULL) scalez_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatex()) {
      if (rotatex_ != NULL) rotatex_->::KuplungApp::ObjectCoordinate::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 2031616) {
    if (has_rotatey()) {
      if (rotatey_ != NULL) rotatey_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatez()) {
      if (rotatez_ != NULL) rotatez_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatecenterx()) {
      if (rotatecenterx_ != NULL) rotatecenterx_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatecentery()) {
      if (rotatecentery_ != NULL) rotatecentery_->::KuplungApp::ObjectCoordinate::Clear();
    }
    if (has_rotatecenterz()) {
      if (rotatecenterz_ != NULL) rotatecenterz_->::KuplungApp::ObjectCoordinate::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LightObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.LightObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // required string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_showLampObject;
        break;
      }

      // required bool showLampObject = 4;
      case 4: {
        if (tag == 32) {
         parse_showLampObject:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showlampobject_)));
          set_has_showlampobject();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_showLampDirection;
        break;
      }

      // required bool showLampDirection = 5;
      case 5: {
        if (tag == 40) {
         parse_showLampDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showlampdirection_)));
          set_has_showlampdirection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_showInWire;
        break;
      }

      // required bool showInWire = 6;
      case 6: {
        if (tag == 48) {
         parse_showInWire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showinwire_)));
          set_has_showinwire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_positionX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionX = 7;
      case 7: {
        if (tag == 58) {
         parse_positionX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_positionY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionY = 8;
      case 8: {
        if (tag == 66) {
         parse_positionY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positiony()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_positionZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate positionZ = 9;
      case 9: {
        if (tag == 74) {
         parse_positionZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionz()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_directionX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate directionX = 10;
      case 10: {
        if (tag == 82) {
         parse_directionX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directionx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_directionY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate directionY = 11;
      case 11: {
        if (tag == 90) {
         parse_directionY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directiony()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_directionZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate directionZ = 12;
      case 12: {
        if (tag == 98) {
         parse_directionZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_directionz()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_scaleX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleX = 13;
      case 13: {
        if (tag == 106) {
         parse_scaleX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_scaleY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleY = 14;
      case 14: {
        if (tag == 114) {
         parse_scaleY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scaley()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_scaleZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate scaleZ = 15;
      case 15: {
        if (tag == 122) {
         parse_scaleZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalez()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_rotateX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateX = 16;
      case 16: {
        if (tag == 130) {
         parse_rotateX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_rotateY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateY = 17;
      case 17: {
        if (tag == 138) {
         parse_rotateY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_rotateZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateZ = 18;
      case 18: {
        if (tag == 146) {
         parse_rotateZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatez()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_rotateCenterX;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
      case 19: {
        if (tag == 154) {
         parse_rotateCenterX:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatecenterx()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_rotateCenterY;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
      case 20: {
        if (tag == 162) {
         parse_rotateCenterY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatecentery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_rotateCenterZ;
        break;
      }

      // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
      case 21: {
        if (tag == 170) {
         parse_rotateCenterZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotatecenterz()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.LightObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.LightObject)
  return false;
#undef DO_
}

void LightObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.LightObject)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required bool showLampObject = 4;
  if (has_showlampobject()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->showlampobject(), output);
  }

  // required bool showLampDirection = 5;
  if (has_showlampdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->showlampdirection(), output);
  }

  // required bool showInWire = 6;
  if (has_showinwire()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->showinwire(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 7;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->positionx(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 8;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->positiony(), output);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 9;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->positionz(), output);
  }

  // required .KuplungApp.ObjectCoordinate directionX = 10;
  if (has_directionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->directionx(), output);
  }

  // required .KuplungApp.ObjectCoordinate directionY = 11;
  if (has_directiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->directiony(), output);
  }

  // required .KuplungApp.ObjectCoordinate directionZ = 12;
  if (has_directionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->directionz(), output);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 13;
  if (has_scalex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->scalex(), output);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 14;
  if (has_scaley()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->scaley(), output);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 15;
  if (has_scalez()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->scalez(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 16;
  if (has_rotatex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->rotatex(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 17;
  if (has_rotatey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->rotatey(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 18;
  if (has_rotatez()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->rotatez(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
  if (has_rotatecenterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->rotatecenterx(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
  if (has_rotatecentery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->rotatecentery(), output);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
  if (has_rotatecenterz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->rotatecenterz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.LightObject)
}

::google::protobuf::uint8* LightObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.LightObject)
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required bool showLampObject = 4;
  if (has_showlampobject()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->showlampobject(), target);
  }

  // required bool showLampDirection = 5;
  if (has_showlampdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->showlampdirection(), target);
  }

  // required bool showInWire = 6;
  if (has_showinwire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->showinwire(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionX = 7;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->positionx(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionY = 8;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->positiony(), target);
  }

  // required .KuplungApp.ObjectCoordinate positionZ = 9;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->positionz(), target);
  }

  // required .KuplungApp.ObjectCoordinate directionX = 10;
  if (has_directionx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->directionx(), target);
  }

  // required .KuplungApp.ObjectCoordinate directionY = 11;
  if (has_directiony()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->directiony(), target);
  }

  // required .KuplungApp.ObjectCoordinate directionZ = 12;
  if (has_directionz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->directionz(), target);
  }

  // required .KuplungApp.ObjectCoordinate scaleX = 13;
  if (has_scalex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->scalex(), target);
  }

  // required .KuplungApp.ObjectCoordinate scaleY = 14;
  if (has_scaley()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->scaley(), target);
  }

  // required .KuplungApp.ObjectCoordinate scaleZ = 15;
  if (has_scalez()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->scalez(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateX = 16;
  if (has_rotatex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->rotatex(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateY = 17;
  if (has_rotatey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->rotatey(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateZ = 18;
  if (has_rotatez()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->rotatez(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
  if (has_rotatecenterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->rotatecenterx(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
  if (has_rotatecentery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->rotatecentery(), target);
  }

  // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
  if (has_rotatecenterz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->rotatecenterz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.LightObject)
  return target;
}

int LightObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bool showLampObject = 4;
    if (has_showlampobject()) {
      total_size += 1 + 1;
    }

    // required bool showLampDirection = 5;
    if (has_showlampdirection()) {
      total_size += 1 + 1;
    }

    // required bool showInWire = 6;
    if (has_showinwire()) {
      total_size += 1 + 1;
    }

    // required .KuplungApp.ObjectCoordinate positionX = 7;
    if (has_positionx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positionx());
    }

    // required .KuplungApp.ObjectCoordinate positionY = 8;
    if (has_positiony()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positiony());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .KuplungApp.ObjectCoordinate positionZ = 9;
    if (has_positionz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positionz());
    }

    // required .KuplungApp.ObjectCoordinate directionX = 10;
    if (has_directionx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->directionx());
    }

    // required .KuplungApp.ObjectCoordinate directionY = 11;
    if (has_directiony()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->directiony());
    }

    // required .KuplungApp.ObjectCoordinate directionZ = 12;
    if (has_directionz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->directionz());
    }

    // required .KuplungApp.ObjectCoordinate scaleX = 13;
    if (has_scalex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalex());
    }

    // required .KuplungApp.ObjectCoordinate scaleY = 14;
    if (has_scaley()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scaley());
    }

    // required .KuplungApp.ObjectCoordinate scaleZ = 15;
    if (has_scalez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalez());
    }

    // required .KuplungApp.ObjectCoordinate rotateX = 16;
    if (has_rotatex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatex());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .KuplungApp.ObjectCoordinate rotateY = 17;
    if (has_rotatey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatey());
    }

    // required .KuplungApp.ObjectCoordinate rotateZ = 18;
    if (has_rotatez()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatez());
    }

    // required .KuplungApp.ObjectCoordinate rotateCenterX = 19;
    if (has_rotatecenterx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatecenterx());
    }

    // required .KuplungApp.ObjectCoordinate rotateCenterY = 20;
    if (has_rotatecentery()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatecentery());
    }

    // required .KuplungApp.ObjectCoordinate rotateCenterZ = 21;
    if (has_rotatecenterz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotatecenterz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LightObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LightObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LightObject::MergeFrom(const LightObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_showlampobject()) {
      set_showlampobject(from.showlampobject());
    }
    if (from.has_showlampdirection()) {
      set_showlampdirection(from.showlampdirection());
    }
    if (from.has_showinwire()) {
      set_showinwire(from.showinwire());
    }
    if (from.has_positionx()) {
      mutable_positionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionx());
    }
    if (from.has_positiony()) {
      mutable_positiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positiony());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_positionz()) {
      mutable_positionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.positionz());
    }
    if (from.has_directionx()) {
      mutable_directionx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.directionx());
    }
    if (from.has_directiony()) {
      mutable_directiony()->::KuplungApp::ObjectCoordinate::MergeFrom(from.directiony());
    }
    if (from.has_directionz()) {
      mutable_directionz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.directionz());
    }
    if (from.has_scalex()) {
      mutable_scalex()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scalex());
    }
    if (from.has_scaley()) {
      mutable_scaley()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scaley());
    }
    if (from.has_scalez()) {
      mutable_scalez()->::KuplungApp::ObjectCoordinate::MergeFrom(from.scalez());
    }
    if (from.has_rotatex()) {
      mutable_rotatex()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatex());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rotatey()) {
      mutable_rotatey()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatey());
    }
    if (from.has_rotatez()) {
      mutable_rotatez()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatez());
    }
    if (from.has_rotatecenterx()) {
      mutable_rotatecenterx()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecenterx());
    }
    if (from.has_rotatecentery()) {
      mutable_rotatecentery()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecentery());
    }
    if (from.has_rotatecenterz()) {
      mutable_rotatecenterz()->::KuplungApp::ObjectCoordinate::MergeFrom(from.rotatecenterz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LightObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightObject::CopyFrom(const LightObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;

  if (has_positionx()) {
    if (!this->positionx().IsInitialized()) return false;
  }
  if (has_positiony()) {
    if (!this->positiony().IsInitialized()) return false;
  }
  if (has_positionz()) {
    if (!this->positionz().IsInitialized()) return false;
  }
  if (has_directionx()) {
    if (!this->directionx().IsInitialized()) return false;
  }
  if (has_directiony()) {
    if (!this->directiony().IsInitialized()) return false;
  }
  if (has_directionz()) {
    if (!this->directionz().IsInitialized()) return false;
  }
  if (has_scalex()) {
    if (!this->scalex().IsInitialized()) return false;
  }
  if (has_scaley()) {
    if (!this->scaley().IsInitialized()) return false;
  }
  if (has_scalez()) {
    if (!this->scalez().IsInitialized()) return false;
  }
  if (has_rotatex()) {
    if (!this->rotatex().IsInitialized()) return false;
  }
  if (has_rotatey()) {
    if (!this->rotatey().IsInitialized()) return false;
  }
  if (has_rotatez()) {
    if (!this->rotatez().IsInitialized()) return false;
  }
  if (has_rotatecenterx()) {
    if (!this->rotatecenterx().IsInitialized()) return false;
  }
  if (has_rotatecentery()) {
    if (!this->rotatecentery().IsInitialized()) return false;
  }
  if (has_rotatecenterz()) {
    if (!this->rotatecenterz().IsInitialized()) return false;
  }
  return true;
}

void LightObject::Swap(LightObject* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(type_, other->type_);
    std::swap(showlampobject_, other->showlampobject_);
    std::swap(showlampdirection_, other->showlampdirection_);
    std::swap(showinwire_, other->showinwire_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(directionx_, other->directionx_);
    std::swap(directiony_, other->directiony_);
    std::swap(directionz_, other->directionz_);
    std::swap(scalex_, other->scalex_);
    std::swap(scaley_, other->scaley_);
    std::swap(scalez_, other->scalez_);
    std::swap(rotatex_, other->rotatex_);
    std::swap(rotatey_, other->rotatey_);
    std::swap(rotatez_, other->rotatez_);
    std::swap(rotatecenterx_, other->rotatecenterx_);
    std::swap(rotatecentery_, other->rotatecentery_);
    std::swap(rotatecenterz_, other->rotatecenterz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LightObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightObject_descriptor_;
  metadata.reflection = LightObject_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KuplungApp

// @@protoc_insertion_point(global_scope)
