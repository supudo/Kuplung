// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungDefinitions.proto

#include "KuplungDefinitions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FBEntity_KuplungDefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeshMaterialTextureImage_KuplungDefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MeshModelMaterial_KuplungDefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2_KuplungDefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_KuplungDefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_KuplungDefinitions_2eproto;
namespace KuplungApp {
class Vec2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec2> _instance;
} _Vec2_default_instance_;
class Vec3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec3> _instance;
} _Vec3_default_instance_;
class Vec4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec4> _instance;
} _Vec4_default_instance_;
class ObjectCoordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectCoordinate> _instance;
} _ObjectCoordinate_default_instance_;
class FBEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FBEntity> _instance;
} _FBEntity_default_instance_;
class MaterialColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaterialColor> _instance;
} _MaterialColor_default_instance_;
class MeshMaterialTextureImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshMaterialTextureImage> _instance;
} _MeshMaterialTextureImage_default_instance_;
class MeshModelMaterialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshModelMaterial> _instance;
} _MeshModelMaterial_default_instance_;
class MeshDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mesh> _instance;
} _Mesh_default_instance_;
}  // namespace KuplungApp
static void InitDefaultsscc_info_FBEntity_KuplungDefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_FBEntity_default_instance_;
    new (ptr) ::KuplungApp::FBEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::FBEntity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FBEntity_KuplungDefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FBEntity_KuplungDefinitions_2eproto}, {}};

static void InitDefaultsscc_info_MaterialColor_KuplungDefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_MaterialColor_default_instance_;
    new (ptr) ::KuplungApp::MaterialColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::MaterialColor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MaterialColor_KuplungDefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MaterialColor_KuplungDefinitions_2eproto}, {
      &scc_info_Vec3_KuplungDefinitions_2eproto.base,}};

static void InitDefaultsscc_info_Mesh_KuplungDefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_Mesh_default_instance_;
    new (ptr) ::KuplungApp::Mesh();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::Mesh::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Mesh_KuplungDefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Mesh_KuplungDefinitions_2eproto}, {
      &scc_info_FBEntity_KuplungDefinitions_2eproto.base,
      &scc_info_MeshModelMaterial_KuplungDefinitions_2eproto.base,
      &scc_info_Vec3_KuplungDefinitions_2eproto.base,
      &scc_info_Vec2_KuplungDefinitions_2eproto.base,}};

static void InitDefaultsscc_info_MeshMaterialTextureImage_KuplungDefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_MeshMaterialTextureImage_default_instance_;
    new (ptr) ::KuplungApp::MeshMaterialTextureImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::MeshMaterialTextureImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeshMaterialTextureImage_KuplungDefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MeshMaterialTextureImage_KuplungDefinitions_2eproto}, {}};

static void InitDefaultsscc_info_MeshModelMaterial_KuplungDefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_MeshModelMaterial_default_instance_;
    new (ptr) ::KuplungApp::MeshModelMaterial();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::MeshModelMaterial::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MeshModelMaterial_KuplungDefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MeshModelMaterial_KuplungDefinitions_2eproto}, {
      &scc_info_Vec3_KuplungDefinitions_2eproto.base,
      &scc_info_MeshMaterialTextureImage_KuplungDefinitions_2eproto.base,}};

static void InitDefaultsscc_info_ObjectCoordinate_KuplungDefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_ObjectCoordinate_default_instance_;
    new (ptr) ::KuplungApp::ObjectCoordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::ObjectCoordinate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectCoordinate_KuplungDefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectCoordinate_KuplungDefinitions_2eproto}, {}};

static void InitDefaultsscc_info_Vec2_KuplungDefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_Vec2_default_instance_;
    new (ptr) ::KuplungApp::Vec2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::Vec2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2_KuplungDefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec2_KuplungDefinitions_2eproto}, {}};

static void InitDefaultsscc_info_Vec3_KuplungDefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_Vec3_default_instance_;
    new (ptr) ::KuplungApp::Vec3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::Vec3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_KuplungDefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec3_KuplungDefinitions_2eproto}, {}};

static void InitDefaultsscc_info_Vec4_KuplungDefinitions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KuplungApp::_Vec4_default_instance_;
    new (ptr) ::KuplungApp::Vec4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::Vec4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec4_KuplungDefinitions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec4_KuplungDefinitions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_KuplungDefinitions_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_KuplungDefinitions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_KuplungDefinitions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_KuplungDefinitions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec2, x_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec2, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec3, x_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec3, y_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec3, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, x_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, y_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, z_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, w_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, animate_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, point_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, isfile_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, path_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, title_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, extension_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, modifieddate_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, size_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, colorpickeropen_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, animate_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, strength_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, color_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, filename_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, image_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, width_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, height_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, usetexture_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, commands_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, materialid_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, materialtitle_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, ambientcolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, diffusecolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, specularcolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, emissioncolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, specularexp_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, transparency_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, illuminationmode_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, opticaldensity_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, textureambient_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturediffuse_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturespecular_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturespecularexp_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturedissolve_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturebump_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturedisplacement_),
  12,
  0,
  1,
  2,
  3,
  4,
  13,
  14,
  15,
  16,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, id_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, file_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, modeltitle_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, materialtitle_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, countvertices_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, counttexturecoordinates_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, countnormals_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, countindices_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, modelmaterial_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, vertices_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, texture_coordinates_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, normals_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, indices_),
  4,
  2,
  0,
  1,
  5,
  6,
  7,
  8,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::KuplungApp::Vec2)},
  { 9, 17, sizeof(::KuplungApp::Vec3)},
  { 20, 29, sizeof(::KuplungApp::Vec4)},
  { 33, 40, sizeof(::KuplungApp::ObjectCoordinate)},
  { 42, 53, sizeof(::KuplungApp::FBEntity)},
  { 59, 68, sizeof(::KuplungApp::MaterialColor)},
  { 72, 83, sizeof(::KuplungApp::MeshMaterialTextureImage)},
  { 89, 111, sizeof(::KuplungApp::MeshModelMaterial)},
  { 128, 146, sizeof(::KuplungApp::Mesh)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_Vec2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_Vec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_Vec4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_ObjectCoordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_FBEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_MaterialColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_MeshMaterialTextureImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_MeshModelMaterial_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KuplungApp::_Mesh_default_instance_),
};

const char descriptor_table_protodef_KuplungDefinitions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030KuplungDefinitions.proto\022\nKuplungApp\"\034"
  "\n\004Vec2\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\'\n\004Vec3\022\t\n\001"
  "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"2\n\004Vec4\022\t\n"
  "\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\t\n\001w\030\004 \002("
  "\002\"2\n\020ObjectCoordinate\022\017\n\007animate\030\001 \002(\010\022\r"
  "\n\005point\030\002 \002(\002\"n\n\010FBEntity\022\016\n\006isFile\030\001 \002("
  "\010\022\014\n\004path\030\002 \002(\t\022\r\n\005title\030\003 \002(\t\022\021\n\textens"
  "ion\030\004 \002(\t\022\024\n\014modifiedDate\030\005 \002(\t\022\014\n\004size\030"
  "\006 \002(\t\"l\n\rMaterialColor\022\027\n\017colorPickerOpe"
  "n\030\001 \002(\010\022\017\n\007animate\030\002 \002(\010\022\020\n\010strength\030\003 \002"
  "(\002\022\037\n\005color\030\004 \002(\0132\020.KuplungApp.Vec3\"\200\001\n\030"
  "MeshMaterialTextureImage\022\020\n\010Filename\030\001 \002"
  "(\t\022\r\n\005Image\030\002 \002(\t\022\r\n\005Width\030\003 \002(\005\022\016\n\006Heig"
  "ht\030\004 \002(\005\022\022\n\nUseTexture\030\005 \002(\010\022\020\n\010Commands"
  "\030\006 \003(\t\"\367\005\n\021MeshModelMaterial\022\022\n\nMaterial"
  "ID\030\001 \002(\005\022\025\n\rMaterialTitle\030\002 \002(\t\022&\n\014Ambie"
  "ntColor\030\003 \002(\0132\020.KuplungApp.Vec3\022&\n\014Diffu"
  "seColor\030\004 \002(\0132\020.KuplungApp.Vec3\022\'\n\rSpecu"
  "larColor\030\005 \002(\0132\020.KuplungApp.Vec3\022\'\n\rEmis"
  "sionColor\030\006 \002(\0132\020.KuplungApp.Vec3\022\023\n\013Spe"
  "cularExp\030\007 \002(\002\022\024\n\014Transparency\030\010 \002(\002\022\030\n\020"
  "IlluminationMode\030\t \002(\007\022\026\n\016OpticalDensity"
  "\030\n \002(\002\022<\n\016TextureAmbient\030\013 \002(\0132$.Kuplung"
  "App.MeshMaterialTextureImage\022<\n\016TextureD"
  "iffuse\030\014 \002(\0132$.KuplungApp.MeshMaterialTe"
  "xtureImage\022=\n\017TextureSpecular\030\r \002(\0132$.Ku"
  "plungApp.MeshMaterialTextureImage\022@\n\022Tex"
  "tureSpecularExp\030\016 \002(\0132$.KuplungApp.MeshM"
  "aterialTextureImage\022=\n\017TextureDissolve\030\017"
  " \002(\0132$.KuplungApp.MeshMaterialTextureIma"
  "ge\0229\n\013TextureBump\030\020 \002(\0132$.KuplungApp.Mes"
  "hMaterialTextureImage\022A\n\023TextureDisplace"
  "ment\030\021 \002(\0132$.KuplungApp.MeshMaterialText"
  "ureImage\"\202\003\n\004Mesh\022\n\n\002ID\030\001 \002(\005\022\"\n\004File\030\002 "
  "\002(\0132\024.KuplungApp.FBEntity\022\022\n\nModelTitle\030"
  "\003 \002(\t\022\025\n\rMaterialTitle\030\004 \002(\t\022\025\n\rcountVer"
  "tices\030\005 \002(\005\022\037\n\027countTextureCoordinates\030\006"
  " \002(\005\022\024\n\014countNormals\030\007 \002(\005\022\024\n\014countIndic"
  "es\030\010 \002(\005\0224\n\rModelMaterial\030\t \002(\0132\035.Kuplun"
  "gApp.MeshModelMaterial\022\"\n\010vertices\030\n \003(\013"
  "2\020.KuplungApp.Vec3\022-\n\023texture_coordinate"
  "s\030\013 \003(\0132\020.KuplungApp.Vec2\022!\n\007normals\030\014 \003"
  "(\0132\020.KuplungApp.Vec3\022\017\n\007indices\030\r \003(\007"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_KuplungDefinitions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_KuplungDefinitions_2eproto_sccs[9] = {
  &scc_info_FBEntity_KuplungDefinitions_2eproto.base,
  &scc_info_MaterialColor_KuplungDefinitions_2eproto.base,
  &scc_info_Mesh_KuplungDefinitions_2eproto.base,
  &scc_info_MeshMaterialTextureImage_KuplungDefinitions_2eproto.base,
  &scc_info_MeshModelMaterial_KuplungDefinitions_2eproto.base,
  &scc_info_ObjectCoordinate_KuplungDefinitions_2eproto.base,
  &scc_info_Vec2_KuplungDefinitions_2eproto.base,
  &scc_info_Vec3_KuplungDefinitions_2eproto.base,
  &scc_info_Vec4_KuplungDefinitions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_KuplungDefinitions_2eproto_once;
static bool descriptor_table_KuplungDefinitions_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KuplungDefinitions_2eproto = {
  &descriptor_table_KuplungDefinitions_2eproto_initialized, descriptor_table_protodef_KuplungDefinitions_2eproto, "KuplungDefinitions.proto", 1717,
  &descriptor_table_KuplungDefinitions_2eproto_once, descriptor_table_KuplungDefinitions_2eproto_sccs, descriptor_table_KuplungDefinitions_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_KuplungDefinitions_2eproto::offsets,
  file_level_metadata_KuplungDefinitions_2eproto, 9, file_level_enum_descriptors_KuplungDefinitions_2eproto, file_level_service_descriptors_KuplungDefinitions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_KuplungDefinitions_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_KuplungDefinitions_2eproto), true);
namespace KuplungApp {

// ===================================================================

void Vec2::InitAsDefaultInstance() {
}
class Vec2::_Internal {
 public:
  using HasBits = decltype(std::declval<Vec2>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Vec2::Vec2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.Vec2)
}
Vec2::Vec2(const Vec2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Vec2)
}

void Vec2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2::~Vec2() {
  // @@protoc_insertion_point(destructor:KuplungApp.Vec2)
  SharedDtor();
}

void Vec2::SharedDtor() {
}

void Vec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2& Vec2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec2_KuplungDefinitions_2eproto.base);
  return *internal_default_instance();
}


void Vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Vec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vec2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Vec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Vec2)
  return target;
}

size_t Vec2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Vec2)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Vec2)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.Vec2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.Vec2)
    MergeFrom(*source);
  }
}

void Vec2::MergeFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vec2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2::CopyFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Vec2::InternalSwap(Vec2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vec3::InitAsDefaultInstance() {
}
class Vec3::_Internal {
 public:
  using HasBits = decltype(std::declval<Vec3>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Vec3::Vec3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Vec3)
}

void Vec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:KuplungApp.Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
}

void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3& Vec3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec3_KuplungDefinitions_2eproto.base);
  return *internal_default_instance();
}


void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Vec3)
  return target;
}

size_t Vec3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Vec3)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Vec3)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.Vec3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vec3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vec4::InitAsDefaultInstance() {
}
class Vec4::_Internal {
 public:
  using HasBits = decltype(std::declval<Vec4>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Vec4::Vec4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.Vec4)
}
Vec4::Vec4(const Vec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Vec4)
}

void Vec4::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Vec4::~Vec4() {
  // @@protoc_insertion_point(destructor:KuplungApp.Vec4)
  SharedDtor();
}

void Vec4::SharedDtor() {
}

void Vec4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec4& Vec4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec4_KuplungDefinitions_2eproto.base);
  return *internal_default_instance();
}


void Vec4::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Vec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&x_)) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vec4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Vec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // required float w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Vec4)
  return target;
}

size_t Vec4::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Vec4)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_w()) {
    // required float w = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Vec4)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float w = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.Vec4)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.Vec4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.Vec4)
    MergeFrom(*source);
  }
}

void Vec4::MergeFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Vec4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vec4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec4::CopyFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Vec4::InternalSwap(Vec4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectCoordinate::InitAsDefaultInstance() {
}
class ObjectCoordinate::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectCoordinate>()._has_bits_);
  static void set_has_animate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObjectCoordinate::ObjectCoordinate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.ObjectCoordinate)
}
ObjectCoordinate::ObjectCoordinate(const ObjectCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&animate_, &from.animate_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_) -
    reinterpret_cast<char*>(&animate_)) + sizeof(point_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.ObjectCoordinate)
}

void ObjectCoordinate::SharedCtor() {
  ::memset(&animate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&animate_)) + sizeof(point_));
}

ObjectCoordinate::~ObjectCoordinate() {
  // @@protoc_insertion_point(destructor:KuplungApp.ObjectCoordinate)
  SharedDtor();
}

void ObjectCoordinate::SharedDtor() {
}

void ObjectCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectCoordinate& ObjectCoordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectCoordinate_KuplungDefinitions_2eproto.base);
  return *internal_default_instance();
}


void ObjectCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.ObjectCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&animate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&point_) -
        reinterpret_cast<char*>(&animate_)) + sizeof(point_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool animate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_animate(&has_bits);
          animate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_point(&has_bits);
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectCoordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.ObjectCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool animate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_animate(), target);
  }

  // required float point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.ObjectCoordinate)
  return target;
}

size_t ObjectCoordinate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.ObjectCoordinate)
  size_t total_size = 0;

  if (_internal_has_animate()) {
    // required bool animate = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_point()) {
    // required float point = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ObjectCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.ObjectCoordinate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool animate = 1;
    total_size += 1 + 1;

    // required float point = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectCoordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.ObjectCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectCoordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectCoordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.ObjectCoordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.ObjectCoordinate)
    MergeFrom(*source);
  }
}

void ObjectCoordinate::MergeFrom(const ObjectCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.ObjectCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      animate_ = from.animate_;
    }
    if (cached_has_bits & 0x00000002u) {
      point_ = from.point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectCoordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.ObjectCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectCoordinate::CopyFrom(const ObjectCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.ObjectCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectCoordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ObjectCoordinate::InternalSwap(ObjectCoordinate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(animate_, other->animate_);
  swap(point_, other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectCoordinate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FBEntity::InitAsDefaultInstance() {
}
class FBEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<FBEntity>()._has_bits_);
  static void set_has_isfile(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_modifieddate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FBEntity::FBEntity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.FBEntity)
}
FBEntity::FBEntity(const FBEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extension()) {
    extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  modifieddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modifieddate()) {
    modifieddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
  }
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_size()) {
    size_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.size_);
  }
  isfile_ = from.isfile_;
  // @@protoc_insertion_point(copy_constructor:KuplungApp.FBEntity)
}

void FBEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FBEntity_KuplungDefinitions_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifieddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isfile_ = false;
}

FBEntity::~FBEntity() {
  // @@protoc_insertion_point(destructor:KuplungApp.FBEntity)
  SharedDtor();
}

void FBEntity::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modifieddate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FBEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FBEntity& FBEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FBEntity_KuplungDefinitions_2eproto.base);
  return *internal_default_instance();
}


void FBEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.FBEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      extension_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      modifieddate_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      size_.ClearNonDefaultToEmptyNoArena();
    }
  }
  isfile_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FBEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool isFile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_isfile(&has_bits);
          isfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.FBEntity.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.FBEntity.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_extension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.FBEntity.extension");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string modifiedDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_modifieddate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.FBEntity.modifiedDate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_size();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.FBEntity.size");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FBEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.FBEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool isFile = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isfile(), target);
  }

  // required string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // required string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // required string extension = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.extension");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_extension(), target);
  }

  // required string modifiedDate = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modifieddate().data(), static_cast<int>(this->_internal_modifieddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.modifiedDate");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_modifieddate(), target);
  }

  // required string size = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_size().data(), static_cast<int>(this->_internal_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.size");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.FBEntity)
  return target;
}

size_t FBEntity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.FBEntity)
  size_t total_size = 0;

  if (_internal_has_path()) {
    // required string path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (_internal_has_title()) {
    // required string title = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (_internal_has_extension()) {
    // required string extension = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());
  }

  if (_internal_has_modifieddate()) {
    // required string modifiedDate = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifieddate());
  }

  if (_internal_has_size()) {
    // required string size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_size());
  }

  if (_internal_has_isfile()) {
    // required bool isFile = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FBEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.FBEntity)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());

    // required string title = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());

    // required string extension = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());

    // required string modifiedDate = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifieddate());

    // required string size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_size());

    // required bool isFile = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FBEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.FBEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const FBEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FBEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.FBEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.FBEntity)
    MergeFrom(*source);
  }
}

void FBEntity::MergeFrom(const FBEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.FBEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      modifieddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      size_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.size_);
    }
    if (cached_has_bits & 0x00000020u) {
      isfile_ = from.isfile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FBEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.FBEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FBEntity::CopyFrom(const FBEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.FBEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FBEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void FBEntity::InternalSwap(FBEntity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extension_.Swap(&other->extension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modifieddate_.Swap(&other->modifieddate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  size_.Swap(&other->size_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(isfile_, other->isfile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FBEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaterialColor::InitAsDefaultInstance() {
  ::KuplungApp::_MaterialColor_default_instance_._instance.get_mutable()->color_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
}
class MaterialColor::_Internal {
 public:
  using HasBits = decltype(std::declval<MaterialColor>()._has_bits_);
  static void set_has_colorpickeropen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_animate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KuplungApp::Vec3& color(const MaterialColor* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::KuplungApp::Vec3&
MaterialColor::_Internal::color(const MaterialColor* msg) {
  return *msg->color_;
}
MaterialColor::MaterialColor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.MaterialColor)
}
MaterialColor::MaterialColor(const MaterialColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::KuplungApp::Vec3(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&colorpickeropen_, &from.colorpickeropen_,
    static_cast<size_t>(reinterpret_cast<char*>(&strength_) -
    reinterpret_cast<char*>(&colorpickeropen_)) + sizeof(strength_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.MaterialColor)
}

void MaterialColor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MaterialColor_KuplungDefinitions_2eproto.base);
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strength_) -
      reinterpret_cast<char*>(&color_)) + sizeof(strength_));
}

MaterialColor::~MaterialColor() {
  // @@protoc_insertion_point(destructor:KuplungApp.MaterialColor)
  SharedDtor();
}

void MaterialColor::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void MaterialColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaterialColor& MaterialColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaterialColor_KuplungDefinitions_2eproto.base);
  return *internal_default_instance();
}


void MaterialColor::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.MaterialColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != nullptr);
    color_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&colorpickeropen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&strength_) -
        reinterpret_cast<char*>(&colorpickeropen_)) + sizeof(strength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MaterialColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool colorPickerOpen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_colorpickeropen(&has_bits);
          colorpickeropen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool animate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_animate(&has_bits);
          animate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_strength(&has_bits);
          strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaterialColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.MaterialColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool colorPickerOpen = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_colorpickeropen(), target);
  }

  // required bool animate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_animate(), target);
  }

  // required float strength = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_strength(), target);
  }

  // required .KuplungApp.Vec3 color = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.MaterialColor)
  return target;
}

size_t MaterialColor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.MaterialColor)
  size_t total_size = 0;

  if (_internal_has_color()) {
    // required .KuplungApp.Vec3 color = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  if (_internal_has_colorpickeropen()) {
    // required bool colorPickerOpen = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_animate()) {
    // required bool animate = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_strength()) {
    // required float strength = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MaterialColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.MaterialColor)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .KuplungApp.Vec3 color = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);

    // required bool colorPickerOpen = 1;
    total_size += 1 + 1;

    // required bool animate = 2;
    total_size += 1 + 1;

    // required float strength = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaterialColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.MaterialColor)
  GOOGLE_DCHECK_NE(&from, this);
  const MaterialColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaterialColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.MaterialColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.MaterialColor)
    MergeFrom(*source);
  }
}

void MaterialColor::MergeFrom(const MaterialColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.MaterialColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::KuplungApp::Vec3::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      colorpickeropen_ = from.colorpickeropen_;
    }
    if (cached_has_bits & 0x00000004u) {
      animate_ = from.animate_;
    }
    if (cached_has_bits & 0x00000008u) {
      strength_ = from.strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaterialColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.MaterialColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialColor::CopyFrom(const MaterialColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.MaterialColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialColor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  return true;
}

void MaterialColor::InternalSwap(MaterialColor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(color_, other->color_);
  swap(colorpickeropen_, other->colorpickeropen_);
  swap(animate_, other->animate_);
  swap(strength_, other->strength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaterialColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshMaterialTextureImage::InitAsDefaultInstance() {
}
class MeshMaterialTextureImage::_Internal {
 public:
  using HasBits = decltype(std::declval<MeshMaterialTextureImage>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_usetexture(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MeshMaterialTextureImage::MeshMaterialTextureImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.MeshMaterialTextureImage)
}
MeshMaterialTextureImage::MeshMaterialTextureImage(const MeshMaterialTextureImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image()) {
    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&usetexture_) -
    reinterpret_cast<char*>(&width_)) + sizeof(usetexture_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.MeshMaterialTextureImage)
}

void MeshMaterialTextureImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshMaterialTextureImage_KuplungDefinitions_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usetexture_) -
      reinterpret_cast<char*>(&width_)) + sizeof(usetexture_));
}

MeshMaterialTextureImage::~MeshMaterialTextureImage() {
  // @@protoc_insertion_point(destructor:KuplungApp.MeshMaterialTextureImage)
  SharedDtor();
}

void MeshMaterialTextureImage::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MeshMaterialTextureImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshMaterialTextureImage& MeshMaterialTextureImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshMaterialTextureImage_KuplungDefinitions_2eproto.base);
  return *internal_default_instance();
}


void MeshMaterialTextureImage::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.MeshMaterialTextureImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      image_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usetexture_) -
        reinterpret_cast<char*>(&width_)) + sizeof(usetexture_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MeshMaterialTextureImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string Filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.MeshMaterialTextureImage.Filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.MeshMaterialTextureImage.Image");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool UseTexture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_usetexture(&has_bits);
          usetexture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string Commands = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_commands();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.MeshMaterialTextureImage.Commands");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshMaterialTextureImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.MeshMaterialTextureImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // required string Image = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Image");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image(), target);
  }

  // required int32 Width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // required int32 Height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // required bool UseTexture = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_usetexture(), target);
  }

  // repeated string Commands = 6;
  for (int i = 0, n = this->_internal_commands_size(); i < n; i++) {
    const auto& s = this->_internal_commands(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Commands");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.MeshMaterialTextureImage)
  return target;
}

size_t MeshMaterialTextureImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.MeshMaterialTextureImage)
  size_t total_size = 0;

  if (_internal_has_filename()) {
    // required string Filename = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (_internal_has_image()) {
    // required string Image = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  if (_internal_has_width()) {
    // required int32 Width = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 Height = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (_internal_has_usetexture()) {
    // required bool UseTexture = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MeshMaterialTextureImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.MeshMaterialTextureImage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string Filename = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());

    // required string Image = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());

    // required int32 Width = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

    // required int32 Height = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());

    // required bool UseTexture = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Commands = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(commands_.size());
  for (int i = 0, n = commands_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      commands_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshMaterialTextureImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.MeshMaterialTextureImage)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshMaterialTextureImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshMaterialTextureImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.MeshMaterialTextureImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.MeshMaterialTextureImage)
    MergeFrom(*source);
  }
}

void MeshMaterialTextureImage::MergeFrom(const MeshMaterialTextureImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.MeshMaterialTextureImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      usetexture_ = from.usetexture_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MeshMaterialTextureImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.MeshMaterialTextureImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshMaterialTextureImage::CopyFrom(const MeshMaterialTextureImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.MeshMaterialTextureImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshMaterialTextureImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void MeshMaterialTextureImage::InternalSwap(MeshMaterialTextureImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  commands_.InternalSwap(&other->commands_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(usetexture_, other->usetexture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshMaterialTextureImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshModelMaterial::InitAsDefaultInstance() {
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->ambientcolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->diffusecolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->specularcolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->emissioncolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->textureambient_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturediffuse_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturespecular_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturespecularexp_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturedissolve_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturebump_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturedisplacement_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
}
class MeshModelMaterial::_Internal {
 public:
  using HasBits = decltype(std::declval<MeshModelMaterial>()._has_bits_);
  static void set_has_materialid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_materialtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KuplungApp::Vec3& ambientcolor(const MeshModelMaterial* msg);
  static void set_has_ambientcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KuplungApp::Vec3& diffusecolor(const MeshModelMaterial* msg);
  static void set_has_diffusecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KuplungApp::Vec3& specularcolor(const MeshModelMaterial* msg);
  static void set_has_specularcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KuplungApp::Vec3& emissioncolor(const MeshModelMaterial* msg);
  static void set_has_emissioncolor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_specularexp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_transparency(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_illuminationmode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_opticaldensity(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& textureambient(const MeshModelMaterial* msg);
  static void set_has_textureambient(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturediffuse(const MeshModelMaterial* msg);
  static void set_has_texturediffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturespecular(const MeshModelMaterial* msg);
  static void set_has_texturespecular(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturespecularexp(const MeshModelMaterial* msg);
  static void set_has_texturespecularexp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturedissolve(const MeshModelMaterial* msg);
  static void set_has_texturedissolve(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturebump(const MeshModelMaterial* msg);
  static void set_has_texturebump(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturedisplacement(const MeshModelMaterial* msg);
  static void set_has_texturedisplacement(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::KuplungApp::Vec3&
MeshModelMaterial::_Internal::ambientcolor(const MeshModelMaterial* msg) {
  return *msg->ambientcolor_;
}
const ::KuplungApp::Vec3&
MeshModelMaterial::_Internal::diffusecolor(const MeshModelMaterial* msg) {
  return *msg->diffusecolor_;
}
const ::KuplungApp::Vec3&
MeshModelMaterial::_Internal::specularcolor(const MeshModelMaterial* msg) {
  return *msg->specularcolor_;
}
const ::KuplungApp::Vec3&
MeshModelMaterial::_Internal::emissioncolor(const MeshModelMaterial* msg) {
  return *msg->emissioncolor_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::textureambient(const MeshModelMaterial* msg) {
  return *msg->textureambient_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturediffuse(const MeshModelMaterial* msg) {
  return *msg->texturediffuse_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturespecular(const MeshModelMaterial* msg) {
  return *msg->texturespecular_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturespecularexp(const MeshModelMaterial* msg) {
  return *msg->texturespecularexp_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturedissolve(const MeshModelMaterial* msg) {
  return *msg->texturedissolve_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturebump(const MeshModelMaterial* msg) {
  return *msg->texturebump_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturedisplacement(const MeshModelMaterial* msg) {
  return *msg->texturedisplacement_;
}
MeshModelMaterial::MeshModelMaterial()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.MeshModelMaterial)
}
MeshModelMaterial::MeshModelMaterial(const MeshModelMaterial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  materialtitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_materialtitle()) {
    materialtitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.materialtitle_);
  }
  if (from._internal_has_ambientcolor()) {
    ambientcolor_ = new ::KuplungApp::Vec3(*from.ambientcolor_);
  } else {
    ambientcolor_ = nullptr;
  }
  if (from._internal_has_diffusecolor()) {
    diffusecolor_ = new ::KuplungApp::Vec3(*from.diffusecolor_);
  } else {
    diffusecolor_ = nullptr;
  }
  if (from._internal_has_specularcolor()) {
    specularcolor_ = new ::KuplungApp::Vec3(*from.specularcolor_);
  } else {
    specularcolor_ = nullptr;
  }
  if (from._internal_has_emissioncolor()) {
    emissioncolor_ = new ::KuplungApp::Vec3(*from.emissioncolor_);
  } else {
    emissioncolor_ = nullptr;
  }
  if (from._internal_has_textureambient()) {
    textureambient_ = new ::KuplungApp::MeshMaterialTextureImage(*from.textureambient_);
  } else {
    textureambient_ = nullptr;
  }
  if (from._internal_has_texturediffuse()) {
    texturediffuse_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturediffuse_);
  } else {
    texturediffuse_ = nullptr;
  }
  if (from._internal_has_texturespecular()) {
    texturespecular_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturespecular_);
  } else {
    texturespecular_ = nullptr;
  }
  if (from._internal_has_texturespecularexp()) {
    texturespecularexp_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturespecularexp_);
  } else {
    texturespecularexp_ = nullptr;
  }
  if (from._internal_has_texturedissolve()) {
    texturedissolve_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturedissolve_);
  } else {
    texturedissolve_ = nullptr;
  }
  if (from._internal_has_texturebump()) {
    texturebump_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturebump_);
  } else {
    texturebump_ = nullptr;
  }
  if (from._internal_has_texturedisplacement()) {
    texturedisplacement_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturedisplacement_);
  } else {
    texturedisplacement_ = nullptr;
  }
  ::memcpy(&materialid_, &from.materialid_,
    static_cast<size_t>(reinterpret_cast<char*>(&opticaldensity_) -
    reinterpret_cast<char*>(&materialid_)) + sizeof(opticaldensity_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.MeshModelMaterial)
}

void MeshModelMaterial::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshModelMaterial_KuplungDefinitions_2eproto.base);
  materialtitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ambientcolor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opticaldensity_) -
      reinterpret_cast<char*>(&ambientcolor_)) + sizeof(opticaldensity_));
}

MeshModelMaterial::~MeshModelMaterial() {
  // @@protoc_insertion_point(destructor:KuplungApp.MeshModelMaterial)
  SharedDtor();
}

void MeshModelMaterial::SharedDtor() {
  materialtitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ambientcolor_;
  if (this != internal_default_instance()) delete diffusecolor_;
  if (this != internal_default_instance()) delete specularcolor_;
  if (this != internal_default_instance()) delete emissioncolor_;
  if (this != internal_default_instance()) delete textureambient_;
  if (this != internal_default_instance()) delete texturediffuse_;
  if (this != internal_default_instance()) delete texturespecular_;
  if (this != internal_default_instance()) delete texturespecularexp_;
  if (this != internal_default_instance()) delete texturedissolve_;
  if (this != internal_default_instance()) delete texturebump_;
  if (this != internal_default_instance()) delete texturedisplacement_;
}

void MeshModelMaterial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshModelMaterial& MeshModelMaterial::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshModelMaterial_KuplungDefinitions_2eproto.base);
  return *internal_default_instance();
}


void MeshModelMaterial::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.MeshModelMaterial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      materialtitle_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ambientcolor_ != nullptr);
      ambientcolor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(diffusecolor_ != nullptr);
      diffusecolor_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(specularcolor_ != nullptr);
      specularcolor_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(emissioncolor_ != nullptr);
      emissioncolor_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(textureambient_ != nullptr);
      textureambient_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(texturediffuse_ != nullptr);
      texturediffuse_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(texturespecular_ != nullptr);
      texturespecular_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(texturespecularexp_ != nullptr);
      texturespecularexp_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(texturedissolve_ != nullptr);
      texturedissolve_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(texturebump_ != nullptr);
      texturebump_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(texturedisplacement_ != nullptr);
      texturedisplacement_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&materialid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&illuminationmode_) -
        reinterpret_cast<char*>(&materialid_)) + sizeof(illuminationmode_));
  }
  opticaldensity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MeshModelMaterial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 MaterialID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_materialid(&has_bits);
          materialid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string MaterialTitle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_materialtitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.MeshModelMaterial.MaterialTitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 AmbientColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ambientcolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 DiffuseColor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffusecolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 SpecularColor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_specularcolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 EmissionColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_emissioncolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float SpecularExp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_specularexp(&has_bits);
          specularexp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float Transparency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_transparency(&has_bits);
          transparency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required fixed32 IlluminationMode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_illuminationmode(&has_bits);
          illuminationmode_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required float OpticalDensity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_opticaldensity(&has_bits);
          opticaldensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_textureambient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturediffuse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturespecular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturespecularexp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturedissolve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturebump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturedisplacement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshModelMaterial::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.MeshModelMaterial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MaterialID = 1;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_materialid(), target);
  }

  // required string MaterialTitle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_materialtitle().data(), static_cast<int>(this->_internal_materialtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshModelMaterial.MaterialTitle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_materialtitle(), target);
  }

  // required .KuplungApp.Vec3 AmbientColor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ambientcolor(this), target, stream);
  }

  // required .KuplungApp.Vec3 DiffuseColor = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::diffusecolor(this), target, stream);
  }

  // required .KuplungApp.Vec3 SpecularColor = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::specularcolor(this), target, stream);
  }

  // required .KuplungApp.Vec3 EmissionColor = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::emissioncolor(this), target, stream);
  }

  // required float SpecularExp = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_specularexp(), target);
  }

  // required float Transparency = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_transparency(), target);
  }

  // required fixed32 IlluminationMode = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_illuminationmode(), target);
  }

  // required float OpticalDensity = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_opticaldensity(), target);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::textureambient(this), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::texturediffuse(this), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::texturespecular(this), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::texturespecularexp(this), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::texturedissolve(this), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::texturebump(this), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::texturedisplacement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.MeshModelMaterial)
  return target;
}

size_t MeshModelMaterial::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.MeshModelMaterial)
  size_t total_size = 0;

  if (_internal_has_materialtitle()) {
    // required string MaterialTitle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_materialtitle());
  }

  if (_internal_has_ambientcolor()) {
    // required .KuplungApp.Vec3 AmbientColor = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ambientcolor_);
  }

  if (_internal_has_diffusecolor()) {
    // required .KuplungApp.Vec3 DiffuseColor = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diffusecolor_);
  }

  if (_internal_has_specularcolor()) {
    // required .KuplungApp.Vec3 SpecularColor = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specularcolor_);
  }

  if (_internal_has_emissioncolor()) {
    // required .KuplungApp.Vec3 EmissionColor = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emissioncolor_);
  }

  if (_internal_has_textureambient()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *textureambient_);
  }

  if (_internal_has_texturediffuse()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturediffuse_);
  }

  if (_internal_has_texturespecular()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturespecular_);
  }

  if (_internal_has_texturespecularexp()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturespecularexp_);
  }

  if (_internal_has_texturedissolve()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturedissolve_);
  }

  if (_internal_has_texturebump()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturebump_);
  }

  if (_internal_has_texturedisplacement()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturedisplacement_);
  }

  if (_internal_has_materialid()) {
    // required int32 MaterialID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_materialid());
  }

  if (_internal_has_specularexp()) {
    // required float SpecularExp = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_transparency()) {
    // required float Transparency = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_illuminationmode()) {
    // required fixed32 IlluminationMode = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_opticaldensity()) {
    // required float OpticalDensity = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MeshModelMaterial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.MeshModelMaterial)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0001ffff) ^ 0x0001ffff) == 0) {  // All required fields are present.
    // required string MaterialTitle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_materialtitle());

    // required .KuplungApp.Vec3 AmbientColor = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ambientcolor_);

    // required .KuplungApp.Vec3 DiffuseColor = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diffusecolor_);

    // required .KuplungApp.Vec3 SpecularColor = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specularcolor_);

    // required .KuplungApp.Vec3 EmissionColor = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emissioncolor_);

    // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *textureambient_);

    // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturediffuse_);

    // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturespecular_);

    // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturespecularexp_);

    // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturedissolve_);

    // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturebump_);

    // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *texturedisplacement_);

    // required int32 MaterialID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_materialid());

    // required float SpecularExp = 7;
    total_size += 1 + 4;

    // required float Transparency = 8;
    total_size += 1 + 4;

    // required fixed32 IlluminationMode = 9;
    total_size += 1 + 4;

    // required float OpticalDensity = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshModelMaterial::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.MeshModelMaterial)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshModelMaterial* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshModelMaterial>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.MeshModelMaterial)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.MeshModelMaterial)
    MergeFrom(*source);
  }
}

void MeshModelMaterial::MergeFrom(const MeshModelMaterial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.MeshModelMaterial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      materialtitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.materialtitle_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ambientcolor()->::KuplungApp::Vec3::MergeFrom(from._internal_ambientcolor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_diffusecolor()->::KuplungApp::Vec3::MergeFrom(from._internal_diffusecolor());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_specularcolor()->::KuplungApp::Vec3::MergeFrom(from._internal_specularcolor());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_emissioncolor()->::KuplungApp::Vec3::MergeFrom(from._internal_emissioncolor());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_textureambient()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from._internal_textureambient());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_texturediffuse()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from._internal_texturediffuse());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_texturespecular()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from._internal_texturespecular());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_texturespecularexp()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from._internal_texturespecularexp());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_texturedissolve()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from._internal_texturedissolve());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_texturebump()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from._internal_texturebump());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_texturedisplacement()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from._internal_texturedisplacement());
    }
    if (cached_has_bits & 0x00001000u) {
      materialid_ = from.materialid_;
    }
    if (cached_has_bits & 0x00002000u) {
      specularexp_ = from.specularexp_;
    }
    if (cached_has_bits & 0x00004000u) {
      transparency_ = from.transparency_;
    }
    if (cached_has_bits & 0x00008000u) {
      illuminationmode_ = from.illuminationmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_opticaldensity(from._internal_opticaldensity());
  }
}

void MeshModelMaterial::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.MeshModelMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshModelMaterial::CopyFrom(const MeshModelMaterial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.MeshModelMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshModelMaterial::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;
  if (_internal_has_ambientcolor()) {
    if (!ambientcolor_->IsInitialized()) return false;
  }
  if (_internal_has_diffusecolor()) {
    if (!diffusecolor_->IsInitialized()) return false;
  }
  if (_internal_has_specularcolor()) {
    if (!specularcolor_->IsInitialized()) return false;
  }
  if (_internal_has_emissioncolor()) {
    if (!emissioncolor_->IsInitialized()) return false;
  }
  if (_internal_has_textureambient()) {
    if (!textureambient_->IsInitialized()) return false;
  }
  if (_internal_has_texturediffuse()) {
    if (!texturediffuse_->IsInitialized()) return false;
  }
  if (_internal_has_texturespecular()) {
    if (!texturespecular_->IsInitialized()) return false;
  }
  if (_internal_has_texturespecularexp()) {
    if (!texturespecularexp_->IsInitialized()) return false;
  }
  if (_internal_has_texturedissolve()) {
    if (!texturedissolve_->IsInitialized()) return false;
  }
  if (_internal_has_texturebump()) {
    if (!texturebump_->IsInitialized()) return false;
  }
  if (_internal_has_texturedisplacement()) {
    if (!texturedisplacement_->IsInitialized()) return false;
  }
  return true;
}

void MeshModelMaterial::InternalSwap(MeshModelMaterial* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  materialtitle_.Swap(&other->materialtitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ambientcolor_, other->ambientcolor_);
  swap(diffusecolor_, other->diffusecolor_);
  swap(specularcolor_, other->specularcolor_);
  swap(emissioncolor_, other->emissioncolor_);
  swap(textureambient_, other->textureambient_);
  swap(texturediffuse_, other->texturediffuse_);
  swap(texturespecular_, other->texturespecular_);
  swap(texturespecularexp_, other->texturespecularexp_);
  swap(texturedissolve_, other->texturedissolve_);
  swap(texturebump_, other->texturebump_);
  swap(texturedisplacement_, other->texturedisplacement_);
  swap(materialid_, other->materialid_);
  swap(specularexp_, other->specularexp_);
  swap(transparency_, other->transparency_);
  swap(illuminationmode_, other->illuminationmode_);
  swap(opticaldensity_, other->opticaldensity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshModelMaterial::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mesh::InitAsDefaultInstance() {
  ::KuplungApp::_Mesh_default_instance_._instance.get_mutable()->file_ = const_cast< ::KuplungApp::FBEntity*>(
      ::KuplungApp::FBEntity::internal_default_instance());
  ::KuplungApp::_Mesh_default_instance_._instance.get_mutable()->modelmaterial_ = const_cast< ::KuplungApp::MeshModelMaterial*>(
      ::KuplungApp::MeshModelMaterial::internal_default_instance());
}
class Mesh::_Internal {
 public:
  using HasBits = decltype(std::declval<Mesh>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KuplungApp::FBEntity& file(const Mesh* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_modeltitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_materialtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_countvertices(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_counttexturecoordinates(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_countnormals(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_countindices(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KuplungApp::MeshModelMaterial& modelmaterial(const Mesh* msg);
  static void set_has_modelmaterial(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::KuplungApp::FBEntity&
Mesh::_Internal::file(const Mesh* msg) {
  return *msg->file_;
}
const ::KuplungApp::MeshModelMaterial&
Mesh::_Internal::modelmaterial(const Mesh* msg) {
  return *msg->modelmaterial_;
}
Mesh::Mesh()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.Mesh)
}
Mesh::Mesh(const Mesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      vertices_(from.vertices_),
      texture_coordinates_(from.texture_coordinates_),
      normals_(from.normals_),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modeltitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modeltitle()) {
    modeltitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeltitle_);
  }
  materialtitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_materialtitle()) {
    materialtitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.materialtitle_);
  }
  if (from._internal_has_file()) {
    file_ = new ::KuplungApp::FBEntity(*from.file_);
  } else {
    file_ = nullptr;
  }
  if (from._internal_has_modelmaterial()) {
    modelmaterial_ = new ::KuplungApp::MeshModelMaterial(*from.modelmaterial_);
  } else {
    modelmaterial_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&countindices_) -
    reinterpret_cast<char*>(&id_)) + sizeof(countindices_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Mesh)
}

void Mesh::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mesh_KuplungDefinitions_2eproto.base);
  modeltitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  materialtitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&countindices_) -
      reinterpret_cast<char*>(&file_)) + sizeof(countindices_));
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:KuplungApp.Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  modeltitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  materialtitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete modelmaterial_;
}

void Mesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mesh& Mesh::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mesh_KuplungDefinitions_2eproto.base);
  return *internal_default_instance();
}


void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Mesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  texture_coordinates_.Clear();
  normals_.Clear();
  indices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      modeltitle_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      materialtitle_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(file_ != nullptr);
      file_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(modelmaterial_ != nullptr);
      modelmaterial_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&countnormals_) -
        reinterpret_cast<char*>(&id_)) + sizeof(countnormals_));
  }
  countindices_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Mesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.FBEntity File = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ModelTitle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_modeltitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.Mesh.ModelTitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string MaterialTitle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_materialtitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "KuplungApp.Mesh.MaterialTitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 countVertices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_countvertices(&has_bits);
          countvertices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 countTextureCoordinates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_counttexturecoordinates(&has_bits);
          counttexturecoordinates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 countNormals = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_countnormals(&has_bits);
          countnormals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 countIndices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_countindices(&has_bits);
          countindices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_modelmaterial(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KuplungApp.Vec3 vertices = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KuplungApp.Vec2 texture_coordinates = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_texture_coordinates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KuplungApp.Vec3 normals = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated fixed32 indices = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Mesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ID = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required .KuplungApp.FBEntity File = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::file(this), target, stream);
  }

  // required string ModelTitle = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modeltitle().data(), static_cast<int>(this->_internal_modeltitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.Mesh.ModelTitle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_modeltitle(), target);
  }

  // required string MaterialTitle = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_materialtitle().data(), static_cast<int>(this->_internal_materialtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.Mesh.MaterialTitle");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_materialtitle(), target);
  }

  // required int32 countVertices = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_countvertices(), target);
  }

  // required int32 countTextureCoordinates = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_counttexturecoordinates(), target);
  }

  // required int32 countNormals = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_countnormals(), target);
  }

  // required int32 countIndices = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_countindices(), target);
  }

  // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::modelmaterial(this), target, stream);
  }

  // repeated .KuplungApp.Vec3 vertices = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_vertices(i), target, stream);
  }

  // repeated .KuplungApp.Vec2 texture_coordinates = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_texture_coordinates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_texture_coordinates(i), target, stream);
  }

  // repeated .KuplungApp.Vec3 normals = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_normals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_normals(i), target, stream);
  }

  // repeated fixed32 indices = 13;
  for (int i = 0, n = this->_internal_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(13, this->_internal_indices(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Mesh)
  return target;
}

size_t Mesh::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Mesh)
  size_t total_size = 0;

  if (_internal_has_modeltitle()) {
    // required string ModelTitle = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modeltitle());
  }

  if (_internal_has_materialtitle()) {
    // required string MaterialTitle = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_materialtitle());
  }

  if (_internal_has_file()) {
    // required .KuplungApp.FBEntity File = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_);
  }

  if (_internal_has_modelmaterial()) {
    // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modelmaterial_);
  }

  if (_internal_has_id()) {
    // required int32 ID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_countvertices()) {
    // required int32 countVertices = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countvertices());
  }

  if (_internal_has_counttexturecoordinates()) {
    // required int32 countTextureCoordinates = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_counttexturecoordinates());
  }

  if (_internal_has_countnormals()) {
    // required int32 countNormals = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countnormals());
  }

  if (_internal_has_countindices()) {
    // required int32 countIndices = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countindices());
  }

  return total_size;
}
size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Mesh)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string ModelTitle = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modeltitle());

    // required string MaterialTitle = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_materialtitle());

    // required .KuplungApp.FBEntity File = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_);

    // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modelmaterial_);

    // required int32 ID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required int32 countVertices = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countvertices());

    // required int32 countTextureCoordinates = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_counttexturecoordinates());

    // required int32 countNormals = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countnormals());

    // required int32 countIndices = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_countindices());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KuplungApp.Vec3 vertices = 10;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KuplungApp.Vec2 texture_coordinates = 11;
  total_size += 1UL * this->_internal_texture_coordinates_size();
  for (const auto& msg : this->texture_coordinates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KuplungApp.Vec3 normals = 12;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->normals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed32 indices = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_indices_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_indices_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mesh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.Mesh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.Mesh)
    MergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  texture_coordinates_.MergeFrom(from.texture_coordinates_);
  normals_.MergeFrom(from.normals_);
  indices_.MergeFrom(from.indices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      modeltitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modeltitle_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      materialtitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.materialtitle_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_file()->::KuplungApp::FBEntity::MergeFrom(from._internal_file());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_modelmaterial()->::KuplungApp::MeshModelMaterial::MergeFrom(from._internal_modelmaterial());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      countvertices_ = from.countvertices_;
    }
    if (cached_has_bits & 0x00000040u) {
      counttexturecoordinates_ = from.counttexturecoordinates_;
    }
    if (cached_has_bits & 0x00000080u) {
      countnormals_ = from.countnormals_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_countindices(from._internal_countindices());
  }
}

void Mesh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(vertices_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(texture_coordinates_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(normals_)) return false;
  if (_internal_has_file()) {
    if (!file_->IsInitialized()) return false;
  }
  if (_internal_has_modelmaterial()) {
    if (!modelmaterial_->IsInitialized()) return false;
  }
  return true;
}

void Mesh::InternalSwap(Mesh* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vertices_.InternalSwap(&other->vertices_);
  texture_coordinates_.InternalSwap(&other->texture_coordinates_);
  normals_.InternalSwap(&other->normals_);
  indices_.InternalSwap(&other->indices_);
  modeltitle_.Swap(&other->modeltitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  materialtitle_.Swap(&other->materialtitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_, other->file_);
  swap(modelmaterial_, other->modelmaterial_);
  swap(id_, other->id_);
  swap(countvertices_, other->countvertices_);
  swap(counttexturecoordinates_, other->counttexturecoordinates_);
  swap(countnormals_, other->countnormals_);
  swap(countindices_, other->countindices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mesh::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KuplungApp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KuplungApp::Vec2* Arena::CreateMaybeMessage< ::KuplungApp::Vec2 >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::Vec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::Vec3* Arena::CreateMaybeMessage< ::KuplungApp::Vec3 >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::Vec4* Arena::CreateMaybeMessage< ::KuplungApp::Vec4 >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::Vec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::ObjectCoordinate* Arena::CreateMaybeMessage< ::KuplungApp::ObjectCoordinate >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::ObjectCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::FBEntity* Arena::CreateMaybeMessage< ::KuplungApp::FBEntity >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::FBEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::MaterialColor* Arena::CreateMaybeMessage< ::KuplungApp::MaterialColor >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::MaterialColor >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::MeshMaterialTextureImage* Arena::CreateMaybeMessage< ::KuplungApp::MeshMaterialTextureImage >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::MeshMaterialTextureImage >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::MeshModelMaterial* Arena::CreateMaybeMessage< ::KuplungApp::MeshModelMaterial >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::MeshModelMaterial >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::Mesh* Arena::CreateMaybeMessage< ::KuplungApp::Mesh >(Arena* arena) {
  return Arena::CreateInternal< ::KuplungApp::Mesh >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
