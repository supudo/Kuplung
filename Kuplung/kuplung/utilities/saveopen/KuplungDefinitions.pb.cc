// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungDefinitions.proto

#include "KuplungDefinitions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace KuplungApp {
PROTOBUF_CONSTEXPR Vec2::Vec2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct Vec2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vec2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vec2DefaultTypeInternal() {}
  union {
    Vec2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vec2DefaultTypeInternal _Vec2_default_instance_;
PROTOBUF_CONSTEXPR Vec3::Vec3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct Vec3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vec3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vec3DefaultTypeInternal() {}
  union {
    Vec3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vec3DefaultTypeInternal _Vec3_default_instance_;
PROTOBUF_CONSTEXPR Vec4::Vec4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0} {}
struct Vec4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vec4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vec4DefaultTypeInternal() {}
  union {
    Vec4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vec4DefaultTypeInternal _Vec4_default_instance_;
PROTOBUF_CONSTEXPR ObjectCoordinate::ObjectCoordinate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.animate_)*/false
  , /*decltype(_impl_.point_)*/0} {}
struct ObjectCoordinateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectCoordinateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectCoordinateDefaultTypeInternal() {}
  union {
    ObjectCoordinate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectCoordinateDefaultTypeInternal _ObjectCoordinate_default_instance_;
PROTOBUF_CONSTEXPR FBEntity::FBEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extension_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.modifieddate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isfile_)*/false} {}
struct FBEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FBEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FBEntityDefaultTypeInternal() {}
  union {
    FBEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FBEntityDefaultTypeInternal _FBEntity_default_instance_;
PROTOBUF_CONSTEXPR MaterialColor::MaterialColor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.colorpickeropen_)*/false
  , /*decltype(_impl_.animate_)*/false
  , /*decltype(_impl_.strength_)*/0} {}
struct MaterialColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaterialColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaterialColorDefaultTypeInternal() {}
  union {
    MaterialColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaterialColorDefaultTypeInternal _MaterialColor_default_instance_;
PROTOBUF_CONSTEXPR MeshMaterialTextureImage::MeshMaterialTextureImage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commands_)*/{}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.usetexture_)*/false} {}
struct MeshMaterialTextureImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshMaterialTextureImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshMaterialTextureImageDefaultTypeInternal() {}
  union {
    MeshMaterialTextureImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshMaterialTextureImageDefaultTypeInternal _MeshMaterialTextureImage_default_instance_;
PROTOBUF_CONSTEXPR MeshModelMaterial::MeshModelMaterial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.materialtitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ambientcolor_)*/nullptr
  , /*decltype(_impl_.diffusecolor_)*/nullptr
  , /*decltype(_impl_.specularcolor_)*/nullptr
  , /*decltype(_impl_.emissioncolor_)*/nullptr
  , /*decltype(_impl_.textureambient_)*/nullptr
  , /*decltype(_impl_.texturediffuse_)*/nullptr
  , /*decltype(_impl_.texturespecular_)*/nullptr
  , /*decltype(_impl_.texturespecularexp_)*/nullptr
  , /*decltype(_impl_.texturedissolve_)*/nullptr
  , /*decltype(_impl_.texturebump_)*/nullptr
  , /*decltype(_impl_.texturedisplacement_)*/nullptr
  , /*decltype(_impl_.materialid_)*/0
  , /*decltype(_impl_.specularexp_)*/0
  , /*decltype(_impl_.transparency_)*/0
  , /*decltype(_impl_.illuminationmode_)*/0u
  , /*decltype(_impl_.opticaldensity_)*/0} {}
struct MeshModelMaterialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshModelMaterialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshModelMaterialDefaultTypeInternal() {}
  union {
    MeshModelMaterial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshModelMaterialDefaultTypeInternal _MeshModelMaterial_default_instance_;
PROTOBUF_CONSTEXPR Mesh::Mesh(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vertices_)*/{}
  , /*decltype(_impl_.texture_coordinates_)*/{}
  , /*decltype(_impl_.normals_)*/{}
  , /*decltype(_impl_.indices_)*/{}
  , /*decltype(_impl_.modeltitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.materialtitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_)*/nullptr
  , /*decltype(_impl_.modelmaterial_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.countvertices_)*/0
  , /*decltype(_impl_.counttexturecoordinates_)*/0
  , /*decltype(_impl_.countnormals_)*/0
  , /*decltype(_impl_.countindices_)*/0} {}
struct MeshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshDefaultTypeInternal() {}
  union {
    Mesh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshDefaultTypeInternal _Mesh_default_instance_;
}  // namespace KuplungApp
static ::_pb::Metadata file_level_metadata_KuplungDefinitions_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_KuplungDefinitions_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_KuplungDefinitions_2eproto = nullptr;

const uint32_t TableStruct_KuplungDefinitions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec2, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec2, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec2, _impl_.y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec3, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec3, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Vec4, _impl_.w_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, _impl_.animate_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, _impl_.point_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, _impl_.isfile_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, _impl_.extension_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, _impl_.modifieddate_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::FBEntity, _impl_.size_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, _impl_.colorpickeropen_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, _impl_.animate_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, _impl_.strength_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MaterialColor, _impl_.color_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _impl_.usetexture_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _impl_.commands_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.materialid_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.materialtitle_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.ambientcolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.diffusecolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.specularcolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.emissioncolor_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.specularexp_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.transparency_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.illuminationmode_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.opticaldensity_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.textureambient_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.texturediffuse_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.texturespecular_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.texturespecularexp_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.texturedissolve_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.texturebump_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _impl_.texturedisplacement_),
  12,
  0,
  1,
  2,
  3,
  4,
  13,
  14,
  15,
  16,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.file_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.modeltitle_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.materialtitle_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.countvertices_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.counttexturecoordinates_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.countnormals_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.countindices_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.modelmaterial_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.vertices_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.texture_coordinates_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.normals_),
  PROTOBUF_FIELD_OFFSET(::KuplungApp::Mesh, _impl_.indices_),
  4,
  2,
  0,
  1,
  5,
  6,
  7,
  8,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::KuplungApp::Vec2)},
  { 10, 19, -1, sizeof(::KuplungApp::Vec3)},
  { 22, 32, -1, sizeof(::KuplungApp::Vec4)},
  { 36, 44, -1, sizeof(::KuplungApp::ObjectCoordinate)},
  { 46, 58, -1, sizeof(::KuplungApp::FBEntity)},
  { 64, 74, -1, sizeof(::KuplungApp::MaterialColor)},
  { 78, 90, -1, sizeof(::KuplungApp::MeshMaterialTextureImage)},
  { 96, 119, -1, sizeof(::KuplungApp::MeshModelMaterial)},
  { 136, 155, -1, sizeof(::KuplungApp::Mesh)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::KuplungApp::_Vec2_default_instance_._instance,
  &::KuplungApp::_Vec3_default_instance_._instance,
  &::KuplungApp::_Vec4_default_instance_._instance,
  &::KuplungApp::_ObjectCoordinate_default_instance_._instance,
  &::KuplungApp::_FBEntity_default_instance_._instance,
  &::KuplungApp::_MaterialColor_default_instance_._instance,
  &::KuplungApp::_MeshMaterialTextureImage_default_instance_._instance,
  &::KuplungApp::_MeshModelMaterial_default_instance_._instance,
  &::KuplungApp::_Mesh_default_instance_._instance,
};

const char descriptor_table_protodef_KuplungDefinitions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030KuplungDefinitions.proto\022\nKuplungApp\"\034"
  "\n\004Vec2\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\'\n\004Vec3\022\t\n\001"
  "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"2\n\004Vec4\022\t\n"
  "\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\t\n\001w\030\004 \002("
  "\002\"2\n\020ObjectCoordinate\022\017\n\007animate\030\001 \002(\010\022\r"
  "\n\005point\030\002 \002(\002\"n\n\010FBEntity\022\016\n\006isFile\030\001 \002("
  "\010\022\014\n\004path\030\002 \002(\t\022\r\n\005title\030\003 \002(\t\022\021\n\textens"
  "ion\030\004 \002(\t\022\024\n\014modifiedDate\030\005 \002(\t\022\014\n\004size\030"
  "\006 \002(\t\"l\n\rMaterialColor\022\027\n\017colorPickerOpe"
  "n\030\001 \002(\010\022\017\n\007animate\030\002 \002(\010\022\020\n\010strength\030\003 \002"
  "(\002\022\037\n\005color\030\004 \002(\0132\020.KuplungApp.Vec3\"\200\001\n\030"
  "MeshMaterialTextureImage\022\020\n\010Filename\030\001 \002"
  "(\t\022\r\n\005Image\030\002 \002(\t\022\r\n\005Width\030\003 \002(\005\022\016\n\006Heig"
  "ht\030\004 \002(\005\022\022\n\nUseTexture\030\005 \002(\010\022\020\n\010Commands"
  "\030\006 \003(\t\"\367\005\n\021MeshModelMaterial\022\022\n\nMaterial"
  "ID\030\001 \002(\005\022\025\n\rMaterialTitle\030\002 \002(\t\022&\n\014Ambie"
  "ntColor\030\003 \002(\0132\020.KuplungApp.Vec3\022&\n\014Diffu"
  "seColor\030\004 \002(\0132\020.KuplungApp.Vec3\022\'\n\rSpecu"
  "larColor\030\005 \002(\0132\020.KuplungApp.Vec3\022\'\n\rEmis"
  "sionColor\030\006 \002(\0132\020.KuplungApp.Vec3\022\023\n\013Spe"
  "cularExp\030\007 \002(\002\022\024\n\014Transparency\030\010 \002(\002\022\030\n\020"
  "IlluminationMode\030\t \002(\007\022\026\n\016OpticalDensity"
  "\030\n \002(\002\022<\n\016TextureAmbient\030\013 \002(\0132$.Kuplung"
  "App.MeshMaterialTextureImage\022<\n\016TextureD"
  "iffuse\030\014 \002(\0132$.KuplungApp.MeshMaterialTe"
  "xtureImage\022=\n\017TextureSpecular\030\r \002(\0132$.Ku"
  "plungApp.MeshMaterialTextureImage\022@\n\022Tex"
  "tureSpecularExp\030\016 \002(\0132$.KuplungApp.MeshM"
  "aterialTextureImage\022=\n\017TextureDissolve\030\017"
  " \002(\0132$.KuplungApp.MeshMaterialTextureIma"
  "ge\0229\n\013TextureBump\030\020 \002(\0132$.KuplungApp.Mes"
  "hMaterialTextureImage\022A\n\023TextureDisplace"
  "ment\030\021 \002(\0132$.KuplungApp.MeshMaterialText"
  "ureImage\"\202\003\n\004Mesh\022\n\n\002ID\030\001 \002(\005\022\"\n\004File\030\002 "
  "\002(\0132\024.KuplungApp.FBEntity\022\022\n\nModelTitle\030"
  "\003 \002(\t\022\025\n\rMaterialTitle\030\004 \002(\t\022\025\n\rcountVer"
  "tices\030\005 \002(\005\022\037\n\027countTextureCoordinates\030\006"
  " \002(\005\022\024\n\014countNormals\030\007 \002(\005\022\024\n\014countIndic"
  "es\030\010 \002(\005\0224\n\rModelMaterial\030\t \002(\0132\035.Kuplun"
  "gApp.MeshModelMaterial\022\"\n\010vertices\030\n \003(\013"
  "2\020.KuplungApp.Vec3\022-\n\023texture_coordinate"
  "s\030\013 \003(\0132\020.KuplungApp.Vec2\022!\n\007normals\030\014 \003"
  "(\0132\020.KuplungApp.Vec3\022\017\n\007indices\030\r \003(\007"
  ;
static ::_pbi::once_flag descriptor_table_KuplungDefinitions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_KuplungDefinitions_2eproto = {
    false, false, 1717, descriptor_table_protodef_KuplungDefinitions_2eproto,
    "KuplungDefinitions.proto",
    &descriptor_table_KuplungDefinitions_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_KuplungDefinitions_2eproto::offsets,
    file_level_metadata_KuplungDefinitions_2eproto, file_level_enum_descriptors_KuplungDefinitions_2eproto,
    file_level_service_descriptors_KuplungDefinitions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_KuplungDefinitions_2eproto_getter() {
  return &descriptor_table_KuplungDefinitions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_KuplungDefinitions_2eproto(&descriptor_table_KuplungDefinitions_2eproto);
namespace KuplungApp {

// ===================================================================

class Vec2::_Internal {
 public:
  using HasBits = decltype(std::declval<Vec2>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Vec2::Vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KuplungApp.Vec2)
}
Vec2::Vec2(const Vec2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vec2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Vec2)
}

inline void Vec2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

Vec2::~Vec2() {
  // @@protoc_insertion_point(destructor:KuplungApp.Vec2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vec2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Vec2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Vec2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Vec2)
  return target;
}

size_t Vec2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Vec2)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Vec2)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vec2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec2::GetClassData() const { return &_class_data_; }


void Vec2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vec2*>(&to_msg);
  auto& from = static_cast<const Vec2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Vec2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec2::CopyFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Vec2::InternalSwap(Vec2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec2, _impl_.y_)
      + sizeof(Vec2::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vec2, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KuplungDefinitions_2eproto_getter, &descriptor_table_KuplungDefinitions_2eproto_once,
      file_level_metadata_KuplungDefinitions_2eproto[0]);
}

// ===================================================================

class Vec3::_Internal {
 public:
  using HasBits = decltype(std::declval<Vec3>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Vec3::Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KuplungApp.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vec3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Vec3)
}

inline void Vec3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:KuplungApp.Vec3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vec3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Vec3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Vec3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Vec3)
  return target;
}

size_t Vec3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Vec3)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Vec3)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vec3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec3::GetClassData() const { return &_class_data_; }


void Vec3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vec3*>(&to_msg);
  auto& from = static_cast<const Vec3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Vec3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3, _impl_.z_)
      + sizeof(Vec3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vec3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KuplungDefinitions_2eproto_getter, &descriptor_table_KuplungDefinitions_2eproto_once,
      file_level_metadata_KuplungDefinitions_2eproto[1]);
}

// ===================================================================

class Vec4::_Internal {
 public:
  using HasBits = decltype(std::declval<Vec4>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Vec4::Vec4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KuplungApp.Vec4)
}
Vec4::Vec4(const Vec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vec4* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Vec4)
}

inline void Vec4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
  };
}

Vec4::~Vec4() {
  // @@protoc_insertion_point(destructor:KuplungApp.Vec4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vec4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vec4::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Vec4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.w_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_w(&has_bits);
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Vec4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // required float w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Vec4)
  return target;
}

size_t Vec4::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Vec4)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_w()) {
    // required float w = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Vec4)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float w = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vec4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec4::GetClassData() const { return &_class_data_; }


void Vec4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vec4*>(&to_msg);
  auto& from = static_cast<const Vec4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Vec4)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.w_ = from._impl_.w_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec4::CopyFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Vec4::InternalSwap(Vec4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec4, _impl_.w_)
      + sizeof(Vec4::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Vec4, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KuplungDefinitions_2eproto_getter, &descriptor_table_KuplungDefinitions_2eproto_once,
      file_level_metadata_KuplungDefinitions_2eproto[2]);
}

// ===================================================================

class ObjectCoordinate::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectCoordinate>()._impl_._has_bits_);
  static void set_has_animate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ObjectCoordinate::ObjectCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KuplungApp.ObjectCoordinate)
}
ObjectCoordinate::ObjectCoordinate(const ObjectCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectCoordinate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.animate_){}
    , decltype(_impl_.point_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.animate_, &from._impl_.animate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.point_) -
    reinterpret_cast<char*>(&_impl_.animate_)) + sizeof(_impl_.point_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.ObjectCoordinate)
}

inline void ObjectCoordinate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.animate_){false}
    , decltype(_impl_.point_){0}
  };
}

ObjectCoordinate::~ObjectCoordinate() {
  // @@protoc_insertion_point(destructor:KuplungApp.ObjectCoordinate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectCoordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObjectCoordinate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.ObjectCoordinate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.animate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.point_) -
        reinterpret_cast<char*>(&_impl_.animate_)) + sizeof(_impl_.point_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectCoordinate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool animate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_animate(&has_bits);
          _impl_.animate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_point(&has_bits);
          _impl_.point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectCoordinate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.ObjectCoordinate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool animate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_animate(), target);
  }

  // required float point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.ObjectCoordinate)
  return target;
}

size_t ObjectCoordinate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.ObjectCoordinate)
  size_t total_size = 0;

  if (_internal_has_animate()) {
    // required bool animate = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_point()) {
    // required float point = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ObjectCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.ObjectCoordinate)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool animate = 1;
    total_size += 1 + 1;

    // required float point = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectCoordinate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectCoordinate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectCoordinate::GetClassData() const { return &_class_data_; }


void ObjectCoordinate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectCoordinate*>(&to_msg);
  auto& from = static_cast<const ObjectCoordinate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.ObjectCoordinate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.animate_ = from._impl_.animate_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.point_ = from._impl_.point_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectCoordinate::CopyFrom(const ObjectCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.ObjectCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectCoordinate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ObjectCoordinate::InternalSwap(ObjectCoordinate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectCoordinate, _impl_.point_)
      + sizeof(ObjectCoordinate::_impl_.point_)
      - PROTOBUF_FIELD_OFFSET(ObjectCoordinate, _impl_.animate_)>(
          reinterpret_cast<char*>(&_impl_.animate_),
          reinterpret_cast<char*>(&other->_impl_.animate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectCoordinate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KuplungDefinitions_2eproto_getter, &descriptor_table_KuplungDefinitions_2eproto_once,
      file_level_metadata_KuplungDefinitions_2eproto[3]);
}

// ===================================================================

class FBEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<FBEntity>()._impl_._has_bits_);
  static void set_has_isfile(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_modifieddate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

FBEntity::FBEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KuplungApp.FBEntity)
}
FBEntity::FBEntity(const FBEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FBEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.extension_){}
    , decltype(_impl_.modifieddate_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.isfile_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extension()) {
    _this->_impl_.extension_.Set(from._internal_extension(), 
      _this->GetArenaForAllocation());
  }
  _impl_.modifieddate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.modifieddate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_modifieddate()) {
    _this->_impl_.modifieddate_.Set(from._internal_modifieddate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.size_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_size()) {
    _this->_impl_.size_.Set(from._internal_size(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.isfile_ = from._impl_.isfile_;
  // @@protoc_insertion_point(copy_constructor:KuplungApp.FBEntity)
}

inline void FBEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.extension_){}
    , decltype(_impl_.modifieddate_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.isfile_){false}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.modifieddate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.modifieddate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.size_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FBEntity::~FBEntity() {
  // @@protoc_insertion_point(destructor:KuplungApp.FBEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FBEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.title_.Destroy();
  _impl_.extension_.Destroy();
  _impl_.modifieddate_.Destroy();
  _impl_.size_.Destroy();
}

void FBEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FBEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.FBEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.extension_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.modifieddate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.size_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.isfile_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FBEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool isFile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_isfile(&has_bits);
          _impl_.isfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KuplungApp.FBEntity.path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KuplungApp.FBEntity.title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_extension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KuplungApp.FBEntity.extension");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string modifiedDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_modifieddate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KuplungApp.FBEntity.modifiedDate");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KuplungApp.FBEntity.size");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FBEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.FBEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool isFile = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isfile(), target);
  }

  // required string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // required string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // required string extension = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.extension");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_extension(), target);
  }

  // required string modifiedDate = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modifieddate().data(), static_cast<int>(this->_internal_modifieddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.modifiedDate");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_modifieddate(), target);
  }

  // required string size = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_size().data(), static_cast<int>(this->_internal_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.size");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.FBEntity)
  return target;
}

size_t FBEntity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.FBEntity)
  size_t total_size = 0;

  if (_internal_has_path()) {
    // required string path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (_internal_has_title()) {
    // required string title = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (_internal_has_extension()) {
    // required string extension = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());
  }

  if (_internal_has_modifieddate()) {
    // required string modifiedDate = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifieddate());
  }

  if (_internal_has_size()) {
    // required string size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_size());
  }

  if (_internal_has_isfile()) {
    // required bool isFile = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FBEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.FBEntity)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());

    // required string title = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());

    // required string extension = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());

    // required string modifiedDate = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifieddate());

    // required string size = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_size());

    // required bool isFile = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FBEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FBEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FBEntity::GetClassData() const { return &_class_data_; }


void FBEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FBEntity*>(&to_msg);
  auto& from = static_cast<const FBEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.FBEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_extension(from._internal_extension());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_modifieddate(from._internal_modifieddate());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_size(from._internal_size());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.isfile_ = from._impl_.isfile_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FBEntity::CopyFrom(const FBEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.FBEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FBEntity::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FBEntity::InternalSwap(FBEntity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extension_, lhs_arena,
      &other->_impl_.extension_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.modifieddate_, lhs_arena,
      &other->_impl_.modifieddate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.size_, lhs_arena,
      &other->_impl_.size_, rhs_arena
  );
  swap(_impl_.isfile_, other->_impl_.isfile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FBEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KuplungDefinitions_2eproto_getter, &descriptor_table_KuplungDefinitions_2eproto_once,
      file_level_metadata_KuplungDefinitions_2eproto[4]);
}

// ===================================================================

class MaterialColor::_Internal {
 public:
  using HasBits = decltype(std::declval<MaterialColor>()._impl_._has_bits_);
  static void set_has_colorpickeropen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_animate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KuplungApp::Vec3& color(const MaterialColor* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::KuplungApp::Vec3&
MaterialColor::_Internal::color(const MaterialColor* msg) {
  return *msg->_impl_.color_;
}
MaterialColor::MaterialColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KuplungApp.MaterialColor)
}
MaterialColor::MaterialColor(const MaterialColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MaterialColor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.colorpickeropen_){}
    , decltype(_impl_.animate_){}
    , decltype(_impl_.strength_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::KuplungApp::Vec3(*from._impl_.color_);
  }
  ::memcpy(&_impl_.colorpickeropen_, &from._impl_.colorpickeropen_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.strength_) -
    reinterpret_cast<char*>(&_impl_.colorpickeropen_)) + sizeof(_impl_.strength_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.MaterialColor)
}

inline void MaterialColor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.colorpickeropen_){false}
    , decltype(_impl_.animate_){false}
    , decltype(_impl_.strength_){0}
  };
}

MaterialColor::~MaterialColor() {
  // @@protoc_insertion_point(destructor:KuplungApp.MaterialColor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaterialColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.color_;
}

void MaterialColor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaterialColor::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.MaterialColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.color_ != nullptr);
    _impl_.color_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.colorpickeropen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.strength_) -
        reinterpret_cast<char*>(&_impl_.colorpickeropen_)) + sizeof(_impl_.strength_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaterialColor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool colorPickerOpen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_colorpickeropen(&has_bits);
          _impl_.colorpickeropen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool animate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_animate(&has_bits);
          _impl_.animate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_strength(&has_bits);
          _impl_.strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MaterialColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.MaterialColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool colorPickerOpen = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_colorpickeropen(), target);
  }

  // required bool animate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_animate(), target);
  }

  // required float strength = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_strength(), target);
  }

  // required .KuplungApp.Vec3 color = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.MaterialColor)
  return target;
}

size_t MaterialColor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.MaterialColor)
  size_t total_size = 0;

  if (_internal_has_color()) {
    // required .KuplungApp.Vec3 color = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  if (_internal_has_colorpickeropen()) {
    // required bool colorPickerOpen = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_animate()) {
    // required bool animate = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_strength()) {
    // required float strength = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MaterialColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.MaterialColor)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .KuplungApp.Vec3 color = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);

    // required bool colorPickerOpen = 1;
    total_size += 1 + 1;

    // required bool animate = 2;
    total_size += 1 + 1;

    // required float strength = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaterialColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaterialColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaterialColor::GetClassData() const { return &_class_data_; }


void MaterialColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaterialColor*>(&to_msg);
  auto& from = static_cast<const MaterialColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.MaterialColor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_color()->::KuplungApp::Vec3::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.colorpickeropen_ = from._impl_.colorpickeropen_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.animate_ = from._impl_.animate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.strength_ = from._impl_.strength_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaterialColor::CopyFrom(const MaterialColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.MaterialColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialColor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_color()) {
    if (!_impl_.color_->IsInitialized()) return false;
  }
  return true;
}

void MaterialColor::InternalSwap(MaterialColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaterialColor, _impl_.strength_)
      + sizeof(MaterialColor::_impl_.strength_)
      - PROTOBUF_FIELD_OFFSET(MaterialColor, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaterialColor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KuplungDefinitions_2eproto_getter, &descriptor_table_KuplungDefinitions_2eproto_once,
      file_level_metadata_KuplungDefinitions_2eproto[5]);
}

// ===================================================================

class MeshMaterialTextureImage::_Internal {
 public:
  using HasBits = decltype(std::declval<MeshMaterialTextureImage>()._impl_._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_usetexture(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

MeshMaterialTextureImage::MeshMaterialTextureImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KuplungApp.MeshMaterialTextureImage)
}
MeshMaterialTextureImage::MeshMaterialTextureImage(const MeshMaterialTextureImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MeshMaterialTextureImage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commands_){from._impl_.commands_}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.image_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.usetexture_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usetexture_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.usetexture_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.MeshMaterialTextureImage)
}

inline void MeshMaterialTextureImage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commands_){arena}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.image_){}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.usetexture_){false}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MeshMaterialTextureImage::~MeshMaterialTextureImage() {
  // @@protoc_insertion_point(destructor:KuplungApp.MeshMaterialTextureImage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeshMaterialTextureImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commands_.~RepeatedPtrField();
  _impl_.filename_.Destroy();
  _impl_.image_.Destroy();
}

void MeshMaterialTextureImage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeshMaterialTextureImage::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.MeshMaterialTextureImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.image_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.usetexture_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.usetexture_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshMaterialTextureImage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string Filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KuplungApp.MeshMaterialTextureImage.Filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string Image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KuplungApp.MeshMaterialTextureImage.Image");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 Width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 Height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool UseTexture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_usetexture(&has_bits);
          _impl_.usetexture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string Commands = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_commands();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KuplungApp.MeshMaterialTextureImage.Commands");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeshMaterialTextureImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.MeshMaterialTextureImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string Filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // required string Image = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Image");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image(), target);
  }

  // required int32 Width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // required int32 Height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // required bool UseTexture = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_usetexture(), target);
  }

  // repeated string Commands = 6;
  for (int i = 0, n = this->_internal_commands_size(); i < n; i++) {
    const auto& s = this->_internal_commands(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Commands");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.MeshMaterialTextureImage)
  return target;
}

size_t MeshMaterialTextureImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.MeshMaterialTextureImage)
  size_t total_size = 0;

  if (_internal_has_filename()) {
    // required string Filename = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (_internal_has_image()) {
    // required string Image = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  if (_internal_has_width()) {
    // required int32 Width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  if (_internal_has_height()) {
    // required int32 Height = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  if (_internal_has_usetexture()) {
    // required bool UseTexture = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MeshMaterialTextureImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.MeshMaterialTextureImage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string Filename = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());

    // required string Image = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());

    // required int32 Width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());

    // required int32 Height = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());

    // required bool UseTexture = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Commands = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.commands_.size());
  for (int i = 0, n = _impl_.commands_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.commands_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeshMaterialTextureImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeshMaterialTextureImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeshMaterialTextureImage::GetClassData() const { return &_class_data_; }


void MeshMaterialTextureImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MeshMaterialTextureImage*>(&to_msg);
  auto& from = static_cast<const MeshMaterialTextureImage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.MeshMaterialTextureImage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.commands_.MergeFrom(from._impl_.commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.usetexture_ = from._impl_.usetexture_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeshMaterialTextureImage::CopyFrom(const MeshMaterialTextureImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.MeshMaterialTextureImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshMaterialTextureImage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MeshMaterialTextureImage::InternalSwap(MeshMaterialTextureImage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.commands_.InternalSwap(&other->_impl_.commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeshMaterialTextureImage, _impl_.usetexture_)
      + sizeof(MeshMaterialTextureImage::_impl_.usetexture_)
      - PROTOBUF_FIELD_OFFSET(MeshMaterialTextureImage, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshMaterialTextureImage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KuplungDefinitions_2eproto_getter, &descriptor_table_KuplungDefinitions_2eproto_once,
      file_level_metadata_KuplungDefinitions_2eproto[6]);
}

// ===================================================================

class MeshModelMaterial::_Internal {
 public:
  using HasBits = decltype(std::declval<MeshModelMaterial>()._impl_._has_bits_);
  static void set_has_materialid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_materialtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KuplungApp::Vec3& ambientcolor(const MeshModelMaterial* msg);
  static void set_has_ambientcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KuplungApp::Vec3& diffusecolor(const MeshModelMaterial* msg);
  static void set_has_diffusecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KuplungApp::Vec3& specularcolor(const MeshModelMaterial* msg);
  static void set_has_specularcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KuplungApp::Vec3& emissioncolor(const MeshModelMaterial* msg);
  static void set_has_emissioncolor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_specularexp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_transparency(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_illuminationmode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_opticaldensity(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& textureambient(const MeshModelMaterial* msg);
  static void set_has_textureambient(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturediffuse(const MeshModelMaterial* msg);
  static void set_has_texturediffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturespecular(const MeshModelMaterial* msg);
  static void set_has_texturespecular(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturespecularexp(const MeshModelMaterial* msg);
  static void set_has_texturespecularexp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturedissolve(const MeshModelMaterial* msg);
  static void set_has_texturedissolve(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturebump(const MeshModelMaterial* msg);
  static void set_has_texturebump(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::KuplungApp::MeshMaterialTextureImage& texturedisplacement(const MeshModelMaterial* msg);
  static void set_has_texturedisplacement(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0001ffff) ^ 0x0001ffff) != 0;
  }
};

const ::KuplungApp::Vec3&
MeshModelMaterial::_Internal::ambientcolor(const MeshModelMaterial* msg) {
  return *msg->_impl_.ambientcolor_;
}
const ::KuplungApp::Vec3&
MeshModelMaterial::_Internal::diffusecolor(const MeshModelMaterial* msg) {
  return *msg->_impl_.diffusecolor_;
}
const ::KuplungApp::Vec3&
MeshModelMaterial::_Internal::specularcolor(const MeshModelMaterial* msg) {
  return *msg->_impl_.specularcolor_;
}
const ::KuplungApp::Vec3&
MeshModelMaterial::_Internal::emissioncolor(const MeshModelMaterial* msg) {
  return *msg->_impl_.emissioncolor_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::textureambient(const MeshModelMaterial* msg) {
  return *msg->_impl_.textureambient_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturediffuse(const MeshModelMaterial* msg) {
  return *msg->_impl_.texturediffuse_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturespecular(const MeshModelMaterial* msg) {
  return *msg->_impl_.texturespecular_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturespecularexp(const MeshModelMaterial* msg) {
  return *msg->_impl_.texturespecularexp_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturedissolve(const MeshModelMaterial* msg) {
  return *msg->_impl_.texturedissolve_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturebump(const MeshModelMaterial* msg) {
  return *msg->_impl_.texturebump_;
}
const ::KuplungApp::MeshMaterialTextureImage&
MeshModelMaterial::_Internal::texturedisplacement(const MeshModelMaterial* msg) {
  return *msg->_impl_.texturedisplacement_;
}
MeshModelMaterial::MeshModelMaterial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KuplungApp.MeshModelMaterial)
}
MeshModelMaterial::MeshModelMaterial(const MeshModelMaterial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MeshModelMaterial* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.materialtitle_){}
    , decltype(_impl_.ambientcolor_){nullptr}
    , decltype(_impl_.diffusecolor_){nullptr}
    , decltype(_impl_.specularcolor_){nullptr}
    , decltype(_impl_.emissioncolor_){nullptr}
    , decltype(_impl_.textureambient_){nullptr}
    , decltype(_impl_.texturediffuse_){nullptr}
    , decltype(_impl_.texturespecular_){nullptr}
    , decltype(_impl_.texturespecularexp_){nullptr}
    , decltype(_impl_.texturedissolve_){nullptr}
    , decltype(_impl_.texturebump_){nullptr}
    , decltype(_impl_.texturedisplacement_){nullptr}
    , decltype(_impl_.materialid_){}
    , decltype(_impl_.specularexp_){}
    , decltype(_impl_.transparency_){}
    , decltype(_impl_.illuminationmode_){}
    , decltype(_impl_.opticaldensity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.materialtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.materialtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_materialtitle()) {
    _this->_impl_.materialtitle_.Set(from._internal_materialtitle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ambientcolor()) {
    _this->_impl_.ambientcolor_ = new ::KuplungApp::Vec3(*from._impl_.ambientcolor_);
  }
  if (from._internal_has_diffusecolor()) {
    _this->_impl_.diffusecolor_ = new ::KuplungApp::Vec3(*from._impl_.diffusecolor_);
  }
  if (from._internal_has_specularcolor()) {
    _this->_impl_.specularcolor_ = new ::KuplungApp::Vec3(*from._impl_.specularcolor_);
  }
  if (from._internal_has_emissioncolor()) {
    _this->_impl_.emissioncolor_ = new ::KuplungApp::Vec3(*from._impl_.emissioncolor_);
  }
  if (from._internal_has_textureambient()) {
    _this->_impl_.textureambient_ = new ::KuplungApp::MeshMaterialTextureImage(*from._impl_.textureambient_);
  }
  if (from._internal_has_texturediffuse()) {
    _this->_impl_.texturediffuse_ = new ::KuplungApp::MeshMaterialTextureImage(*from._impl_.texturediffuse_);
  }
  if (from._internal_has_texturespecular()) {
    _this->_impl_.texturespecular_ = new ::KuplungApp::MeshMaterialTextureImage(*from._impl_.texturespecular_);
  }
  if (from._internal_has_texturespecularexp()) {
    _this->_impl_.texturespecularexp_ = new ::KuplungApp::MeshMaterialTextureImage(*from._impl_.texturespecularexp_);
  }
  if (from._internal_has_texturedissolve()) {
    _this->_impl_.texturedissolve_ = new ::KuplungApp::MeshMaterialTextureImage(*from._impl_.texturedissolve_);
  }
  if (from._internal_has_texturebump()) {
    _this->_impl_.texturebump_ = new ::KuplungApp::MeshMaterialTextureImage(*from._impl_.texturebump_);
  }
  if (from._internal_has_texturedisplacement()) {
    _this->_impl_.texturedisplacement_ = new ::KuplungApp::MeshMaterialTextureImage(*from._impl_.texturedisplacement_);
  }
  ::memcpy(&_impl_.materialid_, &from._impl_.materialid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opticaldensity_) -
    reinterpret_cast<char*>(&_impl_.materialid_)) + sizeof(_impl_.opticaldensity_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.MeshModelMaterial)
}

inline void MeshModelMaterial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.materialtitle_){}
    , decltype(_impl_.ambientcolor_){nullptr}
    , decltype(_impl_.diffusecolor_){nullptr}
    , decltype(_impl_.specularcolor_){nullptr}
    , decltype(_impl_.emissioncolor_){nullptr}
    , decltype(_impl_.textureambient_){nullptr}
    , decltype(_impl_.texturediffuse_){nullptr}
    , decltype(_impl_.texturespecular_){nullptr}
    , decltype(_impl_.texturespecularexp_){nullptr}
    , decltype(_impl_.texturedissolve_){nullptr}
    , decltype(_impl_.texturebump_){nullptr}
    , decltype(_impl_.texturedisplacement_){nullptr}
    , decltype(_impl_.materialid_){0}
    , decltype(_impl_.specularexp_){0}
    , decltype(_impl_.transparency_){0}
    , decltype(_impl_.illuminationmode_){0u}
    , decltype(_impl_.opticaldensity_){0}
  };
  _impl_.materialtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.materialtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MeshModelMaterial::~MeshModelMaterial() {
  // @@protoc_insertion_point(destructor:KuplungApp.MeshModelMaterial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeshModelMaterial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.materialtitle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ambientcolor_;
  if (this != internal_default_instance()) delete _impl_.diffusecolor_;
  if (this != internal_default_instance()) delete _impl_.specularcolor_;
  if (this != internal_default_instance()) delete _impl_.emissioncolor_;
  if (this != internal_default_instance()) delete _impl_.textureambient_;
  if (this != internal_default_instance()) delete _impl_.texturediffuse_;
  if (this != internal_default_instance()) delete _impl_.texturespecular_;
  if (this != internal_default_instance()) delete _impl_.texturespecularexp_;
  if (this != internal_default_instance()) delete _impl_.texturedissolve_;
  if (this != internal_default_instance()) delete _impl_.texturebump_;
  if (this != internal_default_instance()) delete _impl_.texturedisplacement_;
}

void MeshModelMaterial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeshModelMaterial::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.MeshModelMaterial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.materialtitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ambientcolor_ != nullptr);
      _impl_.ambientcolor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.diffusecolor_ != nullptr);
      _impl_.diffusecolor_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.specularcolor_ != nullptr);
      _impl_.specularcolor_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.emissioncolor_ != nullptr);
      _impl_.emissioncolor_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.textureambient_ != nullptr);
      _impl_.textureambient_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.texturediffuse_ != nullptr);
      _impl_.texturediffuse_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.texturespecular_ != nullptr);
      _impl_.texturespecular_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.texturespecularexp_ != nullptr);
      _impl_.texturespecularexp_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.texturedissolve_ != nullptr);
      _impl_.texturedissolve_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.texturebump_ != nullptr);
      _impl_.texturebump_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.texturedisplacement_ != nullptr);
      _impl_.texturedisplacement_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&_impl_.materialid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.illuminationmode_) -
        reinterpret_cast<char*>(&_impl_.materialid_)) + sizeof(_impl_.illuminationmode_));
  }
  _impl_.opticaldensity_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshModelMaterial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 MaterialID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_materialid(&has_bits);
          _impl_.materialid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string MaterialTitle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_materialtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KuplungApp.MeshModelMaterial.MaterialTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 AmbientColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ambientcolor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 DiffuseColor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffusecolor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 SpecularColor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_specularcolor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.Vec3 EmissionColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_emissioncolor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float SpecularExp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_specularexp(&has_bits);
          _impl_.specularexp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float Transparency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_transparency(&has_bits);
          _impl_.transparency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required fixed32 IlluminationMode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_illuminationmode(&has_bits);
          _impl_.illuminationmode_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // required float OpticalDensity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_opticaldensity(&has_bits);
          _impl_.opticaldensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_textureambient(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturediffuse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturespecular(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturespecularexp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturedissolve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturebump(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturedisplacement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeshModelMaterial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.MeshModelMaterial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 MaterialID = 1;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_materialid(), target);
  }

  // required string MaterialTitle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_materialtitle().data(), static_cast<int>(this->_internal_materialtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshModelMaterial.MaterialTitle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_materialtitle(), target);
  }

  // required .KuplungApp.Vec3 AmbientColor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ambientcolor(this),
        _Internal::ambientcolor(this).GetCachedSize(), target, stream);
  }

  // required .KuplungApp.Vec3 DiffuseColor = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::diffusecolor(this),
        _Internal::diffusecolor(this).GetCachedSize(), target, stream);
  }

  // required .KuplungApp.Vec3 SpecularColor = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::specularcolor(this),
        _Internal::specularcolor(this).GetCachedSize(), target, stream);
  }

  // required .KuplungApp.Vec3 EmissionColor = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::emissioncolor(this),
        _Internal::emissioncolor(this).GetCachedSize(), target, stream);
  }

  // required float SpecularExp = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_specularexp(), target);
  }

  // required float Transparency = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_transparency(), target);
  }

  // required fixed32 IlluminationMode = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(9, this->_internal_illuminationmode(), target);
  }

  // required float OpticalDensity = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_opticaldensity(), target);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::textureambient(this),
        _Internal::textureambient(this).GetCachedSize(), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::texturediffuse(this),
        _Internal::texturediffuse(this).GetCachedSize(), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::texturespecular(this),
        _Internal::texturespecular(this).GetCachedSize(), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::texturespecularexp(this),
        _Internal::texturespecularexp(this).GetCachedSize(), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::texturedissolve(this),
        _Internal::texturedissolve(this).GetCachedSize(), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::texturebump(this),
        _Internal::texturebump(this).GetCachedSize(), target, stream);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::texturedisplacement(this),
        _Internal::texturedisplacement(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.MeshModelMaterial)
  return target;
}

size_t MeshModelMaterial::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.MeshModelMaterial)
  size_t total_size = 0;

  if (_internal_has_materialtitle()) {
    // required string MaterialTitle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_materialtitle());
  }

  if (_internal_has_ambientcolor()) {
    // required .KuplungApp.Vec3 AmbientColor = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ambientcolor_);
  }

  if (_internal_has_diffusecolor()) {
    // required .KuplungApp.Vec3 DiffuseColor = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.diffusecolor_);
  }

  if (_internal_has_specularcolor()) {
    // required .KuplungApp.Vec3 SpecularColor = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.specularcolor_);
  }

  if (_internal_has_emissioncolor()) {
    // required .KuplungApp.Vec3 EmissionColor = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.emissioncolor_);
  }

  if (_internal_has_textureambient()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.textureambient_);
  }

  if (_internal_has_texturediffuse()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturediffuse_);
  }

  if (_internal_has_texturespecular()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturespecular_);
  }

  if (_internal_has_texturespecularexp()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturespecularexp_);
  }

  if (_internal_has_texturedissolve()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturedissolve_);
  }

  if (_internal_has_texturebump()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturebump_);
  }

  if (_internal_has_texturedisplacement()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturedisplacement_);
  }

  if (_internal_has_materialid()) {
    // required int32 MaterialID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_materialid());
  }

  if (_internal_has_specularexp()) {
    // required float SpecularExp = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_transparency()) {
    // required float Transparency = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_illuminationmode()) {
    // required fixed32 IlluminationMode = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_opticaldensity()) {
    // required float OpticalDensity = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MeshModelMaterial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.MeshModelMaterial)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0001ffff) ^ 0x0001ffff) == 0) {  // All required fields are present.
    // required string MaterialTitle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_materialtitle());

    // required .KuplungApp.Vec3 AmbientColor = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ambientcolor_);

    // required .KuplungApp.Vec3 DiffuseColor = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.diffusecolor_);

    // required .KuplungApp.Vec3 SpecularColor = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.specularcolor_);

    // required .KuplungApp.Vec3 EmissionColor = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.emissioncolor_);

    // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.textureambient_);

    // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturediffuse_);

    // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturespecular_);

    // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturespecularexp_);

    // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturedissolve_);

    // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturebump_);

    // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturedisplacement_);

    // required int32 MaterialID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_materialid());

    // required float SpecularExp = 7;
    total_size += 1 + 4;

    // required float Transparency = 8;
    total_size += 1 + 4;

    // required fixed32 IlluminationMode = 9;
    total_size += 1 + 4;

    // required float OpticalDensity = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeshModelMaterial::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeshModelMaterial::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeshModelMaterial::GetClassData() const { return &_class_data_; }


void MeshModelMaterial::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MeshModelMaterial*>(&to_msg);
  auto& from = static_cast<const MeshModelMaterial&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.MeshModelMaterial)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_materialtitle(from._internal_materialtitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ambientcolor()->::KuplungApp::Vec3::MergeFrom(
          from._internal_ambientcolor());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_diffusecolor()->::KuplungApp::Vec3::MergeFrom(
          from._internal_diffusecolor());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_specularcolor()->::KuplungApp::Vec3::MergeFrom(
          from._internal_specularcolor());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_emissioncolor()->::KuplungApp::Vec3::MergeFrom(
          from._internal_emissioncolor());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_textureambient()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(
          from._internal_textureambient());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_texturediffuse()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(
          from._internal_texturediffuse());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_texturespecular()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(
          from._internal_texturespecular());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_texturespecularexp()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(
          from._internal_texturespecularexp());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_texturedissolve()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(
          from._internal_texturedissolve());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_texturebump()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(
          from._internal_texturebump());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_texturedisplacement()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(
          from._internal_texturedisplacement());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.materialid_ = from._impl_.materialid_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.specularexp_ = from._impl_.specularexp_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.transparency_ = from._impl_.transparency_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.illuminationmode_ = from._impl_.illuminationmode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_opticaldensity(from._internal_opticaldensity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeshModelMaterial::CopyFrom(const MeshModelMaterial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.MeshModelMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshModelMaterial::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ambientcolor()) {
    if (!_impl_.ambientcolor_->IsInitialized()) return false;
  }
  if (_internal_has_diffusecolor()) {
    if (!_impl_.diffusecolor_->IsInitialized()) return false;
  }
  if (_internal_has_specularcolor()) {
    if (!_impl_.specularcolor_->IsInitialized()) return false;
  }
  if (_internal_has_emissioncolor()) {
    if (!_impl_.emissioncolor_->IsInitialized()) return false;
  }
  if (_internal_has_textureambient()) {
    if (!_impl_.textureambient_->IsInitialized()) return false;
  }
  if (_internal_has_texturediffuse()) {
    if (!_impl_.texturediffuse_->IsInitialized()) return false;
  }
  if (_internal_has_texturespecular()) {
    if (!_impl_.texturespecular_->IsInitialized()) return false;
  }
  if (_internal_has_texturespecularexp()) {
    if (!_impl_.texturespecularexp_->IsInitialized()) return false;
  }
  if (_internal_has_texturedissolve()) {
    if (!_impl_.texturedissolve_->IsInitialized()) return false;
  }
  if (_internal_has_texturebump()) {
    if (!_impl_.texturebump_->IsInitialized()) return false;
  }
  if (_internal_has_texturedisplacement()) {
    if (!_impl_.texturedisplacement_->IsInitialized()) return false;
  }
  return true;
}

void MeshModelMaterial::InternalSwap(MeshModelMaterial* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.materialtitle_, lhs_arena,
      &other->_impl_.materialtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeshModelMaterial, _impl_.opticaldensity_)
      + sizeof(MeshModelMaterial::_impl_.opticaldensity_)
      - PROTOBUF_FIELD_OFFSET(MeshModelMaterial, _impl_.ambientcolor_)>(
          reinterpret_cast<char*>(&_impl_.ambientcolor_),
          reinterpret_cast<char*>(&other->_impl_.ambientcolor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshModelMaterial::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KuplungDefinitions_2eproto_getter, &descriptor_table_KuplungDefinitions_2eproto_once,
      file_level_metadata_KuplungDefinitions_2eproto[7]);
}

// ===================================================================

class Mesh::_Internal {
 public:
  using HasBits = decltype(std::declval<Mesh>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KuplungApp::FBEntity& file(const Mesh* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_modeltitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_materialtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_countvertices(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_counttexturecoordinates(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_countnormals(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_countindices(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::KuplungApp::MeshModelMaterial& modelmaterial(const Mesh* msg);
  static void set_has_modelmaterial(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

const ::KuplungApp::FBEntity&
Mesh::_Internal::file(const Mesh* msg) {
  return *msg->_impl_.file_;
}
const ::KuplungApp::MeshModelMaterial&
Mesh::_Internal::modelmaterial(const Mesh* msg) {
  return *msg->_impl_.modelmaterial_;
}
Mesh::Mesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KuplungApp.Mesh)
}
Mesh::Mesh(const Mesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mesh* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vertices_){from._impl_.vertices_}
    , decltype(_impl_.texture_coordinates_){from._impl_.texture_coordinates_}
    , decltype(_impl_.normals_){from._impl_.normals_}
    , decltype(_impl_.indices_){from._impl_.indices_}
    , decltype(_impl_.modeltitle_){}
    , decltype(_impl_.materialtitle_){}
    , decltype(_impl_.file_){nullptr}
    , decltype(_impl_.modelmaterial_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.countvertices_){}
    , decltype(_impl_.counttexturecoordinates_){}
    , decltype(_impl_.countnormals_){}
    , decltype(_impl_.countindices_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.modeltitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.modeltitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_modeltitle()) {
    _this->_impl_.modeltitle_.Set(from._internal_modeltitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.materialtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.materialtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_materialtitle()) {
    _this->_impl_.materialtitle_.Set(from._internal_materialtitle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_file()) {
    _this->_impl_.file_ = new ::KuplungApp::FBEntity(*from._impl_.file_);
  }
  if (from._internal_has_modelmaterial()) {
    _this->_impl_.modelmaterial_ = new ::KuplungApp::MeshModelMaterial(*from._impl_.modelmaterial_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.countindices_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.countindices_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Mesh)
}

inline void Mesh::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vertices_){arena}
    , decltype(_impl_.texture_coordinates_){arena}
    , decltype(_impl_.normals_){arena}
    , decltype(_impl_.indices_){arena}
    , decltype(_impl_.modeltitle_){}
    , decltype(_impl_.materialtitle_){}
    , decltype(_impl_.file_){nullptr}
    , decltype(_impl_.modelmaterial_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.countvertices_){0}
    , decltype(_impl_.counttexturecoordinates_){0}
    , decltype(_impl_.countnormals_){0}
    , decltype(_impl_.countindices_){0}
  };
  _impl_.modeltitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.modeltitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.materialtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.materialtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:KuplungApp.Mesh)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mesh::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
  _impl_.texture_coordinates_.~RepeatedPtrField();
  _impl_.normals_.~RepeatedPtrField();
  _impl_.indices_.~RepeatedField();
  _impl_.modeltitle_.Destroy();
  _impl_.materialtitle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.file_;
  if (this != internal_default_instance()) delete _impl_.modelmaterial_;
}

void Mesh::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Mesh)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertices_.Clear();
  _impl_.texture_coordinates_.Clear();
  _impl_.normals_.Clear();
  _impl_.indices_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.modeltitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.materialtitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.file_ != nullptr);
      _impl_.file_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.modelmaterial_ != nullptr);
      _impl_.modelmaterial_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.countnormals_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.countnormals_));
  }
  _impl_.countindices_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mesh::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.FBEntity File = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string ModelTitle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_modeltitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KuplungApp.Mesh.ModelTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string MaterialTitle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_materialtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KuplungApp.Mesh.MaterialTitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int32 countVertices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_countvertices(&has_bits);
          _impl_.countvertices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 countTextureCoordinates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_counttexturecoordinates(&has_bits);
          _impl_.counttexturecoordinates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 countNormals = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_countnormals(&has_bits);
          _impl_.countnormals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 countIndices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_countindices(&has_bits);
          _impl_.countindices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_modelmaterial(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KuplungApp.Vec3 vertices = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KuplungApp.Vec2 texture_coordinates = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_texture_coordinates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KuplungApp.Vec3 normals = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 indices = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mesh::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Mesh)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 ID = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required .KuplungApp.FBEntity File = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // required string ModelTitle = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modeltitle().data(), static_cast<int>(this->_internal_modeltitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.Mesh.ModelTitle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_modeltitle(), target);
  }

  // required string MaterialTitle = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_materialtitle().data(), static_cast<int>(this->_internal_materialtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KuplungApp.Mesh.MaterialTitle");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_materialtitle(), target);
  }

  // required int32 countVertices = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_countvertices(), target);
  }

  // required int32 countTextureCoordinates = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_counttexturecoordinates(), target);
  }

  // required int32 countNormals = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_countnormals(), target);
  }

  // required int32 countIndices = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_countindices(), target);
  }

  // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::modelmaterial(this),
        _Internal::modelmaterial(this).GetCachedSize(), target, stream);
  }

  // repeated .KuplungApp.Vec3 vertices = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KuplungApp.Vec2 texture_coordinates = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_texture_coordinates_size()); i < n; i++) {
    const auto& repfield = this->_internal_texture_coordinates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KuplungApp.Vec3 normals = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normals_size()); i < n; i++) {
    const auto& repfield = this->_internal_normals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated fixed32 indices = 13;
  for (int i = 0, n = this->_internal_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(13, this->_internal_indices(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Mesh)
  return target;
}

size_t Mesh::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Mesh)
  size_t total_size = 0;

  if (_internal_has_modeltitle()) {
    // required string ModelTitle = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modeltitle());
  }

  if (_internal_has_materialtitle()) {
    // required string MaterialTitle = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_materialtitle());
  }

  if (_internal_has_file()) {
    // required .KuplungApp.FBEntity File = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.file_);
  }

  if (_internal_has_modelmaterial()) {
    // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modelmaterial_);
  }

  if (_internal_has_id()) {
    // required int32 ID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  if (_internal_has_countvertices()) {
    // required int32 countVertices = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_countvertices());
  }

  if (_internal_has_counttexturecoordinates()) {
    // required int32 countTextureCoordinates = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_counttexturecoordinates());
  }

  if (_internal_has_countnormals()) {
    // required int32 countNormals = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_countnormals());
  }

  if (_internal_has_countindices()) {
    // required int32 countIndices = 8;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_countindices());
  }

  return total_size;
}
size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Mesh)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string ModelTitle = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modeltitle());

    // required string MaterialTitle = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_materialtitle());

    // required .KuplungApp.FBEntity File = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.file_);

    // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modelmaterial_);

    // required int32 ID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());

    // required int32 countVertices = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_countvertices());

    // required int32 countTextureCoordinates = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_counttexturecoordinates());

    // required int32 countNormals = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_countnormals());

    // required int32 countIndices = 8;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_countindices());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KuplungApp.Vec3 vertices = 10;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_impl_.vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KuplungApp.Vec2 texture_coordinates = 11;
  total_size += 1UL * this->_internal_texture_coordinates_size();
  for (const auto& msg : this->_impl_.texture_coordinates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KuplungApp.Vec3 normals = 12;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->_impl_.normals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed32 indices = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_indices_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_indices_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mesh::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mesh::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mesh::GetClassData() const { return &_class_data_; }


void Mesh::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mesh*>(&to_msg);
  auto& from = static_cast<const Mesh&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Mesh)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertices_.MergeFrom(from._impl_.vertices_);
  _this->_impl_.texture_coordinates_.MergeFrom(from._impl_.texture_coordinates_);
  _this->_impl_.normals_.MergeFrom(from._impl_.normals_);
  _this->_impl_.indices_.MergeFrom(from._impl_.indices_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_modeltitle(from._internal_modeltitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_materialtitle(from._internal_materialtitle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_file()->::KuplungApp::FBEntity::MergeFrom(
          from._internal_file());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_modelmaterial()->::KuplungApp::MeshModelMaterial::MergeFrom(
          from._internal_modelmaterial());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.countvertices_ = from._impl_.countvertices_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.counttexturecoordinates_ = from._impl_.counttexturecoordinates_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.countnormals_ = from._impl_.countnormals_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_countindices(from._internal_countindices());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.vertices_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.texture_coordinates_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.normals_))
    return false;
  if (_internal_has_file()) {
    if (!_impl_.file_->IsInitialized()) return false;
  }
  if (_internal_has_modelmaterial()) {
    if (!_impl_.modelmaterial_->IsInitialized()) return false;
  }
  return true;
}

void Mesh::InternalSwap(Mesh* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.texture_coordinates_.InternalSwap(&other->_impl_.texture_coordinates_);
  _impl_.normals_.InternalSwap(&other->_impl_.normals_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.modeltitle_, lhs_arena,
      &other->_impl_.modeltitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.materialtitle_, lhs_arena,
      &other->_impl_.materialtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mesh, _impl_.countindices_)
      + sizeof(Mesh::_impl_.countindices_)
      - PROTOBUF_FIELD_OFFSET(Mesh, _impl_.file_)>(
          reinterpret_cast<char*>(&_impl_.file_),
          reinterpret_cast<char*>(&other->_impl_.file_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mesh::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KuplungDefinitions_2eproto_getter, &descriptor_table_KuplungDefinitions_2eproto_once,
      file_level_metadata_KuplungDefinitions_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KuplungApp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KuplungApp::Vec2*
Arena::CreateMaybeMessage< ::KuplungApp::Vec2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KuplungApp::Vec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::Vec3*
Arena::CreateMaybeMessage< ::KuplungApp::Vec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KuplungApp::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::Vec4*
Arena::CreateMaybeMessage< ::KuplungApp::Vec4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KuplungApp::Vec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::ObjectCoordinate*
Arena::CreateMaybeMessage< ::KuplungApp::ObjectCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KuplungApp::ObjectCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::FBEntity*
Arena::CreateMaybeMessage< ::KuplungApp::FBEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KuplungApp::FBEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::MaterialColor*
Arena::CreateMaybeMessage< ::KuplungApp::MaterialColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KuplungApp::MaterialColor >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::MeshMaterialTextureImage*
Arena::CreateMaybeMessage< ::KuplungApp::MeshMaterialTextureImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KuplungApp::MeshMaterialTextureImage >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::MeshModelMaterial*
Arena::CreateMaybeMessage< ::KuplungApp::MeshModelMaterial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KuplungApp::MeshModelMaterial >(arena);
}
template<> PROTOBUF_NOINLINE ::KuplungApp::Mesh*
Arena::CreateMaybeMessage< ::KuplungApp::Mesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KuplungApp::Mesh >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
