// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KuplungDefinitions.proto

#include "KuplungDefinitions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace KuplungApp {
class Vec2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec2>
      _instance;
} _Vec2_default_instance_;
class Vec3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec3>
      _instance;
} _Vec3_default_instance_;
class Vec4DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec4>
      _instance;
} _Vec4_default_instance_;
class ObjectCoordinateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectCoordinate>
      _instance;
} _ObjectCoordinate_default_instance_;
class FBEntityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FBEntity>
      _instance;
} _FBEntity_default_instance_;
class MaterialColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MaterialColor>
      _instance;
} _MaterialColor_default_instance_;
class MeshMaterialTextureImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeshMaterialTextureImage>
      _instance;
} _MeshMaterialTextureImage_default_instance_;
class MeshModelMaterialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeshModelMaterial>
      _instance;
} _MeshModelMaterial_default_instance_;
class MeshDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mesh>
      _instance;
} _Mesh_default_instance_;
}  // namespace KuplungApp
namespace protobuf_KuplungDefinitions_2eproto {
void InitDefaultsVec2Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::KuplungApp::_Vec2_default_instance_;
    new (ptr) ::KuplungApp::Vec2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::Vec2::InitAsDefaultInstance();
}

void InitDefaultsVec2() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVec2Impl);
}

void InitDefaultsVec3Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::KuplungApp::_Vec3_default_instance_;
    new (ptr) ::KuplungApp::Vec3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::Vec3::InitAsDefaultInstance();
}

void InitDefaultsVec3() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVec3Impl);
}

void InitDefaultsVec4Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::KuplungApp::_Vec4_default_instance_;
    new (ptr) ::KuplungApp::Vec4();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::Vec4::InitAsDefaultInstance();
}

void InitDefaultsVec4() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVec4Impl);
}

void InitDefaultsObjectCoordinateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::KuplungApp::_ObjectCoordinate_default_instance_;
    new (ptr) ::KuplungApp::ObjectCoordinate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::ObjectCoordinate::InitAsDefaultInstance();
}

void InitDefaultsObjectCoordinate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectCoordinateImpl);
}

void InitDefaultsFBEntityImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::KuplungApp::_FBEntity_default_instance_;
    new (ptr) ::KuplungApp::FBEntity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::FBEntity::InitAsDefaultInstance();
}

void InitDefaultsFBEntity() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFBEntityImpl);
}

void InitDefaultsMaterialColorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KuplungDefinitions_2eproto::InitDefaultsVec3();
  {
    void* ptr = &::KuplungApp::_MaterialColor_default_instance_;
    new (ptr) ::KuplungApp::MaterialColor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::MaterialColor::InitAsDefaultInstance();
}

void InitDefaultsMaterialColor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMaterialColorImpl);
}

void InitDefaultsMeshMaterialTextureImageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::KuplungApp::_MeshMaterialTextureImage_default_instance_;
    new (ptr) ::KuplungApp::MeshMaterialTextureImage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::MeshMaterialTextureImage::InitAsDefaultInstance();
}

void InitDefaultsMeshMaterialTextureImage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMeshMaterialTextureImageImpl);
}

void InitDefaultsMeshModelMaterialImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KuplungDefinitions_2eproto::InitDefaultsVec3();
  protobuf_KuplungDefinitions_2eproto::InitDefaultsMeshMaterialTextureImage();
  {
    void* ptr = &::KuplungApp::_MeshModelMaterial_default_instance_;
    new (ptr) ::KuplungApp::MeshModelMaterial();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::MeshModelMaterial::InitAsDefaultInstance();
}

void InitDefaultsMeshModelMaterial() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMeshModelMaterialImpl);
}

void InitDefaultsMeshImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_KuplungDefinitions_2eproto::InitDefaultsFBEntity();
  protobuf_KuplungDefinitions_2eproto::InitDefaultsMeshModelMaterial();
  protobuf_KuplungDefinitions_2eproto::InitDefaultsVec3();
  protobuf_KuplungDefinitions_2eproto::InitDefaultsVec2();
  {
    void* ptr = &::KuplungApp::_Mesh_default_instance_;
    new (ptr) ::KuplungApp::Mesh();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KuplungApp::Mesh::InitAsDefaultInstance();
}

void InitDefaultsMesh() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMeshImpl);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec2, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec3, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec4, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec4, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec4, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec4, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Vec4, w_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, animate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::ObjectCoordinate, point_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::FBEntity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::FBEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::FBEntity, isfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::FBEntity, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::FBEntity, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::FBEntity, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::FBEntity, modifieddate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::FBEntity, size_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MaterialColor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MaterialColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MaterialColor, colorpickeropen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MaterialColor, animate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MaterialColor, strength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MaterialColor, color_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, usetexture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshMaterialTextureImage, commands_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, materialid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, materialtitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, ambientcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, diffusecolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, specularcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, emissioncolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, specularexp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, transparency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, illuminationmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, opticaldensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, textureambient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturediffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturespecular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturespecularexp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturedissolve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturebump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::MeshModelMaterial, texturedisplacement_),
  12,
  0,
  1,
  2,
  3,
  4,
  13,
  14,
  15,
  16,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, modeltitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, materialtitle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, countvertices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, counttexturecoordinates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, countnormals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, countindices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, modelmaterial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, vertices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, texture_coordinates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, normals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KuplungApp::Mesh, indices_),
  4,
  2,
  0,
  1,
  5,
  6,
  7,
  8,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::KuplungApp::Vec2)},
  { 9, 17, sizeof(::KuplungApp::Vec3)},
  { 20, 29, sizeof(::KuplungApp::Vec4)},
  { 33, 40, sizeof(::KuplungApp::ObjectCoordinate)},
  { 42, 53, sizeof(::KuplungApp::FBEntity)},
  { 59, 68, sizeof(::KuplungApp::MaterialColor)},
  { 72, 83, sizeof(::KuplungApp::MeshMaterialTextureImage)},
  { 89, 111, sizeof(::KuplungApp::MeshModelMaterial)},
  { 128, 146, sizeof(::KuplungApp::Mesh)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_Vec2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_Vec3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_Vec4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_ObjectCoordinate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_FBEntity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_MaterialColor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_MeshMaterialTextureImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_MeshModelMaterial_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KuplungApp::_Mesh_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "KuplungDefinitions.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030KuplungDefinitions.proto\022\nKuplungApp\"\034"
      "\n\004Vec2\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\'\n\004Vec3\022\t\n\001"
      "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"2\n\004Vec4\022\t\n"
      "\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\t\n\001w\030\004 \002("
      "\002\"2\n\020ObjectCoordinate\022\017\n\007animate\030\001 \002(\010\022\r"
      "\n\005point\030\002 \002(\002\"n\n\010FBEntity\022\016\n\006isFile\030\001 \002("
      "\010\022\014\n\004path\030\002 \002(\t\022\r\n\005title\030\003 \002(\t\022\021\n\textens"
      "ion\030\004 \002(\t\022\024\n\014modifiedDate\030\005 \002(\t\022\014\n\004size\030"
      "\006 \002(\t\"l\n\rMaterialColor\022\027\n\017colorPickerOpe"
      "n\030\001 \002(\010\022\017\n\007animate\030\002 \002(\010\022\020\n\010strength\030\003 \002"
      "(\002\022\037\n\005color\030\004 \002(\0132\020.KuplungApp.Vec3\"\200\001\n\030"
      "MeshMaterialTextureImage\022\020\n\010Filename\030\001 \002"
      "(\t\022\r\n\005Image\030\002 \002(\t\022\r\n\005Width\030\003 \002(\005\022\016\n\006Heig"
      "ht\030\004 \002(\005\022\022\n\nUseTexture\030\005 \002(\010\022\020\n\010Commands"
      "\030\006 \003(\t\"\367\005\n\021MeshModelMaterial\022\022\n\nMaterial"
      "ID\030\001 \002(\005\022\025\n\rMaterialTitle\030\002 \002(\t\022&\n\014Ambie"
      "ntColor\030\003 \002(\0132\020.KuplungApp.Vec3\022&\n\014Diffu"
      "seColor\030\004 \002(\0132\020.KuplungApp.Vec3\022\'\n\rSpecu"
      "larColor\030\005 \002(\0132\020.KuplungApp.Vec3\022\'\n\rEmis"
      "sionColor\030\006 \002(\0132\020.KuplungApp.Vec3\022\023\n\013Spe"
      "cularExp\030\007 \002(\002\022\024\n\014Transparency\030\010 \002(\002\022\030\n\020"
      "IlluminationMode\030\t \002(\007\022\026\n\016OpticalDensity"
      "\030\n \002(\002\022<\n\016TextureAmbient\030\013 \002(\0132$.Kuplung"
      "App.MeshMaterialTextureImage\022<\n\016TextureD"
      "iffuse\030\014 \002(\0132$.KuplungApp.MeshMaterialTe"
      "xtureImage\022=\n\017TextureSpecular\030\r \002(\0132$.Ku"
      "plungApp.MeshMaterialTextureImage\022@\n\022Tex"
      "tureSpecularExp\030\016 \002(\0132$.KuplungApp.MeshM"
      "aterialTextureImage\022=\n\017TextureDissolve\030\017"
      " \002(\0132$.KuplungApp.MeshMaterialTextureIma"
      "ge\0229\n\013TextureBump\030\020 \002(\0132$.KuplungApp.Mes"
      "hMaterialTextureImage\022A\n\023TextureDisplace"
      "ment\030\021 \002(\0132$.KuplungApp.MeshMaterialText"
      "ureImage\"\202\003\n\004Mesh\022\n\n\002ID\030\001 \002(\005\022\"\n\004File\030\002 "
      "\002(\0132\024.KuplungApp.FBEntity\022\022\n\nModelTitle\030"
      "\003 \002(\t\022\025\n\rMaterialTitle\030\004 \002(\t\022\025\n\rcountVer"
      "tices\030\005 \002(\005\022\037\n\027countTextureCoordinates\030\006"
      " \002(\005\022\024\n\014countNormals\030\007 \002(\005\022\024\n\014countIndic"
      "es\030\010 \002(\005\0224\n\rModelMaterial\030\t \002(\0132\035.Kuplun"
      "gApp.MeshModelMaterial\022\"\n\010vertices\030\n \003(\013"
      "2\020.KuplungApp.Vec3\022-\n\023texture_coordinate"
      "s\030\013 \003(\0132\020.KuplungApp.Vec2\022!\n\007normals\030\014 \003"
      "(\0132\020.KuplungApp.Vec3\022\017\n\007indices\030\r \003(\007"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1717);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KuplungDefinitions.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_KuplungDefinitions_2eproto
namespace KuplungApp {

// ===================================================================

void Vec2::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec2::kXFieldNumber;
const int Vec2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec2::Vec2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungDefinitions_2eproto::InitDefaultsVec2();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.Vec2)
}
Vec2::Vec2(const Vec2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Vec2)
}

void Vec2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2::~Vec2() {
  // @@protoc_insertion_point(destructor:KuplungApp.Vec2)
  SharedDtor();
}

void Vec2::SharedDtor() {
}

void Vec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec2::descriptor() {
  ::protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vec2& Vec2::default_instance() {
  ::protobuf_KuplungDefinitions_2eproto::InitDefaultsVec2();
  return *internal_default_instance();
}

Vec2* Vec2::New(::google::protobuf::Arena* arena) const {
  Vec2* n = new Vec2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.Vec2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.Vec2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.Vec2)
  return false;
#undef DO_
}

void Vec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.Vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.Vec2)
}

::google::protobuf::uint8* Vec2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Vec2)
  return target;
}

size_t Vec2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Vec2)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Vec2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.Vec2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.Vec2)
    MergeFrom(*source);
  }
}

void Vec2::MergeFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vec2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2::CopyFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Vec2::Swap(Vec2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec2::InternalSwap(Vec2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vec2::GetMetadata() const {
  protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vec3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec3::kXFieldNumber;
const int Vec3::kYFieldNumber;
const int Vec3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec3::Vec3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungDefinitions_2eproto::InitDefaultsVec3();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Vec3)
}

void Vec3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:KuplungApp.Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
}

void Vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  ::protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vec3& Vec3::default_instance() {
  ::protobuf_KuplungDefinitions_2eproto::InitDefaultsVec3();
  return *internal_default_instance();
}

Vec3* Vec3::New(::google::protobuf::Arena* arena) const {
  Vec3* n = new Vec3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.Vec3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.Vec3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.Vec3)
  return false;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.Vec3)
}

::google::protobuf::uint8* Vec3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Vec3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Vec3)
  return target;
}

size_t Vec3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Vec3)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Vec3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.Vec3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vec4::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec4::kXFieldNumber;
const int Vec4::kYFieldNumber;
const int Vec4::kZFieldNumber;
const int Vec4::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec4::Vec4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungDefinitions_2eproto::InitDefaultsVec4();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.Vec4)
}
Vec4::Vec4(const Vec4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Vec4)
}

void Vec4::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Vec4::~Vec4() {
  // @@protoc_insertion_point(destructor:KuplungApp.Vec4)
  SharedDtor();
}

void Vec4::SharedDtor() {
}

void Vec4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec4::descriptor() {
  ::protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vec4& Vec4::default_instance() {
  ::protobuf_KuplungDefinitions_2eproto::InitDefaultsVec4();
  return *internal_default_instance();
}

Vec4* Vec4::New(::google::protobuf::Arena* arena) const {
  Vec4* n = new Vec4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vec4::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Vec4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&x_)) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vec4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.Vec4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.Vec4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.Vec4)
  return false;
#undef DO_
}

void Vec4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.Vec4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float w = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.Vec4)
}

::google::protobuf::uint8* Vec4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Vec4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Vec4)
  return target;
}

size_t Vec4::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Vec4)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_w()) {
    // required float w = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Vec4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float w = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.Vec4)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec4* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.Vec4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.Vec4)
    MergeFrom(*source);
  }
}

void Vec4::MergeFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Vec4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vec4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec4::CopyFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Vec4::Swap(Vec4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec4::InternalSwap(Vec4* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vec4::GetMetadata() const {
  protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectCoordinate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectCoordinate::kAnimateFieldNumber;
const int ObjectCoordinate::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectCoordinate::ObjectCoordinate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungDefinitions_2eproto::InitDefaultsObjectCoordinate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.ObjectCoordinate)
}
ObjectCoordinate::ObjectCoordinate(const ObjectCoordinate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&animate_, &from.animate_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_) -
    reinterpret_cast<char*>(&animate_)) + sizeof(point_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.ObjectCoordinate)
}

void ObjectCoordinate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&animate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&animate_)) + sizeof(point_));
}

ObjectCoordinate::~ObjectCoordinate() {
  // @@protoc_insertion_point(destructor:KuplungApp.ObjectCoordinate)
  SharedDtor();
}

void ObjectCoordinate::SharedDtor() {
}

void ObjectCoordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectCoordinate::descriptor() {
  ::protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectCoordinate& ObjectCoordinate::default_instance() {
  ::protobuf_KuplungDefinitions_2eproto::InitDefaultsObjectCoordinate();
  return *internal_default_instance();
}

ObjectCoordinate* ObjectCoordinate::New(::google::protobuf::Arena* arena) const {
  ObjectCoordinate* n = new ObjectCoordinate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.ObjectCoordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&animate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&point_) -
        reinterpret_cast<char*>(&animate_)) + sizeof(point_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectCoordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.ObjectCoordinate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool animate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_animate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.ObjectCoordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.ObjectCoordinate)
  return false;
#undef DO_
}

void ObjectCoordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.ObjectCoordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool animate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->animate(), output);
  }

  // required float point = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.ObjectCoordinate)
}

::google::protobuf::uint8* ObjectCoordinate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.ObjectCoordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool animate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->animate(), target);
  }

  // required float point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.ObjectCoordinate)
  return target;
}

size_t ObjectCoordinate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.ObjectCoordinate)
  size_t total_size = 0;

  if (has_animate()) {
    // required bool animate = 1;
    total_size += 1 + 1;
  }

  if (has_point()) {
    // required float point = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ObjectCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.ObjectCoordinate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool animate = 1;
    total_size += 1 + 1;

    // required float point = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectCoordinate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.ObjectCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectCoordinate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectCoordinate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.ObjectCoordinate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.ObjectCoordinate)
    MergeFrom(*source);
  }
}

void ObjectCoordinate::MergeFrom(const ObjectCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.ObjectCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      animate_ = from.animate_;
    }
    if (cached_has_bits & 0x00000002u) {
      point_ = from.point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectCoordinate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.ObjectCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectCoordinate::CopyFrom(const ObjectCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.ObjectCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectCoordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ObjectCoordinate::Swap(ObjectCoordinate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectCoordinate::InternalSwap(ObjectCoordinate* other) {
  using std::swap;
  swap(animate_, other->animate_);
  swap(point_, other->point_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectCoordinate::GetMetadata() const {
  protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FBEntity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FBEntity::kIsFileFieldNumber;
const int FBEntity::kPathFieldNumber;
const int FBEntity::kTitleFieldNumber;
const int FBEntity::kExtensionFieldNumber;
const int FBEntity::kModifiedDateFieldNumber;
const int FBEntity::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FBEntity::FBEntity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungDefinitions_2eproto::InitDefaultsFBEntity();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.FBEntity)
}
FBEntity::FBEntity(const FBEntity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension()) {
    extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  modifieddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_modifieddate()) {
    modifieddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
  }
  size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_size()) {
    size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.size_);
  }
  isfile_ = from.isfile_;
  // @@protoc_insertion_point(copy_constructor:KuplungApp.FBEntity)
}

void FBEntity::SharedCtor() {
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isfile_ = false;
}

FBEntity::~FBEntity() {
  // @@protoc_insertion_point(destructor:KuplungApp.FBEntity)
  SharedDtor();
}

void FBEntity::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifieddate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FBEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FBEntity::descriptor() {
  ::protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FBEntity& FBEntity::default_instance() {
  ::protobuf_KuplungDefinitions_2eproto::InitDefaultsFBEntity();
  return *internal_default_instance();
}

FBEntity* FBEntity::New(::google::protobuf::Arena* arena) const {
  FBEntity* n = new FBEntity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FBEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.FBEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!extension_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extension_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!modifieddate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*modifieddate_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!size_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*size_.UnsafeRawStringPointer())->clear();
    }
  }
  isfile_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FBEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.FBEntity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isFile = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_isfile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.FBEntity.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.FBEntity.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string extension = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extension().data(), static_cast<int>(this->extension().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.FBEntity.extension");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string modifiedDate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifieddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.FBEntity.modifiedDate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->size().data(), static_cast<int>(this->size().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.FBEntity.size");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.FBEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.FBEntity)
  return false;
#undef DO_
}

void FBEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.FBEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool isFile = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfile(), output);
  }

  // required string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // required string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // required string extension = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extension().data(), static_cast<int>(this->extension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.extension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->extension(), output);
  }

  // required string modifiedDate = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.modifiedDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->modifieddate(), output);
  }

  // required string size = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), static_cast<int>(this->size().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.FBEntity)
}

::google::protobuf::uint8* FBEntity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.FBEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool isFile = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfile(), target);
  }

  // required string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required string title = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // required string extension = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extension().data(), static_cast<int>(this->extension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.extension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->extension(), target);
  }

  // required string modifiedDate = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modifieddate().data(), static_cast<int>(this->modifieddate().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.modifiedDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->modifieddate(), target);
  }

  // required string size = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), static_cast<int>(this->size().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.FBEntity.size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.FBEntity)
  return target;
}

size_t FBEntity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.FBEntity)
  size_t total_size = 0;

  if (has_path()) {
    // required string path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  if (has_title()) {
    // required string title = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  if (has_extension()) {
    // required string extension = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extension());
  }

  if (has_modifieddate()) {
    // required string modifiedDate = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifieddate());
  }

  if (has_size()) {
    // required string size = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->size());
  }

  if (has_isfile()) {
    // required bool isFile = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FBEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.FBEntity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());

    // required string title = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

    // required string extension = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extension());

    // required string modifiedDate = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifieddate());

    // required string size = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->size());

    // required bool isFile = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FBEntity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.FBEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const FBEntity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FBEntity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.FBEntity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.FBEntity)
    MergeFrom(*source);
  }
}

void FBEntity::MergeFrom(const FBEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.FBEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_extension();
      extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_modifieddate();
      modifieddate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifieddate_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_size();
      size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.size_);
    }
    if (cached_has_bits & 0x00000020u) {
      isfile_ = from.isfile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FBEntity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.FBEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FBEntity::CopyFrom(const FBEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.FBEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FBEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void FBEntity::Swap(FBEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FBEntity::InternalSwap(FBEntity* other) {
  using std::swap;
  path_.Swap(&other->path_);
  title_.Swap(&other->title_);
  extension_.Swap(&other->extension_);
  modifieddate_.Swap(&other->modifieddate_);
  size_.Swap(&other->size_);
  swap(isfile_, other->isfile_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FBEntity::GetMetadata() const {
  protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MaterialColor::InitAsDefaultInstance() {
  ::KuplungApp::_MaterialColor_default_instance_._instance.get_mutable()->color_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaterialColor::kColorPickerOpenFieldNumber;
const int MaterialColor::kAnimateFieldNumber;
const int MaterialColor::kStrengthFieldNumber;
const int MaterialColor::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaterialColor::MaterialColor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungDefinitions_2eproto::InitDefaultsMaterialColor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.MaterialColor)
}
MaterialColor::MaterialColor(const MaterialColor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_color()) {
    color_ = new ::KuplungApp::Vec3(*from.color_);
  } else {
    color_ = NULL;
  }
  ::memcpy(&colorpickeropen_, &from.colorpickeropen_,
    static_cast<size_t>(reinterpret_cast<char*>(&strength_) -
    reinterpret_cast<char*>(&colorpickeropen_)) + sizeof(strength_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.MaterialColor)
}

void MaterialColor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strength_) -
      reinterpret_cast<char*>(&color_)) + sizeof(strength_));
}

MaterialColor::~MaterialColor() {
  // @@protoc_insertion_point(destructor:KuplungApp.MaterialColor)
  SharedDtor();
}

void MaterialColor::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void MaterialColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialColor::descriptor() {
  ::protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaterialColor& MaterialColor::default_instance() {
  ::protobuf_KuplungDefinitions_2eproto::InitDefaultsMaterialColor();
  return *internal_default_instance();
}

MaterialColor* MaterialColor::New(::google::protobuf::Arena* arena) const {
  MaterialColor* n = new MaterialColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaterialColor::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.MaterialColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != NULL);
    color_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&colorpickeropen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&strength_) -
        reinterpret_cast<char*>(&colorpickeropen_)) + sizeof(strength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaterialColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.MaterialColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool colorPickerOpen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_colorpickeropen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &colorpickeropen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool animate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_animate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float strength = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.MaterialColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.MaterialColor)
  return false;
#undef DO_
}

void MaterialColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.MaterialColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool colorPickerOpen = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->colorpickeropen(), output);
  }

  // required bool animate = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->animate(), output);
  }

  // required float strength = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->strength(), output);
  }

  // required .KuplungApp.Vec3 color = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->color_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.MaterialColor)
}

::google::protobuf::uint8* MaterialColor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.MaterialColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool colorPickerOpen = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->colorpickeropen(), target);
  }

  // required bool animate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->animate(), target);
  }

  // required float strength = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->strength(), target);
  }

  // required .KuplungApp.Vec3 color = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->color_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.MaterialColor)
  return target;
}

size_t MaterialColor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.MaterialColor)
  size_t total_size = 0;

  if (has_color()) {
    // required .KuplungApp.Vec3 color = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->color_);
  }

  if (has_colorpickeropen()) {
    // required bool colorPickerOpen = 1;
    total_size += 1 + 1;
  }

  if (has_animate()) {
    // required bool animate = 2;
    total_size += 1 + 1;
  }

  if (has_strength()) {
    // required float strength = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MaterialColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.MaterialColor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .KuplungApp.Vec3 color = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->color_);

    // required bool colorPickerOpen = 1;
    total_size += 1 + 1;

    // required bool animate = 2;
    total_size += 1 + 1;

    // required float strength = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialColor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.MaterialColor)
  GOOGLE_DCHECK_NE(&from, this);
  const MaterialColor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaterialColor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.MaterialColor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.MaterialColor)
    MergeFrom(*source);
  }
}

void MaterialColor::MergeFrom(const MaterialColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.MaterialColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_color()->::KuplungApp::Vec3::MergeFrom(from.color());
    }
    if (cached_has_bits & 0x00000002u) {
      colorpickeropen_ = from.colorpickeropen_;
    }
    if (cached_has_bits & 0x00000004u) {
      animate_ = from.animate_;
    }
    if (cached_has_bits & 0x00000008u) {
      strength_ = from.strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaterialColor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.MaterialColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialColor::CopyFrom(const MaterialColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.MaterialColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialColor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_color()) {
    if (!this->color_->IsInitialized()) return false;
  }
  return true;
}

void MaterialColor::Swap(MaterialColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaterialColor::InternalSwap(MaterialColor* other) {
  using std::swap;
  swap(color_, other->color_);
  swap(colorpickeropen_, other->colorpickeropen_);
  swap(animate_, other->animate_);
  swap(strength_, other->strength_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaterialColor::GetMetadata() const {
  protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MeshMaterialTextureImage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeshMaterialTextureImage::kFilenameFieldNumber;
const int MeshMaterialTextureImage::kImageFieldNumber;
const int MeshMaterialTextureImage::kWidthFieldNumber;
const int MeshMaterialTextureImage::kHeightFieldNumber;
const int MeshMaterialTextureImage::kUseTextureFieldNumber;
const int MeshMaterialTextureImage::kCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeshMaterialTextureImage::MeshMaterialTextureImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungDefinitions_2eproto::InitDefaultsMeshMaterialTextureImage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.MeshMaterialTextureImage)
}
MeshMaterialTextureImage::MeshMaterialTextureImage(const MeshMaterialTextureImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&usetexture_) -
    reinterpret_cast<char*>(&width_)) + sizeof(usetexture_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.MeshMaterialTextureImage)
}

void MeshMaterialTextureImage::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usetexture_) -
      reinterpret_cast<char*>(&width_)) + sizeof(usetexture_));
}

MeshMaterialTextureImage::~MeshMaterialTextureImage() {
  // @@protoc_insertion_point(destructor:KuplungApp.MeshMaterialTextureImage)
  SharedDtor();
}

void MeshMaterialTextureImage::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MeshMaterialTextureImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeshMaterialTextureImage::descriptor() {
  ::protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeshMaterialTextureImage& MeshMaterialTextureImage::default_instance() {
  ::protobuf_KuplungDefinitions_2eproto::InitDefaultsMeshMaterialTextureImage();
  return *internal_default_instance();
}

MeshMaterialTextureImage* MeshMaterialTextureImage::New(::google::protobuf::Arena* arena) const {
  MeshMaterialTextureImage* n = new MeshMaterialTextureImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeshMaterialTextureImage::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.MeshMaterialTextureImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usetexture_) -
        reinterpret_cast<char*>(&width_)) + sizeof(usetexture_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MeshMaterialTextureImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.MeshMaterialTextureImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.MeshMaterialTextureImage.Filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.MeshMaterialTextureImage.Image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool UseTexture = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_usetexture();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usetexture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string Commands = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_commands()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->commands(this->commands_size() - 1).data(),
            static_cast<int>(this->commands(this->commands_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.MeshMaterialTextureImage.Commands");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.MeshMaterialTextureImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.MeshMaterialTextureImage)
  return false;
#undef DO_
}

void MeshMaterialTextureImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.MeshMaterialTextureImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // required string Image = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image(), output);
  }

  // required int32 Width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // required int32 Height = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // required bool UseTexture = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->usetexture(), output);
  }

  // repeated string Commands = 6;
  for (int i = 0, n = this->commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commands(i).data(), static_cast<int>(this->commands(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Commands");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->commands(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.MeshMaterialTextureImage)
}

::google::protobuf::uint8* MeshMaterialTextureImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.MeshMaterialTextureImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // required string Image = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image(), target);
  }

  // required int32 Width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // required int32 Height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // required bool UseTexture = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->usetexture(), target);
  }

  // repeated string Commands = 6;
  for (int i = 0, n = this->commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commands(i).data(), static_cast<int>(this->commands(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshMaterialTextureImage.Commands");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->commands(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.MeshMaterialTextureImage)
  return target;
}

size_t MeshMaterialTextureImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.MeshMaterialTextureImage)
  size_t total_size = 0;

  if (has_filename()) {
    // required string Filename = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  if (has_image()) {
    // required string Image = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  if (has_width()) {
    // required int32 Width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 Height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_usetexture()) {
    // required bool UseTexture = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MeshMaterialTextureImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.MeshMaterialTextureImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string Filename = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());

    // required string Image = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());

    // required int32 Width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 Height = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

    // required bool UseTexture = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string Commands = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->commands_size());
  for (int i = 0, n = this->commands_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->commands(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeshMaterialTextureImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.MeshMaterialTextureImage)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshMaterialTextureImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeshMaterialTextureImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.MeshMaterialTextureImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.MeshMaterialTextureImage)
    MergeFrom(*source);
  }
}

void MeshMaterialTextureImage::MergeFrom(const MeshMaterialTextureImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.MeshMaterialTextureImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      usetexture_ = from.usetexture_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MeshMaterialTextureImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.MeshMaterialTextureImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshMaterialTextureImage::CopyFrom(const MeshMaterialTextureImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.MeshMaterialTextureImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshMaterialTextureImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void MeshMaterialTextureImage::Swap(MeshMaterialTextureImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeshMaterialTextureImage::InternalSwap(MeshMaterialTextureImage* other) {
  using std::swap;
  commands_.InternalSwap(&other->commands_);
  filename_.Swap(&other->filename_);
  image_.Swap(&other->image_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(usetexture_, other->usetexture_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeshMaterialTextureImage::GetMetadata() const {
  protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MeshModelMaterial::InitAsDefaultInstance() {
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->ambientcolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->diffusecolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->specularcolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->emissioncolor_ = const_cast< ::KuplungApp::Vec3*>(
      ::KuplungApp::Vec3::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->textureambient_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturediffuse_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturespecular_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturespecularexp_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturedissolve_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturebump_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
  ::KuplungApp::_MeshModelMaterial_default_instance_._instance.get_mutable()->texturedisplacement_ = const_cast< ::KuplungApp::MeshMaterialTextureImage*>(
      ::KuplungApp::MeshMaterialTextureImage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeshModelMaterial::kMaterialIDFieldNumber;
const int MeshModelMaterial::kMaterialTitleFieldNumber;
const int MeshModelMaterial::kAmbientColorFieldNumber;
const int MeshModelMaterial::kDiffuseColorFieldNumber;
const int MeshModelMaterial::kSpecularColorFieldNumber;
const int MeshModelMaterial::kEmissionColorFieldNumber;
const int MeshModelMaterial::kSpecularExpFieldNumber;
const int MeshModelMaterial::kTransparencyFieldNumber;
const int MeshModelMaterial::kIlluminationModeFieldNumber;
const int MeshModelMaterial::kOpticalDensityFieldNumber;
const int MeshModelMaterial::kTextureAmbientFieldNumber;
const int MeshModelMaterial::kTextureDiffuseFieldNumber;
const int MeshModelMaterial::kTextureSpecularFieldNumber;
const int MeshModelMaterial::kTextureSpecularExpFieldNumber;
const int MeshModelMaterial::kTextureDissolveFieldNumber;
const int MeshModelMaterial::kTextureBumpFieldNumber;
const int MeshModelMaterial::kTextureDisplacementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeshModelMaterial::MeshModelMaterial()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungDefinitions_2eproto::InitDefaultsMeshModelMaterial();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.MeshModelMaterial)
}
MeshModelMaterial::MeshModelMaterial(const MeshModelMaterial& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  materialtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_materialtitle()) {
    materialtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.materialtitle_);
  }
  if (from.has_ambientcolor()) {
    ambientcolor_ = new ::KuplungApp::Vec3(*from.ambientcolor_);
  } else {
    ambientcolor_ = NULL;
  }
  if (from.has_diffusecolor()) {
    diffusecolor_ = new ::KuplungApp::Vec3(*from.diffusecolor_);
  } else {
    diffusecolor_ = NULL;
  }
  if (from.has_specularcolor()) {
    specularcolor_ = new ::KuplungApp::Vec3(*from.specularcolor_);
  } else {
    specularcolor_ = NULL;
  }
  if (from.has_emissioncolor()) {
    emissioncolor_ = new ::KuplungApp::Vec3(*from.emissioncolor_);
  } else {
    emissioncolor_ = NULL;
  }
  if (from.has_textureambient()) {
    textureambient_ = new ::KuplungApp::MeshMaterialTextureImage(*from.textureambient_);
  } else {
    textureambient_ = NULL;
  }
  if (from.has_texturediffuse()) {
    texturediffuse_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturediffuse_);
  } else {
    texturediffuse_ = NULL;
  }
  if (from.has_texturespecular()) {
    texturespecular_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturespecular_);
  } else {
    texturespecular_ = NULL;
  }
  if (from.has_texturespecularexp()) {
    texturespecularexp_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturespecularexp_);
  } else {
    texturespecularexp_ = NULL;
  }
  if (from.has_texturedissolve()) {
    texturedissolve_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturedissolve_);
  } else {
    texturedissolve_ = NULL;
  }
  if (from.has_texturebump()) {
    texturebump_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturebump_);
  } else {
    texturebump_ = NULL;
  }
  if (from.has_texturedisplacement()) {
    texturedisplacement_ = new ::KuplungApp::MeshMaterialTextureImage(*from.texturedisplacement_);
  } else {
    texturedisplacement_ = NULL;
  }
  ::memcpy(&materialid_, &from.materialid_,
    static_cast<size_t>(reinterpret_cast<char*>(&opticaldensity_) -
    reinterpret_cast<char*>(&materialid_)) + sizeof(opticaldensity_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.MeshModelMaterial)
}

void MeshModelMaterial::SharedCtor() {
  _cached_size_ = 0;
  materialtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ambientcolor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opticaldensity_) -
      reinterpret_cast<char*>(&ambientcolor_)) + sizeof(opticaldensity_));
}

MeshModelMaterial::~MeshModelMaterial() {
  // @@protoc_insertion_point(destructor:KuplungApp.MeshModelMaterial)
  SharedDtor();
}

void MeshModelMaterial::SharedDtor() {
  materialtitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ambientcolor_;
  if (this != internal_default_instance()) delete diffusecolor_;
  if (this != internal_default_instance()) delete specularcolor_;
  if (this != internal_default_instance()) delete emissioncolor_;
  if (this != internal_default_instance()) delete textureambient_;
  if (this != internal_default_instance()) delete texturediffuse_;
  if (this != internal_default_instance()) delete texturespecular_;
  if (this != internal_default_instance()) delete texturespecularexp_;
  if (this != internal_default_instance()) delete texturedissolve_;
  if (this != internal_default_instance()) delete texturebump_;
  if (this != internal_default_instance()) delete texturedisplacement_;
}

void MeshModelMaterial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeshModelMaterial::descriptor() {
  ::protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeshModelMaterial& MeshModelMaterial::default_instance() {
  ::protobuf_KuplungDefinitions_2eproto::InitDefaultsMeshModelMaterial();
  return *internal_default_instance();
}

MeshModelMaterial* MeshModelMaterial::New(::google::protobuf::Arena* arena) const {
  MeshModelMaterial* n = new MeshModelMaterial;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeshModelMaterial::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.MeshModelMaterial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!materialtitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*materialtitle_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ambientcolor_ != NULL);
      ambientcolor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(diffusecolor_ != NULL);
      diffusecolor_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(specularcolor_ != NULL);
      specularcolor_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(emissioncolor_ != NULL);
      emissioncolor_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(textureambient_ != NULL);
      textureambient_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(texturediffuse_ != NULL);
      texturediffuse_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(texturespecular_ != NULL);
      texturespecular_->Clear();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(texturespecularexp_ != NULL);
      texturespecularexp_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(texturedissolve_ != NULL);
      texturedissolve_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(texturebump_ != NULL);
      texturebump_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(texturedisplacement_ != NULL);
      texturedisplacement_->Clear();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&materialid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&illuminationmode_) -
        reinterpret_cast<char*>(&materialid_)) + sizeof(illuminationmode_));
  }
  opticaldensity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MeshModelMaterial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.MeshModelMaterial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MaterialID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_materialid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string MaterialTitle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_materialtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->materialtitle().data(), static_cast<int>(this->materialtitle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.MeshModelMaterial.MaterialTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 AmbientColor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ambientcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 DiffuseColor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_diffusecolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 SpecularColor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_specularcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.Vec3 EmissionColor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_emissioncolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float SpecularExp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_specularexp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &specularexp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Transparency = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_transparency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required fixed32 IlluminationMode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_illuminationmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &illuminationmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float OpticalDensity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_opticaldensity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opticaldensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_textureambient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_texturediffuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_texturespecular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_texturespecularexp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_texturedissolve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_texturebump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_texturedisplacement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.MeshModelMaterial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.MeshModelMaterial)
  return false;
#undef DO_
}

void MeshModelMaterial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.MeshModelMaterial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MaterialID = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->materialid(), output);
  }

  // required string MaterialTitle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->materialtitle().data(), static_cast<int>(this->materialtitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshModelMaterial.MaterialTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->materialtitle(), output);
  }

  // required .KuplungApp.Vec3 AmbientColor = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ambientcolor_, output);
  }

  // required .KuplungApp.Vec3 DiffuseColor = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->diffusecolor_, output);
  }

  // required .KuplungApp.Vec3 SpecularColor = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->specularcolor_, output);
  }

  // required .KuplungApp.Vec3 EmissionColor = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->emissioncolor_, output);
  }

  // required float SpecularExp = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->specularexp(), output);
  }

  // required float Transparency = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->transparency(), output);
  }

  // required fixed32 IlluminationMode = 9;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->illuminationmode(), output);
  }

  // required float OpticalDensity = 10;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->opticaldensity(), output);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->textureambient_, output);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->texturediffuse_, output);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->texturespecular_, output);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->texturespecularexp_, output);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->texturedissolve_, output);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->texturebump_, output);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->texturedisplacement_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.MeshModelMaterial)
}

::google::protobuf::uint8* MeshModelMaterial::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.MeshModelMaterial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 MaterialID = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->materialid(), target);
  }

  // required string MaterialTitle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->materialtitle().data(), static_cast<int>(this->materialtitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.MeshModelMaterial.MaterialTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->materialtitle(), target);
  }

  // required .KuplungApp.Vec3 AmbientColor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->ambientcolor_, deterministic, target);
  }

  // required .KuplungApp.Vec3 DiffuseColor = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->diffusecolor_, deterministic, target);
  }

  // required .KuplungApp.Vec3 SpecularColor = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->specularcolor_, deterministic, target);
  }

  // required .KuplungApp.Vec3 EmissionColor = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->emissioncolor_, deterministic, target);
  }

  // required float SpecularExp = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->specularexp(), target);
  }

  // required float Transparency = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->transparency(), target);
  }

  // required fixed32 IlluminationMode = 9;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->illuminationmode(), target);
  }

  // required float OpticalDensity = 10;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->opticaldensity(), target);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->textureambient_, deterministic, target);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->texturediffuse_, deterministic, target);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *this->texturespecular_, deterministic, target);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->texturespecularexp_, deterministic, target);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *this->texturedissolve_, deterministic, target);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->texturebump_, deterministic, target);
  }

  // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, *this->texturedisplacement_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.MeshModelMaterial)
  return target;
}

size_t MeshModelMaterial::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.MeshModelMaterial)
  size_t total_size = 0;

  if (has_materialtitle()) {
    // required string MaterialTitle = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->materialtitle());
  }

  if (has_ambientcolor()) {
    // required .KuplungApp.Vec3 AmbientColor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ambientcolor_);
  }

  if (has_diffusecolor()) {
    // required .KuplungApp.Vec3 DiffuseColor = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->diffusecolor_);
  }

  if (has_specularcolor()) {
    // required .KuplungApp.Vec3 SpecularColor = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->specularcolor_);
  }

  if (has_emissioncolor()) {
    // required .KuplungApp.Vec3 EmissionColor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->emissioncolor_);
  }

  if (has_textureambient()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->textureambient_);
  }

  if (has_texturediffuse()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturediffuse_);
  }

  if (has_texturespecular()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturespecular_);
  }

  if (has_texturespecularexp()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturespecularexp_);
  }

  if (has_texturedissolve()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturedissolve_);
  }

  if (has_texturebump()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturebump_);
  }

  if (has_texturedisplacement()) {
    // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturedisplacement_);
  }

  if (has_materialid()) {
    // required int32 MaterialID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->materialid());
  }

  if (has_specularexp()) {
    // required float SpecularExp = 7;
    total_size += 1 + 4;
  }

  if (has_transparency()) {
    // required float Transparency = 8;
    total_size += 1 + 4;
  }

  if (has_illuminationmode()) {
    // required fixed32 IlluminationMode = 9;
    total_size += 1 + 4;
  }

  if (has_opticaldensity()) {
    // required float OpticalDensity = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MeshModelMaterial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.MeshModelMaterial)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0001ffff) ^ 0x0001ffff) == 0) {  // All required fields are present.
    // required string MaterialTitle = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->materialtitle());

    // required .KuplungApp.Vec3 AmbientColor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ambientcolor_);

    // required .KuplungApp.Vec3 DiffuseColor = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->diffusecolor_);

    // required .KuplungApp.Vec3 SpecularColor = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->specularcolor_);

    // required .KuplungApp.Vec3 EmissionColor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->emissioncolor_);

    // required .KuplungApp.MeshMaterialTextureImage TextureAmbient = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->textureambient_);

    // required .KuplungApp.MeshMaterialTextureImage TextureDiffuse = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturediffuse_);

    // required .KuplungApp.MeshMaterialTextureImage TextureSpecular = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturespecular_);

    // required .KuplungApp.MeshMaterialTextureImage TextureSpecularExp = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturespecularexp_);

    // required .KuplungApp.MeshMaterialTextureImage TextureDissolve = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturedissolve_);

    // required .KuplungApp.MeshMaterialTextureImage TextureBump = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturebump_);

    // required .KuplungApp.MeshMaterialTextureImage TextureDisplacement = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->texturedisplacement_);

    // required int32 MaterialID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->materialid());

    // required float SpecularExp = 7;
    total_size += 1 + 4;

    // required float Transparency = 8;
    total_size += 1 + 4;

    // required fixed32 IlluminationMode = 9;
    total_size += 1 + 4;

    // required float OpticalDensity = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeshModelMaterial::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.MeshModelMaterial)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshModelMaterial* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeshModelMaterial>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.MeshModelMaterial)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.MeshModelMaterial)
    MergeFrom(*source);
  }
}

void MeshModelMaterial::MergeFrom(const MeshModelMaterial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.MeshModelMaterial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_materialtitle();
      materialtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.materialtitle_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ambientcolor()->::KuplungApp::Vec3::MergeFrom(from.ambientcolor());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_diffusecolor()->::KuplungApp::Vec3::MergeFrom(from.diffusecolor());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_specularcolor()->::KuplungApp::Vec3::MergeFrom(from.specularcolor());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_emissioncolor()->::KuplungApp::Vec3::MergeFrom(from.emissioncolor());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_textureambient()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from.textureambient());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_texturediffuse()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from.texturediffuse());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_texturespecular()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from.texturespecular());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_texturespecularexp()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from.texturespecularexp());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_texturedissolve()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from.texturedissolve());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_texturebump()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from.texturebump());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_texturedisplacement()->::KuplungApp::MeshMaterialTextureImage::MergeFrom(from.texturedisplacement());
    }
    if (cached_has_bits & 0x00001000u) {
      materialid_ = from.materialid_;
    }
    if (cached_has_bits & 0x00002000u) {
      specularexp_ = from.specularexp_;
    }
    if (cached_has_bits & 0x00004000u) {
      transparency_ = from.transparency_;
    }
    if (cached_has_bits & 0x00008000u) {
      illuminationmode_ = from.illuminationmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_opticaldensity(from.opticaldensity());
  }
}

void MeshModelMaterial::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.MeshModelMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshModelMaterial::CopyFrom(const MeshModelMaterial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.MeshModelMaterial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshModelMaterial::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;
  if (has_ambientcolor()) {
    if (!this->ambientcolor_->IsInitialized()) return false;
  }
  if (has_diffusecolor()) {
    if (!this->diffusecolor_->IsInitialized()) return false;
  }
  if (has_specularcolor()) {
    if (!this->specularcolor_->IsInitialized()) return false;
  }
  if (has_emissioncolor()) {
    if (!this->emissioncolor_->IsInitialized()) return false;
  }
  if (has_textureambient()) {
    if (!this->textureambient_->IsInitialized()) return false;
  }
  if (has_texturediffuse()) {
    if (!this->texturediffuse_->IsInitialized()) return false;
  }
  if (has_texturespecular()) {
    if (!this->texturespecular_->IsInitialized()) return false;
  }
  if (has_texturespecularexp()) {
    if (!this->texturespecularexp_->IsInitialized()) return false;
  }
  if (has_texturedissolve()) {
    if (!this->texturedissolve_->IsInitialized()) return false;
  }
  if (has_texturebump()) {
    if (!this->texturebump_->IsInitialized()) return false;
  }
  if (has_texturedisplacement()) {
    if (!this->texturedisplacement_->IsInitialized()) return false;
  }
  return true;
}

void MeshModelMaterial::Swap(MeshModelMaterial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeshModelMaterial::InternalSwap(MeshModelMaterial* other) {
  using std::swap;
  materialtitle_.Swap(&other->materialtitle_);
  swap(ambientcolor_, other->ambientcolor_);
  swap(diffusecolor_, other->diffusecolor_);
  swap(specularcolor_, other->specularcolor_);
  swap(emissioncolor_, other->emissioncolor_);
  swap(textureambient_, other->textureambient_);
  swap(texturediffuse_, other->texturediffuse_);
  swap(texturespecular_, other->texturespecular_);
  swap(texturespecularexp_, other->texturespecularexp_);
  swap(texturedissolve_, other->texturedissolve_);
  swap(texturebump_, other->texturebump_);
  swap(texturedisplacement_, other->texturedisplacement_);
  swap(materialid_, other->materialid_);
  swap(specularexp_, other->specularexp_);
  swap(transparency_, other->transparency_);
  swap(illuminationmode_, other->illuminationmode_);
  swap(opticaldensity_, other->opticaldensity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeshModelMaterial::GetMetadata() const {
  protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mesh::InitAsDefaultInstance() {
  ::KuplungApp::_Mesh_default_instance_._instance.get_mutable()->file_ = const_cast< ::KuplungApp::FBEntity*>(
      ::KuplungApp::FBEntity::internal_default_instance());
  ::KuplungApp::_Mesh_default_instance_._instance.get_mutable()->modelmaterial_ = const_cast< ::KuplungApp::MeshModelMaterial*>(
      ::KuplungApp::MeshModelMaterial::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh::kIDFieldNumber;
const int Mesh::kFileFieldNumber;
const int Mesh::kModelTitleFieldNumber;
const int Mesh::kMaterialTitleFieldNumber;
const int Mesh::kCountVerticesFieldNumber;
const int Mesh::kCountTextureCoordinatesFieldNumber;
const int Mesh::kCountNormalsFieldNumber;
const int Mesh::kCountIndicesFieldNumber;
const int Mesh::kModelMaterialFieldNumber;
const int Mesh::kVerticesFieldNumber;
const int Mesh::kTextureCoordinatesFieldNumber;
const int Mesh::kNormalsFieldNumber;
const int Mesh::kIndicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh::Mesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_KuplungDefinitions_2eproto::InitDefaultsMesh();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KuplungApp.Mesh)
}
Mesh::Mesh(const Mesh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      vertices_(from.vertices_),
      texture_coordinates_(from.texture_coordinates_),
      normals_(from.normals_),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modeltitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_modeltitle()) {
    modeltitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modeltitle_);
  }
  materialtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_materialtitle()) {
    materialtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.materialtitle_);
  }
  if (from.has_file()) {
    file_ = new ::KuplungApp::FBEntity(*from.file_);
  } else {
    file_ = NULL;
  }
  if (from.has_modelmaterial()) {
    modelmaterial_ = new ::KuplungApp::MeshModelMaterial(*from.modelmaterial_);
  } else {
    modelmaterial_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&countindices_) -
    reinterpret_cast<char*>(&id_)) + sizeof(countindices_));
  // @@protoc_insertion_point(copy_constructor:KuplungApp.Mesh)
}

void Mesh::SharedCtor() {
  _cached_size_ = 0;
  modeltitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  materialtitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&countindices_) -
      reinterpret_cast<char*>(&file_)) + sizeof(countindices_));
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:KuplungApp.Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  modeltitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  materialtitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete modelmaterial_;
}

void Mesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh::descriptor() {
  ::protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mesh& Mesh::default_instance() {
  ::protobuf_KuplungDefinitions_2eproto::InitDefaultsMesh();
  return *internal_default_instance();
}

Mesh* Mesh::New(::google::protobuf::Arena* arena) const {
  Mesh* n = new Mesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:KuplungApp.Mesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  texture_coordinates_.Clear();
  normals_.Clear();
  indices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!modeltitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*modeltitle_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!materialtitle_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*materialtitle_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(file_ != NULL);
      file_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(modelmaterial_ != NULL);
      modelmaterial_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&countnormals_) -
        reinterpret_cast<char*>(&id_)) + sizeof(countnormals_));
  }
  countindices_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KuplungApp.Mesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.FBEntity File = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ModelTitle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modeltitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modeltitle().data(), static_cast<int>(this->modeltitle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.Mesh.ModelTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string MaterialTitle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_materialtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->materialtitle().data(), static_cast<int>(this->materialtitle().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "KuplungApp.Mesh.MaterialTitle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 countVertices = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_countvertices();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countvertices_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 countTextureCoordinates = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_counttexturecoordinates();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counttexturecoordinates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 countNormals = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_countnormals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countnormals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 countIndices = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_countindices();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countindices_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modelmaterial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .KuplungApp.Vec3 vertices = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .KuplungApp.Vec2 texture_coordinates = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_texture_coordinates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .KuplungApp.Vec3 normals = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_normals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 indices = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 109u, input, this->mutable_indices())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_indices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KuplungApp.Mesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KuplungApp.Mesh)
  return false;
#undef DO_
}

void Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KuplungApp.Mesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ID = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .KuplungApp.FBEntity File = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->file_, output);
  }

  // required string ModelTitle = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modeltitle().data(), static_cast<int>(this->modeltitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.Mesh.ModelTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->modeltitle(), output);
  }

  // required string MaterialTitle = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->materialtitle().data(), static_cast<int>(this->materialtitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.Mesh.MaterialTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->materialtitle(), output);
  }

  // required int32 countVertices = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->countvertices(), output);
  }

  // required int32 countTextureCoordinates = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->counttexturecoordinates(), output);
  }

  // required int32 countNormals = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->countnormals(), output);
  }

  // required int32 countIndices = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->countindices(), output);
  }

  // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->modelmaterial_, output);
  }

  // repeated .KuplungApp.Vec3 vertices = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vertices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vertices(static_cast<int>(i)), output);
  }

  // repeated .KuplungApp.Vec2 texture_coordinates = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texture_coordinates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->texture_coordinates(static_cast<int>(i)), output);
  }

  // repeated .KuplungApp.Vec3 normals = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->normals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->normals(static_cast<int>(i)), output);
  }

  // repeated fixed32 indices = 13;
  for (int i = 0, n = this->indices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      13, this->indices(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KuplungApp.Mesh)
}

::google::protobuf::uint8* Mesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KuplungApp.Mesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ID = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .KuplungApp.FBEntity File = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->file_, deterministic, target);
  }

  // required string ModelTitle = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modeltitle().data(), static_cast<int>(this->modeltitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.Mesh.ModelTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->modeltitle(), target);
  }

  // required string MaterialTitle = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->materialtitle().data(), static_cast<int>(this->materialtitle().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "KuplungApp.Mesh.MaterialTitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->materialtitle(), target);
  }

  // required int32 countVertices = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->countvertices(), target);
  }

  // required int32 countTextureCoordinates = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->counttexturecoordinates(), target);
  }

  // required int32 countNormals = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->countnormals(), target);
  }

  // required int32 countIndices = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->countindices(), target);
  }

  // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->modelmaterial_, deterministic, target);
  }

  // repeated .KuplungApp.Vec3 vertices = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vertices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->vertices(static_cast<int>(i)), deterministic, target);
  }

  // repeated .KuplungApp.Vec2 texture_coordinates = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texture_coordinates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->texture_coordinates(static_cast<int>(i)), deterministic, target);
  }

  // repeated .KuplungApp.Vec3 normals = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->normals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->normals(static_cast<int>(i)), deterministic, target);
  }

  // repeated fixed32 indices = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(13, this->indices_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KuplungApp.Mesh)
  return target;
}

size_t Mesh::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KuplungApp.Mesh)
  size_t total_size = 0;

  if (has_modeltitle()) {
    // required string ModelTitle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modeltitle());
  }

  if (has_materialtitle()) {
    // required string MaterialTitle = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->materialtitle());
  }

  if (has_file()) {
    // required .KuplungApp.FBEntity File = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->file_);
  }

  if (has_modelmaterial()) {
    // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->modelmaterial_);
  }

  if (has_id()) {
    // required int32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_countvertices()) {
    // required int32 countVertices = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countvertices());
  }

  if (has_counttexturecoordinates()) {
    // required int32 countTextureCoordinates = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->counttexturecoordinates());
  }

  if (has_countnormals()) {
    // required int32 countNormals = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countnormals());
  }

  if (has_countindices()) {
    // required int32 countIndices = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countindices());
  }

  return total_size;
}
size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KuplungApp.Mesh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string ModelTitle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modeltitle());

    // required string MaterialTitle = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->materialtitle());

    // required .KuplungApp.FBEntity File = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->file_);

    // required .KuplungApp.MeshModelMaterial ModelMaterial = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->modelmaterial_);

    // required int32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 countVertices = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countvertices());

    // required int32 countTextureCoordinates = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->counttexturecoordinates());

    // required int32 countNormals = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countnormals());

    // required int32 countIndices = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countindices());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .KuplungApp.Vec3 vertices = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->vertices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vertices(static_cast<int>(i)));
    }
  }

  // repeated .KuplungApp.Vec2 texture_coordinates = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->texture_coordinates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->texture_coordinates(static_cast<int>(i)));
    }
  }

  // repeated .KuplungApp.Vec3 normals = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->normals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->normals(static_cast<int>(i)));
    }
  }

  // repeated fixed32 indices = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->indices_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->indices_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KuplungApp.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KuplungApp.Mesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KuplungApp.Mesh)
    MergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KuplungApp.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  texture_coordinates_.MergeFrom(from.texture_coordinates_);
  normals_.MergeFrom(from.normals_);
  indices_.MergeFrom(from.indices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_modeltitle();
      modeltitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modeltitle_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_materialtitle();
      materialtitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.materialtitle_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_file()->::KuplungApp::FBEntity::MergeFrom(from.file());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_modelmaterial()->::KuplungApp::MeshModelMaterial::MergeFrom(from.modelmaterial());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      countvertices_ = from.countvertices_;
    }
    if (cached_has_bits & 0x00000040u) {
      counttexturecoordinates_ = from.counttexturecoordinates_;
    }
    if (cached_has_bits & 0x00000080u) {
      countnormals_ = from.countnormals_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_countindices(from.countindices());
  }
}

void Mesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KuplungApp.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KuplungApp.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vertices())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->texture_coordinates())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->normals())) return false;
  if (has_file()) {
    if (!this->file_->IsInitialized()) return false;
  }
  if (has_modelmaterial()) {
    if (!this->modelmaterial_->IsInitialized()) return false;
  }
  return true;
}

void Mesh::Swap(Mesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh::InternalSwap(Mesh* other) {
  using std::swap;
  vertices_.InternalSwap(&other->vertices_);
  texture_coordinates_.InternalSwap(&other->texture_coordinates_);
  normals_.InternalSwap(&other->normals_);
  indices_.InternalSwap(&other->indices_);
  modeltitle_.Swap(&other->modeltitle_);
  materialtitle_.Swap(&other->materialtitle_);
  swap(file_, other->file_);
  swap(modelmaterial_, other->modelmaterial_);
  swap(id_, other->id_);
  swap(countvertices_, other->countvertices_);
  swap(counttexturecoordinates_, other->counttexturecoordinates_);
  swap(countnormals_, other->countnormals_);
  swap(countindices_, other->countindices_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  protobuf_KuplungDefinitions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KuplungDefinitions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KuplungApp

// @@protoc_insertion_point(global_scope)
